{"0": {
    "doc": "Articles for Week of 01/10/2022",
    "title": "Articles for Week of 01/10/2022",
    "content": " ",
    "url": "/notes/articles/01-10-2022-articles",
    
    "relUrl": "/notes/articles/01-10-2022-articles"
  },"1": {
    "doc": "Articles for Week of 01/10/2022",
    "title": "Routine Maintenance",
    "content": "Embracing habit in an automated world Meghan O’Gieblyn The author argues the case for habit in an increasing automated world, moving through historical antecedents for habit compared to spontaneity. Historically, rote habit had been considered something less than human, the bits of us that make us human are the things that we don’t do on autopilot. Author brings up the ALM hypothesis, which states that digital technology behaves as substitutes for routine cognitive occupations and as compliments for non-routine occupations. But with an increasingly bizarre world where the worker is divorced from the products of their labor (AI black boxes), this concept of freedom is increasingly unattainable. ",
    "url": "/notes/articles/01-10-2022-articles#routine-maintenance",
    
    "relUrl": "/notes/articles/01-10-2022-articles#routine-maintenance"
  },"2": {
    "doc": "Articles for Week of 01/10/2022",
    "title": "Living on 24 Hours a Day",
    "content": " ",
    "url": "/notes/articles/01-10-2022-articles#living-on-24-hours-a-day",
    
    "relUrl": "/notes/articles/01-10-2022-articles#living-on-24-hours-a-day"
  },"3": {
    "doc": "Articles for Week of 01/10/2022",
    "title": "The Rise and Fall of Getting Things Done",
    "content": " ",
    "url": "/notes/articles/01-10-2022-articles#the-rise-and-fall-of-getting-things-done",
    
    "relUrl": "/notes/articles/01-10-2022-articles#the-rise-and-fall-of-getting-things-done"
  },"4": {
    "doc": "Articles for Week of 01/10/2022",
    "title": "Chatbots: Still Dumb After All These Years",
    "content": " ",
    "url": "/notes/articles/01-10-2022-articles#chatbots-still-dumb-after-all-these-years",
    
    "relUrl": "/notes/articles/01-10-2022-articles#chatbots-still-dumb-after-all-these-years"
  },"5": {
    "doc": "Articles for Week of 01/10/2022",
    "title": "Chatbots: Still Dumb After All These Years (Original)",
    "content": " ",
    "url": "/notes/articles/01-10-2022-articles#chatbots-still-dumb-after-all-these-years-original",
    
    "relUrl": "/notes/articles/01-10-2022-articles#chatbots-still-dumb-after-all-these-years-original"
  },"6": {
    "doc": "Articles for 10/18/2021",
    "title": "Articles for 10/18/2021",
    "content": " ",
    "url": "/notes/articles/10-18-2021-articles",
    
    "relUrl": "/notes/articles/10-18-2021-articles"
  },"7": {
    "doc": "Articles for 10/18/2021",
    "title": "The Weak Case for Grit",
    "content": "[…] while grit might be useful in certain very specific domains, it is not, broadly speaking, a particularly helpful concept for predicting who will succeed and who will not—or at least it doesn’t beat the tools we already have at our disposal. This article directly refutes Duckworth’s claim that grit is a valid and meaningful predictor of success, instead arguing that this concept existed all along in the conscientious part of the OCEAN personality heuristic (openness (to experience), conscientiousness, extraversion, agreeableness, and neuroticism). The article seems to disagree for the sake disagreeing, claiming there has been on reputable studies on grit as an isolated component of success. Anecdotally, grit, or decomposed to perseverance in the face of adversity and consistency of effort, seems like a worthwhile attribute to have and to cultivate. The author even concedes it is possible to develop grit and resilience. ",
    "url": "/notes/articles/10-18-2021-articles#the-weak-case-for-grit",
    
    "relUrl": "/notes/articles/10-18-2021-articles#the-weak-case-for-grit"
  },"8": {
    "doc": "2022 Vocabulary",
    "title": "2022 Vocabulary",
    "content": " ",
    "url": "/notes/vocabulary/2022-vocab",
    
    "relUrl": "/notes/vocabulary/2022-vocab"
  },"9": {
    "doc": "2022 Vocabulary",
    "title": "lambent [ lam-buhnt ]",
    "content": "running or moving lightly over a surface . ",
    "url": "/notes/vocabulary/2022-vocab#lambent--lam-buhnt-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#lambent--lam-buhnt-"
  },"10": {
    "doc": "2022 Vocabulary",
    "title": "unctuous [** uhngk**-choo-uhs ]",
    "content": ". | characterized by excessive piousness or moralistic fervor, especially in an affected manner; excessively smooth, suave, or smug. | of the nature of or characteristic of an unguent or ointment; oily; greasy. | having an oily or soapy feel, as certain minerals. | . ",
    "url": "/notes/vocabulary/2022-vocab#unctuous--uhngk-choo-uhs-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#unctuous--uhngk-choo-uhs-"
  },"11": {
    "doc": "2022 Vocabulary",
    "title": "lyrate [ lie-reyt ]",
    "content": ". | Botany. (of a pinnate leaf) divided transversely into several lobes, the smallest at the base. | Zoology. having the shape of a lyre, as the tail of certain birds. | . ",
    "url": "/notes/vocabulary/2022-vocab#lyrate--lie-reyt-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#lyrate--lie-reyt-"
  },"12": {
    "doc": "2022 Vocabulary",
    "title": "integument [ in-teg-yuh-muhnt ]",
    "content": ". | a natural covering, as a skin, shell, or rind. | any covering, coating, enclosure, etc. | . ",
    "url": "/notes/vocabulary/2022-vocab#integument--in-teg-yuh-muhnt-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#integument--in-teg-yuh-muhnt-"
  },"13": {
    "doc": "2022 Vocabulary",
    "title": "morocco [ muh-rok-oh ]",
    "content": "a fine, pebble-grained leather, originally made in Morocco from goatskin tanned with sumac. ",
    "url": "/notes/vocabulary/2022-vocab#morocco--muh-rok-oh-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#morocco--muh-rok-oh-"
  },"14": {
    "doc": "2022 Vocabulary",
    "title": "pogonophile",
    "content": "someone who loves beards . ",
    "url": "/notes/vocabulary/2022-vocab#pogonophile",
    
    "relUrl": "/notes/vocabulary/2022-vocab#pogonophile"
  },"15": {
    "doc": "2022 Vocabulary",
    "title": "nocturia [ nok-toor-ee-uh ]",
    "content": "a condition in which one often wakes up during the night to urinate. ",
    "url": "/notes/vocabulary/2022-vocab#nocturia--nok-toor-ee-uh-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#nocturia--nok-toor-ee-uh-"
  },"16": {
    "doc": "2022 Vocabulary",
    "title": "proprietary eponym",
    "content": "A successful brand name or trademark that has come into general use to refer to the generic class of objects rather than the specific brand type, without the exclusive rights to said product being lost by the parent company, e.g., Hoover for vacuum, Aspirin for any headache medication . ",
    "url": "/notes/vocabulary/2022-vocab#proprietary-eponym",
    
    "relUrl": "/notes/vocabulary/2022-vocab#proprietary-eponym"
  },"17": {
    "doc": "2022 Vocabulary",
    "title": "jeremiad [ jer-uh-mahy-uhd ]",
    "content": "a prolonged lamentation or mournful complaint . ",
    "url": "/notes/vocabulary/2022-vocab#jeremiad--jer-uh-mahy-uhd-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#jeremiad--jer-uh-mahy-uhd-"
  },"18": {
    "doc": "2022 Vocabulary",
    "title": "limpid [ lim-pid ]",
    "content": ". | clear, transparent as water, crystal or air | free from obscurity; lucid; clear | completely calm; without distress or worry | . ",
    "url": "/notes/vocabulary/2022-vocab#limpid--lim-pid-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#limpid--lim-pid-"
  },"19": {
    "doc": "2022 Vocabulary",
    "title": "syllogism [ sil-uh-jiz-uhm ]",
    "content": "1.. Logic. an argument the conclusion of which is supported by two premises, of which one (major premise) contains the term (major term) that is the predicate of the conclusion, and the other (minor premise ) contains the term (minor term) that is the subject of the conclusion; common to both premises is a term (middle term) that is excluded from the conclusion. A typical form is “All A is C; all B is A; therefore all B is C.” . | deductive reasoning. | an extremely subtle, sophisticated, or deceptive argument. | . ",
    "url": "/notes/vocabulary/2022-vocab#syllogism--sil-uh-jiz-uhm-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#syllogism--sil-uh-jiz-uhm-"
  },"20": {
    "doc": "2022 Vocabulary",
    "title": "temerarious [ tem-uh-rair-ee-uhs ]",
    "content": ". | reckless; rash | . ",
    "url": "/notes/vocabulary/2022-vocab#temerarious--tem-uh-rair-ee-uhs-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#temerarious--tem-uh-rair-ee-uhs-"
  },"21": {
    "doc": "2022 Vocabulary",
    "title": "perspicacity [ pur-spi-kas-i-tee ]",
    "content": "keenness of mental perception and understanding. ",
    "url": "/notes/vocabulary/2022-vocab#perspicacity--pur-spi-kas-i-tee-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#perspicacity--pur-spi-kas-i-tee-"
  },"22": {
    "doc": "2022 Vocabulary",
    "title": "pullulate [ puhl-yuh-leyt ]",
    "content": ". | to send forth sprouts, buds, etc.; germinate; sprout. | to breed, produce, or create rapidly. | to increase rapidly; multiply. | to exist abundantly; swarm; teem. | to be produced as offspring. | . ",
    "url": "/notes/vocabulary/2022-vocab#pullulate--puhl-yuh-leyt-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#pullulate--puhl-yuh-leyt-"
  },"23": {
    "doc": "2022 Vocabulary",
    "title": "dithyramb [ dith-uh-ram ]",
    "content": ". | a Greek choral song or chant of vehement or wild character and of usually irregular form, originally in honor of Dionysus or Bacchus. | any poem or other composition having similar characteristics, as an impassioned or exalted theme or irregular form. | any wildly enthusiastic speech or writing. | . ",
    "url": "/notes/vocabulary/2022-vocab#dithyramb--dith-uh-ram-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#dithyramb--dith-uh-ram-"
  },"24": {
    "doc": "2022 Vocabulary",
    "title": "marmoreal [ mahr-mawr-ee-uhl ]",
    "content": "of or like marble: . ",
    "url": "/notes/vocabulary/2022-vocab#marmoreal--mahr-mawr-ee-uhl-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#marmoreal--mahr-mawr-ee-uhl-"
  },"25": {
    "doc": "2022 Vocabulary",
    "title": "crepuscular [ kri-puhs-kyuh-ler ]",
    "content": "of, relating to, or resembling twilight; dim; indistinct. ",
    "url": "/notes/vocabulary/2022-vocab#crepuscular--kri-puhs-kyuh-ler-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#crepuscular--kri-puhs-kyuh-ler-"
  },"26": {
    "doc": "2022 Vocabulary",
    "title": "apotheosis [ uh-poth-ee-oh-sis ]",
    "content": ". | the elevation or exaltation of a person to the rank of a god. | the ideal example; epitome; quintessence: | . ",
    "url": "/notes/vocabulary/2022-vocab#apotheosis--uh-poth-ee-oh-sis-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#apotheosis--uh-poth-ee-oh-sis-"
  },"27": {
    "doc": "2022 Vocabulary",
    "title": "choleric [ kol-er-ik ]",
    "content": "extremely irritable or easily angered; irascible . ",
    "url": "/notes/vocabulary/2022-vocab#choleric--kol-er-ik-",
    
    "relUrl": "/notes/vocabulary/2022-vocab#choleric--kol-er-ik-"
  },"28": {
    "doc": "21 Lessons for the 21st Century",
    "title": "21 Lessons for the 21st Century",
    "content": "Yuval Noah Harrari, 2018 . | Disillusionment | Work | Liberty | Equality | Community | Civilization | Nationalism | Religion | Immigration | Terrorism | War | Humility | God | Secularism | Ignorance | Justice | Post-Truth | Science Fiction | Education | Meaning | Meditation | Reflections on the Book | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century"
  },"29": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Disillusionment",
    "content": ". | the 21st century had three dominant stories: . | fascism - history as a struggle among different nations, world is dominated by one human group that violently subdues all others | communism - history as struggle among different classes, world is all groups united by centralized system that ensures equality at price of freedom | liberalism - history as struggle between liberty and tyranny, world is all humans cooperate freely and peacefully with minimal central control even at price of some inequality | . | liberalism became the dominant story after the fall of fascism after WWII and the fall of communism after USSR | recently, liberalism has been rejected – we see this in election of Trump, or Brexit, for example. A rejection of the thrust of globalization (while still maintaining some tenets of liberalism at home) | liberalism hasn’t been replaced by a “new story”, and humans need stories to function as groups | everyone embraces some form of liberalism (except for parts of the Middle East) – China has massive infrastructure spending (Belt-and-Road initiative - modern day Silk Road), Trump is in favor of free markets, etc. | nostalgic backwards thrust of humanity in 2010s – Trump’s Make America Great, Putin wanted to reinstate tsarist empire, Middle East wanting to teleport back 1,500 years | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#disillusionment",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#disillusionment"
  },"30": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Work",
    "content": ". | humans have two types of abilities: cognitive and physical – in the past machines have competed with humans in the physical, but now AI is outperforming humans in the cognitive too | human intuition really is just pattern recognition, humans reacting to millions of biochemical signals to do things | AI allows for connectability and updatability – all machines have much less lossy exchange of information than humans, and you can update all machines at once with new software | 1.25 million people killed annually in traffic accidents, the majority due to human error – reasonable to assume that AI driving would cut ~90% of those | rise of the useless caste - many low skill jobs are being completely lost to automation, but high skill jobs are plentiful – losing a low skill job without being able to switch to another low skill job means humans need to either gain new skills or become useless | disruption by automation won’t just be a single event but a cascade of disruptions | . three ways to think about job loss . | how to stop job loss | how to create new jobs | what to do if lost jobs outpaces created jobs | . two solutions are: . | universal basic income (capitalist utopia) - govt provides stipend to live | universal basic services (communist utopia) - govt provides all basic services for free | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#work",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#work"
  },"31": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Liberty",
    "content": ". | referendums are always about human feelings not rationality | feelings are biochemical reactions that all mammals and birds have to quickly calculate probabilities of survival | trolley problem – save children or trolley operator and passengers? applies to self-driving cars | human emotions trump philosophical ideas and humans use emotions to make life or death decisions | good samaritan study – theologians on way to present talk about good samaritan story frequently pass by a homeless man on the street coughing and moaning in pain | in moments of crisis, computers would follow ethical guidelines better than humans, as there is no emotional baggage | computers just need to be better than humans | science fiction posits that the day robots take over is when they achieve “consciousness”, but this equates consciousness with intelligence | consciousness is either 1) linked to organic systems in such a way that prevents anything else from achieving it 2) can be achieved by inorganic entities and is essential to achieve a certain level of intelligence 3) there is no link between consciousness and high intelligence and it is not required | . MM Note: Harrari has a tendency so far in this book to over-simplify ideas, such as implying that these “algorithms” are some conglomerate and are working in concert to hack humanity. There is a bit of fear-mongering of these “algorithms” as if they aren’t just very complicated statistical models limited to a few thousand features. Netflix has dedicated millions of engineering hours to its recommendation system, and it doesn’t seem entirely reliable. Humans aren’t just some interface with 1,000 buttons that a computer could learn to play like a piano. We are decades away from algorithms being able to take in enough inputs to mimic even small subsets of human action or emotion. ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#liberty",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#liberty"
  },"32": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Equality",
    "content": ". | property is a pre-requisite for long-term inequality | equality only became an ideal in late modern era with rise of communism and liberalism | globalization, instead of leading to global unity, might lead to biological castes/speciation, the rich with access to bioegineering and the poor left behind | the key according to Harrari is to regulate the ownership of data, where some countries might nationalize data | . MM Note:: Harrari isn’t very strong when speaking about “data”, equating all types data, from consumer patterns to biochemical indicators. Additionally, he seems to mythologize data in general. When he calls for philosophers, politicians, and lawyers to help us make sense of the complicated footprint of how we manage our data, he curiously is leaving out technlogy professionals. I don’t think Harrari is a technologist and seems to think data is some abstract thing that floats around our bodies, or that companies hoard like gold. But information as data needs very real infrastructure to hold it. It needs server banks and data engineers to build data pipelines, and business analysts to help separate signal from the noise, and business to agree on what data is actionable and what is useless. Any opinions on “data” need also to take account of the increasingly lowered barrier to entry for building this robust data infrastructure represented by the cloud. ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#equality",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#equality"
  },"33": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Community",
    "content": ". | Facebook has a vision of building a global community, one to replace the waning local communities we find ourselves in | any community needs to bridge the chasm between offline and online – there is a fundamental unreality to online communities | . MM Note: This book was written in 2018 when the Cambridge Analytica scandal, the one where Facebook was selling data via CA to the highest bidder and how it went to a disinformation campaign that, in part, propelled Donald Trump to the presidency, and it’s impressive to see how Facebook’s reputation has hemorrhaged even since then. I do like the idea of extended communities not bound by geographic boundaries. It reminds me of Vonnegut’s idea of extended families, or giving everyone a larger family to supplement their own. ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#community",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#community"
  },"34": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Civilization",
    "content": ". | clash of civilizations thesis - the world is made up diverse civilizations with irreconcilable differences, and the history of the world is played out in the conflicts between these civilizations. This theory is false or misleading because . | the conflicting civilizations often are generalized, e.g., Islamic states against a generic ‘western’ civ | biology and history are conflated, implying that human nations are the same as species and natural selection reigns, which is not true | . | human tribes, unlike species which never ‘merge’, tend to coalesce over time to larger and larger groups | the Olympic project is a good example of the enduring power of shared beliefs and identities – political strife has hardly undermined the project | all humans tend to share the same civilization for science, medicine, manufacturing, etc; the practical stuff | despite declaring a war on western imperialism, Islamic states never burn American dollars | corporations are bad vehicles for change | identity is defined more by conflicts than agreements | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#civilization",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#civilization"
  },"35": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Nationalism",
    "content": ". | nation states are not some eternal part of human psychology or inevitable | nationalism as two parts: 1) preferring people like us over foreigners 2) sometimes preferring strangers over friends and family (for the good of the nation) | democracy can’t really function without nationalism – how would we believe the results of elections, or that our actions were for a greater good (altruism)? | . three global existential crises might require a global identity: . | the nuclear challenge - how do we live in a world where nations can destroy everything with weapons of mass destruction? | the ecological challenge - how can we live in a world where we are doing irreparable harm to the environment, and the effects are often felt by other, unsuspecting parties? | the technological challenge - how can we live in a world where the access to technology might mean vastly different biological outcomes and potentially biological castes? | . | the only real solution is to globalize politics, perhaps using the European Union (which is teetering on failure) as a model | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#nationalism",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#nationalism"
  },"36": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Religion",
    "content": "in the modern era, we have three types of problems . | technical problems - e.g., how to deal with droughts | policy problems - e.g., what measures to curb global warming | identity problems - e.g., should I even care about farmers across the globe | . | religion isn’t equipped for the first two, so left with identity problems | religious books are no longer source of truth but now used ex post facto to justify opinions | human identities play a large role as historical forces – human power depends on mass cooperation, and mass cooperation depends on shared identities | though many religions espouse universal values and cosmic ideals, they are often used as the handmaiden of nationalism | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#religion",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#religion"
  },"37": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Immigration",
    "content": ". | how do we confront, assimilate, or expel strangers? | . immigration broken into 3 terms: term 1: the host country allows immigrant in term 2: in return, immigrant embraces some of host values and ideals term 3: if immigrant assimilate enough, they can be considered a member of host country . there are really four debates around immigration that get conflated debate 1: do countries need to allow immigrants in as a duty or as a favor? debate 2: how far does assimilation need to go? debate 3: exactly how much time needs to pass before an immigrant can become a full member? debate 4: is the deal actually working? . recently, prejudice has moved away from a biological basis to a cultural one: “it’s part of their culture”, which tends to have three problems: . | local superiority is confused with objective superiority - of course within a particular culture certain cultural affects are more or less suited, but this doesn’t mean it is objectively better or worse | culturist claims skew too general - Islam is an intolerant religion; intolerant of everything? | used to prejudge individuals | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#immigration",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#immigration"
  },"38": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Terrorism",
    "content": ". | terrorism works by spreading fear rather than material damage and is the refuge of weak parties | tries to change the political balance of power through violence without an army | terrorism kills far few than most things, but maintains power because the prime goal of a modern nation is to keep the public sphere free from violence | this is amplified nowadays because the public sphere is so limited on violence | how do we deal with terrorism? 1) govt should focus on clandestine actions against terrorist networks 2) media should keep things in perspective 3) don’t allow our imaginations to be held captive by the specter of terrorism | if terrorism goes nuclear, that changes the calculus, but we shouldn’t react prematurely to that | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#terrorism",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#terrorism"
  },"39": {
    "doc": "21 Lessons for the 21st Century",
    "title": "War",
    "content": ". | in early agricultural societies, human violence made up 15% of deaths. In the 20th century, 5%. In the 21st, 1% | large scale, exceptionally violent wars of aggression against world powers might be a thing of the past | example: Putin’s annexation of Crimea – widely derided, and hopefully Putin understands not to take it further | human stupidity is one of the most important forces in history that we tend to discount | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#war",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#war"
  },"40": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Humility",
    "content": ". | most people believe that they are the center of the world and their culture is the most important, but this is frequently untrue | metaphor of Freud’s mother as argument for how important Judaism is – Freud’s mother gave birth to Freud but no one talks about her, just like Judaism gave birth to Christianity and Islam | from an ethical perspective, monotheism was a terrible idea – promoted narrow-mindedness and rigidity | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#humility",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#humility"
  },"41": {
    "doc": "21 Lessons for the 21st Century",
    "title": "God",
    "content": ". | many different cultures have conceived of god, and the missing link between cosmic mystery and worldly lawgiver is often some holy book, but these books are always written by humans | people argue we must believe in a god that gives laws to humans | the idea we need a supernatural being implies there is something unnatural about morality, that it needs to be learned or divinely inspired | morality is present in all societies, so maybe there is something natural | morality can be seen as reducing suffering | we then could ask why humans would care about misery of others unless predicated on some otherworldly reward, but humans are social animals and happiness depends on relations with others | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#god",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#god"
  },"42": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Secularism",
    "content": ". | a response to religiosity | secularists are fine with multiple, hybrid identities | highest values are truth, compassion, equality, freedom, courage, and responsibility | most important value is truth based on observation and evidence | second most is compassion prompted by deep appreciation of suffering | motivated by compassion rather than obedience (to a god) | equality of opinions | scientific truth is important to know how to reduce suffering | courage to admit ignorance and explore unknown | secular people cherish freedom in order to explore, investigate, experiment | also value responsibility since there is no higher being at the helm | problem with secularism is it might set the ethical bar impossibly high, meaning that sometimes secularism mutates into dogmatic creed (e.g., communism) | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#secularism",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#secularism"
  },"43": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Ignorance",
    "content": ". | liberal thought developed immense trust in the rational individual | this rational individual might be chauvinistic western fantasy glorifying the autonomy and power of upper-class white men | individuality is a myth – we think in groups | knowledge illusion - we think we know a lot, but individually we know litle – we treat knowledge of others as our own knowledge | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#ignorance",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#ignorance"
  },"44": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Justice",
    "content": ". | most of us are no longer capable of understanding the major moral problems of the world four responses to world complexity . | downsize the issue | make a touching human story stand for the whole conflict | weave conspiracy theories | create a dogma and put trust in some all-knowing theory, institution or chief | . | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#justice",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#justice"
  },"45": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Post-Truth",
    "content": ". | Homo Sapiens is a post-truth species whose power resides in creating and believing fictions | religion is fake news | “Instead of accepting fake news as the norm, we should recognize it as a far more difficult problem than we tend to assume and we should strive even harder to distinguish reality from fiction.” (250) | we should invest time and effort in uncovering biases and verifying sources of info | if you want reliable info, pay good money for it | if an issue is important to you, read the relevant scientific literature | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#post-truth",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#post-truth"
  },"46": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Science Fiction",
    "content": ". | science fiction tends to confuse intelligence with consciousness | Harrari has an interesting take on Pixar’s Inside Out, which is that it is a more sinister tale of humans deluding themselves into thinking there is a self beyond the underlying biochemical signals frenziedly flying through our bodies | he also talks about the Matrix, and how everything is in our heads anyway and so everything is the Matrix – you escape the Matrix into another Matrix (which I think is how the trilogy actually ended) | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#science-fiction",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#science-fiction"
  },"47": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Education",
    "content": ". | people need the ability to make sense of info, tell difference between what is important and not, and combine bits of information into a broad picture of the world | education needs to be about ability to deal with change, learn new things, &amp; preserve mental balance in unfamiliar situations | you will need ability to constantly learn and reinvent yourself, even at the young age of 50 | “we are living in the era of hacking humans” | . MM Notes: - Another reference to ‘hacking’ humans. I still haven’t been able to express verbally why this, and references to algorithms irks me. Something about the way it suggests humans are a terminal and you just need to learn a handful of console commands. The idea that our fridge, by processing thousands or hundreds of thousands of datapoints from our biochemical signature, can respond to our mood to create the perfect meal is not as far-fetched as it feels divorced from the possible. Maybe I’m just too narrow-minded, but it feels like we are at least 70 years and some large shifts in what people pay money for away from this being a reality. We have had 10 years with AI and machine learning on our modern machines, and while it feels like we have made strides, most of these ‘algorithms’ are so narrowly purposed that it seems disingenuous to lump them all into this mighty ‘algorithms’ group as if they were conspiring to take us over. It’s just humans. ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#education",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#education"
  },"48": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Meaning",
    "content": ". | Homo Sapiens is a storytelling animal that thinks in stories rather than numbers or graphs and believes the universe works like a story (275) | to give meaning to life, a story must 1) give me some role to play &amp; 2) extend beyond my horizons | most stories are held together by the weight of their roof rather than the strength of their foundations – founded on a semi-ridiculous claim, but so much is staked on that that it’d be impossible to undermine | rituals are politically and spiritually important for meaning | there is a liberal epiphany that all stories are fake, and it is I that imbue all things with meaning, pushing towards solipsism | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#meaning",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#meaning"
  },"49": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Meditation",
    "content": ". | if we can discover what holds life together, the answer to the big question of death will also become apparent | difference between the brain and the mind – the brain is a material network of neurons, synapses, and biochemicals, and the mind is a flow of subjective experiences | . ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#meditation",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#meditation"
  },"50": {
    "doc": "21 Lessons for the 21st Century",
    "title": "Reflections on the Book",
    "content": "I would say there are two large themes to all of Harrari’s work: everything is a fiction and humans are apex because of our ability to cooperate widely because of those fictions, and the only thing that is real is suffering and our response to it. This work expounds on those in interesting ways, but where I think Harrari is less powerful is when talking about technology and masquerading as a futurologist. He is a far better historian than speculator. I struggle to put my finger on exactly what about his prognostications feels ‘off’, but I think what makes him so powerful in other realms (synthesizing complicated theories and historical trends into easily digestible tidbits of info) means he tends to over-simplify or mythologize the technological. He talks about algorithms like they are a pathogen, an airborne miasma accumulating mass until they reach some level of critical mass and take over the world. He talks about data as if it’s part of that same floating cloud of gas, as if there aren’t very real and very physical constraints on how data needs to be saved and stewarded. I don’t think you can be a futurologist without being a technologist, and I don’t think Harrari is a technologist. That said, the book is carried by Harrari’s pop-nihilism, everything is a fiction, nothing is real schtick. I don’t mean that derisively – Harrari is clearly a powerful thinker and his voice is a compelling take on the world as we live it, one I thoroughly am aligned with. In Harrari I found a vocabulary for my nihilism, for my rule breaking and norm shaking. None of the apparatus that envelops us, society, religion, philosophy, capitalism, is real, and we have all just agreed to treat it as real for the sake of getting by. It’s a compelling realization, and one that I found enabling. If all this is made up anyway, we don’t need to do the things we don’t want to do, or we could move outside of limiting boundaries if needed. I don’t think this is Harrari’s strongest work, but it does give a lovely framework to think through issues, and his ultimate advice, to meditate, might be a worthy pursuit in 2022. ",
    "url": "/notes/educational_books/21-lessons-for-the-21st-century#reflections-on-the-book",
    
    "relUrl": "/notes/educational_books/21-lessons-for-the-21st-century#reflections-on-the-book"
  },"51": {
    "doc": "A Desolation Called Peace",
    "title": "A Desolation Called Peace",
    "content": "Took me a while to get going on this on – picks up where the previous one left off, which apparently was after the Emperor of Teixcalaan performed a ritual suicide on live TV and aliens representing an existential threat were unveiled. I still have a hard time remembering who is who – everyone from Teixcalaan has a number noun type of name, like Three Seagrass or Nineteen Adze or Sixteen Moonrise, unless they are from Lsel, like the ambassador to Teixcalaan, Mahit Dzmare. This novel isn’t really sure what it is – at once a palace intrigue novel, space opera, culture clash novel. It never really rises above the sum of it’s parts for me, in part because nothing really seems to happen in it’s nearly 500 pages. A few plots swirling: Mahit Dzmare has come home to Lsel after leaving Teixcalaan, only to find herself embroiled in some petty political intrigue with a few of the 6 Ministers in charge of the station. Nine Hibiscus, newly designated yaotlek, or fleet captain, is battling the existentially dreadful aliens on the fringes of the empire’s boundaries, and is dealing with near political maneuverings of those in her command. Three Seagrass, undersecretary of some office or another, is sent to the front lines with Nine Hibiscus to make first contact with the aliens. And finally, Eight Antidote, the 11 year old previous emperor’s clone and heir to the current throne behind Nineteen Adze, does stuff in the capital. It feels like the book is on the cusp of saying interesting things about self, identity, language, and culture, but it never really says anything interesting about those topics, instead just allaying them via plot points and allowing the reader to make their own conclusions. The plot moves steadily along, and reviewers have called this second novel “more cerebral”, but I found it all just middling. All the plot points have been done elsewhere – first contact with a hivemind, this new fascination with a sort of proto-Aztec future society, space colonialism, etc. The book isn’t bad per se – I cruised through it, it just didn’t blow me away. I keep coming back to a review I once read that talked about what science fiction felt safe to take as a topic. Is it a matter of how much of the human drama is the plot? How much of the technology factors? Is it just, anything in space with aliens is science fiction, the scale inevitably humongous? Always an existential threat to humanity, but some of my favorite science fiction narrows scope, deals with the intimately human. Need to think more on this. ",
    "url": "/notes/other_books/a-desolation-called-peace",
    
    "relUrl": "/notes/other_books/a-desolation-called-peace"
  },"52": {
    "doc": "A Gentleman in Moscow",
    "title": "A Gentleman in Moscow",
    "content": " ",
    "url": "/notes/other_books/a-gentleman-in-moscow",
    
    "relUrl": "/notes/other_books/a-gentleman-in-moscow"
  },"53": {
    "doc": "A Gentleman in Moscow",
    "title": "Themes",
    "content": "observation as an historical act . There are multiple layers of observation here – us observing Rostov, who is in turn observing history but also more narrowly life at the Metropol. There is also some highly knowledgeable narrator who peeks through in Addendums and footnotes to tell us certain things outside of the flow of the narrative. This novel functions on a few levels – Rostov is imprisoned, observing history as it passes by him. this “spontaneous” arrangement would tell the studious observer all he needed to know about the governance of Russia for the next twenty years. humanity . Rostov is a Former Person, but as a gentleman, he is not disposed to occupations (as he tells us at the outset of the novel in his criminal deposition). So who is Rostov? A gourmand? A well-read pedant? A cipher for Russian history through the Bolshevik revolution to Stalin’s death and Krushchev’s rise? . There is a particularly poignant scene where all the wine bottles at one of the restaurants at the Metropol have their labels ripped off in the communistic spirit of equality. As with many chapters throughout the novel, these bits of the real world are reflections of the inner life of the characters, and this one in particular reflects the Count’s fading into anonymity (the name of the chapter itself). By the end of the novel, Rostov has found himself a family, a life, and meaning. narrative constraints . There are three constraints used in this novel: the plot, where Rostov is confined entirely to a single hotel, the time sequences, where one day passes, then two, then four, then a week, then two weeks, all the way up to sixteen years, then it folds back in on itself, and finally, the chapter headings, which all start with the letter A. These all reflect an authorial game Towles is playing, his version of Zut where the constraint focuses the effort. In interviews, Towles has talked about the sonnet as a focusing device, and in this work, he clearly is playing with that sort of motif. ",
    "url": "/notes/other_books/a-gentleman-in-moscow#themes",
    
    "relUrl": "/notes/other_books/a-gentleman-in-moscow#themes"
  },"54": {
    "doc": "A Gentleman in Moscow",
    "title": "Quotes",
    "content": "For if serenity should be a hallmark of maturity, then impetuousness a hallmark of youth. (387) . life does not proceed by leaps and bounds. It unfolds. At any given moment, it is the manifestation of a thousand transitions. Our faculties wax and wane, our experiences accumulate, and our opinions evolve—if not glacially, then at least gradually. Such that the events of an average day are as likely to transform who we are as a pinch of pepper is to transform a stew. (402) . “I’ll tell you what is convenient,” he said after a moment. “To sleep until noon and have someone bring you your breakfast on a tray. To cancel an appointment at the very last minute. To keep a carriage waiting at the door of one party, so that on a moment’s notice it can whisk you away to another. To sidestep marriage in your youth and put off having children altogether. These are the greatest of conveniences, Anushka—and at one time, I had them all. But in the end, it has been the inconveniences that have mattered to me most.” . Whichever wine was within, it was decidedly not identical to its neighbors. On the contrary, the contents of the bottle in his hand was the product of a history as unique and complex as that of a nation, or a man. In its color, aroma, and taste, it would certainly express the idiosyncratic geology and prevailing climate of its home terrain. But in addition, it would express all the natural phenomena of its vintage. In a sip, it would evoke the timing of that winter’s thaw, the extent of that summer’s rain, the prevailing winds, and the frequency of clouds. Yes, a bottle of wine was the ultimate distillation of time and place; a poetic expression of individuality itself. Yet here it was, cast back into the sea of anonymity, that realm of averages and unknowns. “It is the business of the times to change, Mr. Halecki. And it is the business of gentlemen to change with them.” . For what matters in life is not whether we receive a round of applause; what matters is whether we have the courage to venture forth despite the uncertainty of acclaim. (388) . ",
    "url": "/notes/other_books/a-gentleman-in-moscow#quotes",
    
    "relUrl": "/notes/other_books/a-gentleman-in-moscow#quotes"
  },"55": {
    "doc": "A Master of Djinn",
    "title": "A Master of Djinn",
    "content": " ",
    "url": "/notes/other_books/a-master-of-djinn",
    
    "relUrl": "/notes/other_books/a-master-of-djinn"
  },"56": {
    "doc": "A Master of Djinn",
    "title": "Summary",
    "content": "Taking place in a turn of the 19th century Egypt that hasn’t been colonized by Egypt, the world is now populated not just by humans but by supernatural entities, including the titular djinn. The man who joined our world to the supernatural, Al-Jahiz, disappeared 30 years ago, leaving these entities to co-exist in his wake. Fatma, an agent at the Ministry of Alchemy, Enchantments, and Supernatural Entities, has been tasked with tracking down someone claiming to be Al-Jahiz resurrected after the murder of 29 members of an elite and conspiratorial social club who were bent on bringing Al-Jahiz back from the dead. What follows is a cinematic procession of twists and turns as the murders evolve into a plot for world domination. ",
    "url": "/notes/other_books/a-master-of-djinn#summary",
    
    "relUrl": "/notes/other_books/a-master-of-djinn#summary"
  },"57": {
    "doc": "A Master of Djinn",
    "title": "Thoughts",
    "content": "A compelling world, but with a plot that feels like Men in Black put into a blender and replacing aliens with supernatural entities. Feels a bit like a screenplay, and the plot moves like a movie. ",
    "url": "/notes/other_books/a-master-of-djinn#thoughts",
    
    "relUrl": "/notes/other_books/a-master-of-djinn#thoughts"
  },"58": {
    "doc": "A Thousand Brains",
    "title": "A Thousand Brains",
    "content": ". | brain is composed of a new part called the neocortex and comprising 70% of of size, and an old part made of distinct regions | neocortex learns a model of the world | old brain generates emotions and more primitive behaviors | old brain takes control, causing us to act in ways we know we shouldn’t, making us also susceptible to false beliefs that can be viral | . ",
    "url": "/notes/educational_books/a-thousand-brains",
    
    "relUrl": "/notes/educational_books/a-thousand-brains"
  },"59": {
    "doc": "A Thousand Brains",
    "title": "cortical columns",
    "content": ". | first proposed by Vernon Mountcastle’s ideas in The Mindful Brain in 1982 | . “Put shortly, there is nothing intrinsically motor about the motor cortex, nor sensory about the sensory cortex. Thus the elucidation of the mode of operation of the local modular circuit anywhere in the neocortex will be of great generalizing significance.” . | Mountcastle proposed that throughout the neocortex, columns and minicolumns implemented a fundamental algorithm that is responsible for every aspect of perception and intelligence | all manifestations of intelligence are manifestations of the same cortical algo | the neocortex learns a model of the world and makes predictions based on its model | . ",
    "url": "/notes/educational_books/a-thousand-brains#cortical-columns",
    
    "relUrl": "/notes/educational_books/a-thousand-brains#cortical-columns"
  },"60": {
    "doc": "A Thousand Brains",
    "title": "two tenets of neuroscience",
    "content": ". | thoughts, ideas, and perceptions are the activity of neurons | everything we know is stored in the connection between neurons (synapses) | . ",
    "url": "/notes/educational_books/a-thousand-brains#two-tenets-of-neuroscience",
    
    "relUrl": "/notes/educational_books/a-thousand-brains#two-tenets-of-neuroscience"
  },"61": {
    "doc": "A Thousand Brains",
    "title": "existing view of neocortex",
    "content": ". | neocortex is hierarchical, like a flowchart | sensory input is processed in a series of steps, each step extracts more and more complex features from input | continues until some region detects the complete object | problem: treats things like vision like a static process, as if goal is to take a single picture | . ",
    "url": "/notes/educational_books/a-thousand-brains#existing-view-of-neocortex",
    
    "relUrl": "/notes/educational_books/a-thousand-brains#existing-view-of-neocortex"
  },"62": {
    "doc": "A Thousand Brains",
    "title": "new view of neocortex",
    "content": ". | all regions are capable of recognizing complex objects | neocortex has many models of object, in different columns – not identical but complementary | prevailing model is achieved by a form of voting amongst cortical columns, which is a solution to the binding problem (which sensory input defines the object) | . 3 key discoveries . | neocortex learns a predictive model of the world and is always testing those predictions | predictions occur within neurons | the key to cortical columns are reference frames, by associating sensory input with locations in reference frames | . 4 parts of hypothesis of all knowledge using reference frames and thinking is a form of movement . | reference frames are present everywhere in neocortex | reference frames are used to model everything we know, not just phyiscal objects | all knowledge is stored at locations relative to reference frames | thinking is a form of movement | . ",
    "url": "/notes/educational_books/a-thousand-brains#new-view-of-neocortex",
    
    "relUrl": "/notes/educational_books/a-thousand-brains#new-view-of-neocortex"
  },"63": {
    "doc": "A Thousand Brains",
    "title": "Thoughts",
    "content": "The first part of this book details the Thousand Brain hypothesis, the second part goes through current state and future state of artificial intelligence, and the last part is a futurists plea for the salvation of humanity from existential threats and the tyranny of the old brain. Old and new brain seems to map to some of the other psychology stuff I’ve read (id, ego-superego, or system 1 and system 2 thinking maybe). Also, haven’t really been able to wrap my head around thinking being a form of movement – what are the implications? Tried to pick up object and hold it perfectly still with eyes closed. If I didn’t know what the object was, would I be able to recognize without moving anything? What is movement? Seems to be bound in the types of cells we see in the brain, the grid-cells, and so perception requires a stream of info rather than a photograph in an instance. Also, the AI chapters are interesting – is it really true that the only intelligence that could achieve articial general intelligence (AGI) would be something that mirrors the way human intelligence works? Might there be other ways to achieve “intelligence”? Hawkins never explicitly defines intelligence, just sketches around it. The idea loosely might be that intelligence is the ability to learn models about the world and make predictions around those models, and how intelligent you are is the speed and accuracy of those skills. His chapters about uploading the brain are also fascinating thought experiments, although Hawkins is not a philosopher. I think the concept he is missing from uploading a brain is the continuity of self – the analogue to Theseus’s ship where if you replace all the parts of Theseus’s ship, and take those parts and build a new ship, is it still Theseus’s ship? All of this as an attempt for extending lives – some feasibility maybe to cybernetic existence, or extending our biology, which we have historically already done – hip replacements, heart surgeries, vitamins, etc. I think the book gets less strong in part 3 – while I agree that viral false beliefs might be an existential threat, Hawkins seems to make knowledge a first-class citizen, as if, if the human race were extinguished, it is our knowledge that is important. If we built a fleet of AI robots and they continued our existence, I don’t think humans would figure that as a win. Genes vs knowledge is also an interesting chapter – the goal of genes, and largely evolution (escaping Darwin’s orbit) is replication, and all that matters is how well a gene replicates. Knowledge is different – it is fundamental, a potential meritocracy. While knowledge can be memetic (viral) and shared through culture, the march of knowledge is towards truth. We will only make it so far as a species controlled by our old brains and the inexorable drive for our genes to replicate. One other aside, I really liked the idea of both a wiki earth (a long-lived satellite orbiting the sun that we send our collective data to) or the idea of orbiting satellites around a star to send messages. Feels like an idea I saw in Cixin Liu’s work? . ",
    "url": "/notes/educational_books/a-thousand-brains#thoughts",
    
    "relUrl": "/notes/educational_books/a-thousand-brains#thoughts"
  },"64": {
    "doc": "A Thousand Brains",
    "title": "Brief Takeaway",
    "content": "As Richard Dawkins says in the foreword, this book “will turn your mind into a whirling maelstrom of excitingly provocative ideas”. I don’t know much about the brain and how intelligence works, but after having read this book (and Hawkin’s first book, On Intelligence in the past), I want to learn more. I’m still trying to wrap my head around the idea that thinking is movement, although, regardless of it’s veracity, I love the idea that the brain has thousands of models for every object vying for election to “true” (our perception is just a model!). Worth the read. ",
    "url": "/notes/educational_books/a-thousand-brains#brief-takeaway",
    
    "relUrl": "/notes/educational_books/a-thousand-brains#brief-takeaway"
  },"65": {
    "doc": "Algorithms - Part 1",
    "title": "Algorithms - Part 1",
    "content": ". | Princeton’s Algorithms, Part 1 course from Coursera | GitHub Repository for class exercises | . | Dynamic Connectivity . | Union Find | Quick Find | Quick Union | Quick Union Improvements | Union Find Applications | . | Analysis of Algorithms . | 3-Sum | Mathematical Model | Common Order of Growth Classifications | Binary Search | questions | . | Bags, Stacks &amp; Queues . | Stacks | Queues | Bags | Implementations of Stacks | Questions | . | . Steps to develop a usable algorithm (scientific method) . | model the problem | find an algorithm to solve it | fast enough? fits in memory? | if not, figure out why | find a way to address the problem | iterate until satisfied | . ",
    "url": "/notes/classes/algorithms-part1",
    
    "relUrl": "/notes/classes/algorithms-part1"
  },"66": {
    "doc": "Algorithms - Part 1",
    "title": "Dynamic Connectivity",
    "content": "Union Find . Given a set of N objects . | union command: connect two objects | find/connected query: is there a path connecting the two objects | . Larger example: is there a path connecting p and q in a larger path-finding exercise . Some applications of this algorithm: . | pixels in a digital photo | computers in a network | friends in a social network | transistors in a computer chip | elements in a math set | variable names in a Fortran program | metallic sites in a composite system | . Modeling the connection: We assume “is connected to” is an equivalence relation . | reflexic: p is connected to q | symmetric: if p is connect to q then q is connected to p | transitive: if p is connect to q and q is connected to r, then p is connect to r | . Connected Components: Maximal set of ojbects that are mutually connected . To implement: find query: check if two objects are in same component union command: replace components containing two objects with their union . Union-find data type (API) Goal: design efficient data structure for union-find . | number of objects N can be huge | number of operations can be huge | find queries and union commands may be intermixed | . | 1 2 3 4 5 6 7 . | public class UF { UF(int N) {}; void union(int p, int q) {}; boolean connected(int p, int q) {}; int find(int p) {}; int count() {}; } . | . Quick Find . eager approach (compute before call) . each index in array stores reference to its group, so union(1, 2) is rendered like [0, 2, 2], and connected(1, 2) is 2 == 2. | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 . | public class QuickFindUF { private int[] id; public QuickFindUF(int N) { id = new int[N]; for (int i = 0; i &lt; N; i++) { id[i] = i; } } public boolean connected(int p, int q) { return id[p] == id[q]; } public void union(int p, int q) { int pid = id[p]; int qid = id[q]; for (int i = 0; i &lt; id.length; i++) { if (id[i] == pid) { id[i] = qid; } } } } . | . quick find is too slow – union is n2 n2 (quadratic) operations are too slow. As computers get larger, these quadratic algorithms don’t scale with new computers. Rough standard (for now) . | 109 operations per second | 109 words of main memory | Touch all words in approximately 1 second | . Huge problem for quick-find 109 union commands on 109 objects Quick-find takes more than 1018 operations 30+ years of computer time! . Quadratic algorithms don’t scale with technology . | New computer may be 10x as fast | But, has 10x as much memory ⇒want to solve a problem that is 10x as big | With quadratic algorithm, takes 10x as long! | . Quick Union . lazy approach (compute as needed) integer array, but instead of storing a reference to its tree node . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 . | public class QuickUnionUF { private int[] id; public QuickUnionUF(int N) { // same constructor as QuickFind id = new int[N]; for (int i = 0; i &lt; N; i++) { id[i] = i; } } private int root(int i) { while (i != id[i]) { i = id[i]; } return i; } public boolean connected(int p, int q) { return root(p) == root(q); } public void union(int p, int q) { int i = root(p); int j = root(q); id[i] = j; } } . | . cost model: initialize, union, find all linear defect: trees can get tall, and find is too expensive . Quick Union Improvements . weighted quick union . | modify quick union to avoid tall trees | keep track of size of each tree (number of objects) | balance by linking root of smaller tree to root of larger tree | . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 . | // initialize a sz array public void union(int p, int q) { int i = root(p); int j = root(q); if (i == j) { return; } if (sz[i] &lt; sz[j]) { id[i] = j; sz[j] += sz[i]; } else { id[j] = i; sz[i] += sz[j]; } } . | . running time for weighted quick union is at most lg N (log base 2) . weighted quick union with path compression . after computer the root of p, set the id of each examined node to the root . We might use a two pass variant, which is to add a second loop to root() to set id[] to node, or we can do single pass like this: . | 1 2 3 4 5 6 7 . | private int root(int i) { while (i != id[i]) { id[i] = id[id[i]]; i = id[i]; } return i; } . | . this halves path length, but in practice it works just as well . in theory, weight quick union with path compression is not quite linear, but in practice it is. In fact no linear-time algorithm exists for quick union. | algorithm | worst-case time | . | quick find | n | . | quick union | n | . | weighted quick union | log(n) | . | quick union with path compression | log(n) | . | weighted quick union with path compression | log * n | . Union Find Applications . Percolation . | n X n grid of sites | each site is open with probability p or blocked with probability p - 1 | system percolates iff (if and only if) top and bottom are connected by open sites | . percolates . | x | x |   |   | x | . |   | x |   | x |   | . |   | x |   |   |   | . |   |   | x |   | x | . doesn’t percolate . | x | x |   |   | x | . |   | x |   | x |   | . |   | x |   |   |   | . |   |   | x | x | x | . many models for physical systems: . | model | system | open | closed | percolates | . | electricity | material | conductor | insulated | conducts | . | fluid flow | material | empty | blocked | porous | . | social interaction | population | person | empty | communicates | . likelihood of percolation depends on probability, and we cannot figure this out mathematically, but we can computationally (by running millions of simulations) . monte carlo simulations (relies on repeated random siumlation to get numerical results) can be used to add random open sites (increasing p) until top connects to bottom. One way to check is to check all top against all bottom, but this is n2. A more performant way would be to create a simulated ‘top’ spot and a simulated bottom, and check only those two (top could be 0, bottom is n * n + 1) . percolation threshold ends up being 0.592746 for large lattices. ",
    "url": "/notes/classes/algorithms-part1#dynamic-connectivity",
    
    "relUrl": "/notes/classes/algorithms-part1#dynamic-connectivity"
  },"67": {
    "doc": "Algorithms - Part 1",
    "title": "Analysis of Algorithms",
    "content": "more information . Why do we analyze algorithms? . | predict performance | compare algorithms | provide guarantees | understand theoretical basis | primary practical purpose - avoidance of performance bugs | . Some algorithmic successes . Discrete Fournier transforms . | break down waveform of N samples into periodic components | brute force is n2 | FFT algorithm is N log N | works for DVD, JPEG, MRI, astrophysics | . n-body simulation . | simulate gravitational interactions among N bodies | brute force is n2 | Barnes-Hut algorithm N log N | . Scientific Method . | Observe some feature of the natural world | Hypothesize a model that is consistent with the observations | Predict events using the hypothesis | Verify the predictions by making further observations | Validate by repeating until the hypothesis and observations agree | . Principles: . | Experiments must be reproducible | Hypotheses must be falsifiable | . 3-Sum . Given N distinct integers, how many triples sum to exactly zero? . brute force method: . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 . | public class ThreeSum { public static int count(int[] a) { int N = a.length; int count = 0; for (int i = 0; i &lt; N; i++) { for (int j = i + 1; j &lt; N; j++) { for (int k = j + 1; k &lt; N; k++) { if (a[i] + a[j] + a[k] == 0) { count++; } } } } return count; } public static void main(String[] args) { int[] a = In.readInts(args[0]); StdOut.println(count(a)); } } . | . How to time a program? . | manually | automatically - StopWatch() in Java standard library | . You can plot on a log-log plot, then run a regression (fit a straight line through data points) . Mathematical Model . total running time is sum of cost X frequency for all operations . we can test cost of operations, which varies by computer, but more interesting to the study of algorithms is frequency of operations. Simplifications cost model Turing recommended only counting the number of multiplications and recordings (the operations that are most expensive) . tilde notation ignore lower order terms . | when N is large, terms are negligible | when N is small, we don’t care | . Common Order of Growth Classifications . | order of growth | name | typical code framework | description | example | T(2N) / T(N) | . | 1 | constant | a = b + c | statement | add two numbers | 1 | . | logN | logarithmic | while (N &gt; 1) { N = N / 2; … } | divide in half | binary search | ~1 | . | N | linear | for (int i = 0; i &lt; N; i++) { … } | loop | find the maximum | 2 | . | N log N | linearithmic | mergesort | divide and conquer | mergesort | ~2 | . | N2 | quadratic | for (int i = 0; i &lt; N; i++) for (int j = 0; j &lt; N; j++)  { … } | double loop | check all pairs | 4 | . | N3 | cubic | for (int i = 0; i &lt; N; i++) for (int j = 0; j &lt; N; j++)  for (int k = 0; k &lt; N; k++)   { … } | triple loop | check all triples | 8 | . | 2&lt;supN&lt;/sup&gt; | exponential | combinatorial search | exhaustive search | check all subsets | T(N) | . For practical implications, we need linear or linearithmic algorithms to keep pace with Moore’s Law. We can look at binary search for an example. Binary Search . Given a sorted aray and a key, find the index of the key in the array. Interesting tidbit, but there was a bug discovered in Java’s implementation of binary search in 2006. recursive implementation: . | 1 2 3 4 5 6 7 8 9 10 . | int binarySearch(int arr[], int l, int r, int x) { if (r &gt;= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] &gt; x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; } . | . We can also use binary search to speed up the 3 sum problem to n2 log n speed, as so: . | 1 2 3 4 5 6 7 8 9 10 11 12 13 . | public static int count(int[] a) { int n = a.length; Arrays.sort(a); if (containsDuplicates(a)) throw new IllegalArgumentException(\"array contains duplicate integers\"); int count = 0; for (int i = 0; i &lt; n; i++) { for (int j = i+1; j &lt; n; j++) { int k = Arrays.binarySearch(a, -(a[i] + a[j])); if (k &gt; j) count++; } } return count; } . | . types of analyses . | best case lower bound on cost | worst case upper bound on cost | average case expected cost for random input | . how to choose input model? . | design for worst case | OR randomize input | . goals: establish difficulty of problem and develop optimal algorithms approach: suppress details in analysis and eliminate variability in input model by focusing on worst case . algorithm models . | Tilde – provide approximate model | Big Theta – classify algorithms | Big Oh– develop upper bounds | Big Omega – develop lower bounds | . memory usage . primitives . | type | bytes | . | boolean | 1 | . | byte | 1 | . | char | 2 | . | int | 4 | . | float | 4 | . | long | 8 | . | double | 8 | . one-dimensional arrays . | type | bytes | . | char[] | 2N + 24 | . | int[] | 4N + 24 | . | double[] | 8N + 24 | . two-dimensional arrays . | type | bytes | . | char[][] | ~2 M N | . | int[][] | ~4 M N | . | double[][] | ~8 M N | . objects take up 16 bytes, references 8 bytes, and each object has padding so it is a multiple of 8 bytes. e.g., a Date object uses 32 bytes (4 x 3 for int, 16 object, rounded up to 32) e.g., a String uses 2N + 64 (16 for object, 8 for reference to array, 2N + 24 for char array, 12 for offset, count, and hash, and 4 for padding) . questions . | 3-SUM in quadratic time Design an algorithm for the 3-SUM problem that takes time proportional to n2 2 in the worst case. You may assume that you can sort the nn integers in time proportional to n2 or better. | Search in a bitonic array. An array is bitonic if it is comprised of an increasing sequence of integers followed immediately by a decreasing sequence of integers. Write a program that, given a bitonic array of nn distinct integer values, determines whether a given integer is in the array. | . | Standard version: Use ~ 3 lg n compares in the worst case. | Signing bonus: Use ~ 2 lg n_compares in the worst case (and prove that no algorithm can guarantee to perform fewer than ~ 2 lg _n compares in the worst case). | . | Egg drop. Suppose that you have an nn-story building (with floors 1 through n) and plenty of eggs. An egg breaks if it is dropped from floor T or higher and does not break otherwise. Your goal is to devise a strategy to determine the value of T given the following limitations on the number of eggs and tosses: | . | Version 0: 1 egg, $ T \\le T $ tosses. | Version 1: $ \\sim 1 \\lg n $ eggs and $ \\sim 1 \\lg $ tosses. | Version 2: $ \\sim \\lg T $ eggs and $$\\sim 2 \\lg T $ tosses. | Version 3: 22 eggs and $ \\sim 2 \\sqrt n $ tosses. | Version 4: 22 eggs and $ \\le c \\sqrt T $ tosses for some fixed constant c. | . ",
    "url": "/notes/classes/algorithms-part1#analysis-of-algorithms",
    
    "relUrl": "/notes/classes/algorithms-part1#analysis-of-algorithms"
  },"68": {
    "doc": "Algorithms - Part 1",
    "title": "Bags, Stacks &amp; Queues",
    "content": "fundamental data types, operations of insert, remove, iterate. Stack - last in, first out (push, pop) Queue - first in, first out (enqueue, dequeue) . Stacks . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 . | public class LinkedStack&lt;Item&gt; { private Node first = null; private class Node { Item item; Node next; } public boolean isEmpty() { return first == null; } public void push(Item item) { Node oldfirst = first; first = new Node(); first.item = item; first.next = oldfirst; } public Item pop() { Item item = first.item; first = first.next; return item; } } . | . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 . | pulbic class FixedCapacityStackOfStrings { private String[] s; private int N = 0; public FixedCapacityStackOfStrings(int capacity) { s = new String[capacity]; } public boolean isEmpty() { return N == 0; } public void push(String item) { s[N++] = item; } // prevents loitering public String pop() { String item = s[--N]; s[N] = null; return item; } } . | . how do you prevent array capacity overflow? . repeated doubling – when array hits capacity, create a new one of twice the length. You can add a custom resize() function when the original stack is full. If array is 1/4 full, you can shrink to half the size. For stacks, should we use linked list or resizing array? . linked list: every operation takes constant time in the worst case but uses extra time and space to deal with the links . resizing array: every operation takes constant amortized time and less wasted space . Queues . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 . | public class LinkedQueueOfStrings { private Node first, last; private class Node { String item; Node next; } public boolean isEmpty() { return first == null; } public void enqueue(String item) { Node oldlast = last; last = new Node(); last.item = item; last.next = null; if (isEmpty()) first = last; else oldlast.next = last; } public String dequeue() { String item = first.item; first = first.next; if isEmpty() last = null; return item; } } . | . Bags . Like queue and stack, but no pop() or dequeue() methods, as order doesn’t matter. Implementations of Stacks . Questions . | Question 1 Queue with two stacks. Implement a queue with two stacks so that each queue operations takes a constant amortized number of stack operations. | Question 2 Stack with max. Create a data structure that efficiently supports the stack operations (push and pop) and also a return-the-maximum operation. Assume the elements are real numbers so that you can compare them. | Question 3 Java generics. Explain why Java prohibits generic array creation. | . ",
    "url": "/notes/classes/algorithms-part1#bags-stacks--queues",
    
    "relUrl": "/notes/classes/algorithms-part1#bags-stacks--queues"
  },"69": {
    "doc": "American Pastoral",
    "title": "American Pastoral",
    "content": " ",
    "url": "/notes/other_books/american-pastoral",
    
    "relUrl": "/notes/other_books/american-pastoral"
  },"70": {
    "doc": "American Pastoral",
    "title": "Why I read this book",
    "content": ". I’ve started and stopped American Pastoral a few times. Philip Roth is one of those Important American Authors™, and the first book of his American Trilogy is lauded as one of those Important American Books™, and I’ve read The Plot Against America and Portnoy’s Complaint and enjoyed both of them thoroughly, so why not. ",
    "url": "/notes/other_books/american-pastoral#why-i-read-this-book",
    
    "relUrl": "/notes/other_books/american-pastoral#why-i-read-this-book"
  },"71": {
    "doc": "American Pastoral",
    "title": "One key takeaway",
    "content": ". N/A for fiction books. ",
    "url": "/notes/other_books/american-pastoral#one-key-takeaway",
    
    "relUrl": "/notes/other_books/american-pastoral#one-key-takeaway"
  },"72": {
    "doc": "American Pastoral",
    "title": "Summary",
    "content": ". American Pastoral is a Philip Roth novel published in 1997 concerning Seymour “Swede” Levov, a successful Jewish American businessman and former high school star athlete from Newark, New Jersey. Levov’s happy and conventional upper middle class life is ruined by the domestic social and political turmoil of the 1960s during the presidency of Lyndon B. Johnson, which in the novel is described as a manifestation of the “indigenous American berserk”. The framing device in American Pastoral is a 45th high school reunion attended by frequent Roth alter ego Nathan Zuckerman, who is the narrator. At the reunion, in 1995, Zuckerman meets former classmate Jerry Levov who describes to him the tragic derailment of the life of his recently deceased older brother, Seymour “Swede” Levov. After Seymour’s teenage daughter Merry, in 1968, set off a bomb in protest against American involvement in the Vietnam War, killing a bystander, and subsequently went into hiding, Seymour remained traumatized for the rest of his life. The rest of the novel consists of Zuckerman’s posthumous recreation of Seymour’s life, based on Jerry’s revelation, a few newspaper clippings, and Zuckerman’s own impressions after two brief run-ins with “the Swede”. In these encounters, which take place early in the novel, Zuckerman learns that Seymour has remarried and has three young sons, but Seymour’s daughter Merry is never mentioned. In Zuckerman’s reimagining of Seymour’s life, this second marriage has no part; it ends in 1973 with Watergate unraveling on TV while the previous lives of the protagonists completely disintegrate. ",
    "url": "/notes/other_books/american-pastoral#summary",
    
    "relUrl": "/notes/other_books/american-pastoral#summary"
  },"73": {
    "doc": "American Pastoral",
    "title": "How was the book",
    "content": ". A meditation on “bullshit-nostalgia” and myth-making, a deep inquiry into the surface and the depth of American heroes both as humans and as metonymies for America. The book employs a framing structure, with frequent Roth alter-ego Nathan Zuckerman attending his 45th high school reunion after reconnecting with his childhood idol, Seymour “The Swede” Levov. Zuckerman “dream[s] a realistic chronicle” of “the Swedes” inner life, inhabiting him like a glove, the metaphor serving double duty as both a physical covering and as the central proving ground for masculinity in the family Levov’s world in the glove factory. The glove factory, like everything in the Swede’s imagined life, is held onto dearly beyond the point of sensibility. The Swede weathers the 1967 Newark riots, endures the mass exodus of the glove industry to the Philippines, continuing in spite of his father’s protestations to take the glove empire overseas. Everything in the Levov family tragedy is clung to, as if foolishly embracing what you love will stop it from leaving you. But who is grasping at what was lost? The Swede, or Nathan Zuckerman cum the Swede? This Triple Self Portrait narrative structure in fact forms the dramatic thrust of the novel. The artifice is the art, the medium is the message. This isn’t just a family novel of disintegration, there is the loss of masculinity of Nathan Zuckerman, rendered incontinent by prostate cancer, and of the historically fashioned American man, brought down equal by the tides of equality, and of a generation, silent in name but booming in presence. It is no longer just a novel about the dissolution of the American pastoral “into everything its antithesis and its enemy, into the fury, the violence, and the desperation of the counterpastoral– into the indigenous American berserk”, but the betrayal of a generation’s promise to their children that things really were as simple and defined as they were when they were growing up, the Swede and Nathan Zuckerman and their entire generation modern refugees to the rising tides of postmodernism. The 60s launched a broadside to American patriarchy, and so it is doubly effective that not only Seymour’s daughter but his wife have embraced a more operative form of the nihilism of the time; his daughter cum domestic terrorist finding solace with the Weather Underground, his wife running to the arms of the “Wasp blandness” of “Mr. America”, William Orthcutt III. The collapse of Nathan “Skip” Zuckerman and Seymour “The Swede” Levov a fall from Arcady and Eden, a compelling statement that we are all surface to everyone else, that “being unknowable is the goal” and all there is to be done is to cherish what has been lost. ",
    "url": "/notes/other_books/american-pastoral#how-was-the-book",
    
    "relUrl": "/notes/other_books/american-pastoral#how-was-the-book"
  },"74": {
    "doc": "American Pastoral",
    "title": "Favorite quotes",
    "content": ". And then the loss of the daughter, the fourth American generation, a daughter on the run who was to have been the perfected image of himself as he had been the perfected image of his father, and his father the perfected image of his father’s father … the angry, rebarbative spitting-out daughter with no interest whatever in being the next successful Levov, flushing him out of hiding as if he were a fugitive–initiating the Swede into the displacement of another America entirely, the daughter and the decade blasting to smithereens his particular form of Utopian thinking, the plague America infiltrating the Swede’s castle and there infecting everyone. The daughter who transports him out of the longed-for and into everything that is its antithesis and its enemy, into the fury, the violence, and the desperation of the counterpastoral– into the indigenous American berserk. (86) . Life is just a short period of time in which you are alive (248) . Was everyone’s brain as unreliable as his? Was he the only one unable to see what people were up to? Did everyone slip around the way he did, in and out, in and out, a hundred different times a day go from being smart to being smart enough, to being as dumb as the next guy, to being the dumbest bastard who ever lived? Was it stupidity deforming him, the simpleton son of a simpleton father, or was life just one big deception that everyone was on to except him? (356) . After I’d already written about his brother–which is what I would do in the months to come: think about the Swede for six, eight, sometimes ten hours at a stretch, exchange my solitude for his, inhabit this person least like myself, disappear into him, day and night try to take the measure of a person of apparent blankness and innocence and simplicity, chart his collapse, make of him, as time wore on, the most important figure of my life […] (74) . ",
    "url": "/notes/other_books/american-pastoral#favorite-quotes",
    
    "relUrl": "/notes/other_books/american-pastoral#favorite-quotes"
  },"75": {
    "doc": "American Pastoral",
    "title": "Any other reading",
    "content": ". | I Married a Communist (Book 2 of American Trilogy), by Philip Roth, 1998. | The Human Stain (Book 3 of American Trilogy), by Philip Roth, 2000. | . ",
    "url": "/notes/other_books/american-pastoral#any-other-reading",
    
    "relUrl": "/notes/other_books/american-pastoral#any-other-reading"
  },"76": {
    "doc": "The Anatomy of an Amazon 6-pager",
    "title": "The Anatomy of an Amazon 6-pager",
    "content": "Article Link . ",
    "url": "/notes/articles/anatomy-of-an-amazon-6-pager",
    
    "relUrl": "/notes/articles/anatomy-of-an-amazon-6-pager"
  },"77": {
    "doc": "AWS for Solution Architects",
    "title": "AWS for Solution Architects",
    "content": ". | 1: Understanding AWS Cloud Principles and Key Characteristics | 2: Leveraging the Cloud for Digital Transformation . | Regions, Availability Zones, and Local Zones | Implementing a Digital Transformation Program | . | 3: Storage in AWS . | Amazon Elastic Block Storage (EBS) | Amazon Elastic File System (EFS) | Simple Storage Service (S3) | . | 4: Cloud Computing | 5: Selecting the Right Database Service | 6: Amazon Athena | 7: AWS Glue . | AWS Glue Best Practices - Apache Spark UI | . | 8: Best Practices for Security, Identity, and Compliance | 9: Severless and Container Patterns | 10: Microservice and Event-Driven Architectures | . ",
    "url": "/notes/tech_books/aws-for-solution-architects",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects"
  },"78": {
    "doc": "AWS for Solution Architects",
    "title": "1: Understanding AWS Cloud Principles and Key Characteristics",
    "content": "The cloud is just a bunch of servers and other computing resources managed by a third-party provider in a data center somewhere . ",
    "url": "/notes/tech_books/aws-for-solution-architects#1-understanding-aws-cloud-principles-and-key-characteristics",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#1-understanding-aws-cloud-principles-and-key-characteristics"
  },"79": {
    "doc": "AWS for Solution Architects",
    "title": "Cloud Elasticity",
    "content": "One important characteristic of the leading cloud providers is the ability to quickly and frictionlessly provision resources. In a cloud environment, instead of needing potentially months to provision your servers, they can be provisioned in minutes. Another powerful characteristic of a cloud computing environment is the ability to quickly shut down resources and, importantly, not be charged for that resource while it is down. elasticity is the ability of a computing environment to adapt to changes in workload by automatically provisioning or shutting down computing resources to match the capacity needed by the current workload. ",
    "url": "/notes/tech_books/aws-for-solution-architects#cloud-elasticity",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#cloud-elasticity"
  },"80": {
    "doc": "AWS for Solution Architects",
    "title": "Cloud Virtualization",
    "content": "Virtualization is the process of running multiple virtual instances on top of a physical computer system using an abstract layer sitting on top of actual hardware. A hypervisor is a computing layer that enables multiple operating systems to execute in the same physical compute resource. These operating systems running on top of these hypervisors are Virtual Machines (VMs). ",
    "url": "/notes/tech_books/aws-for-solution-architects#cloud-virtualization",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#cloud-virtualization"
  },"81": {
    "doc": "AWS for Solution Architects",
    "title": "Definition of the Cloud",
    "content": "The cloud computing model is one that offers computing services such as compute, storage, databases, networking, software, machine learning, and analytics over the internet and on demand. You generally only pay for the time and services you use. ",
    "url": "/notes/tech_books/aws-for-solution-architects#definition-of-the-cloud",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#definition-of-the-cloud"
  },"82": {
    "doc": "AWS for Solution Architects",
    "title": "The Five Pillars of a Well-Architected Framework",
    "content": "Pillar 1: Security . | Always enable traceability. | Apply security at all levels. | Implement the principle of least privilege. | Secure the system at all levels: application, data, operating system, and hardware. | Automate security best practices | . Pillar 2: Reliability . | Continuously test backup and recovery processes. | Design systems so that they can automatically recover from a single component failure. | Leverage horizontal scalability whenever possible to enhance overall system availability. | Use automation to provision and shutdown resources depending on traffic and usage to minimize resource bottlenecks. | Manage change with automation. | . Pillar 3: Performance Efficiency . | Democratize advanced technologies. | Take advantage of AWS’s global infrastructure to deploy your application globally with minimal cost and to provide low latency. | Leverage serverless architectures wherever possible. | Deploy multiple configurations to see which one delivers better performance. | . Pillar 4: Cost Optimization . | Use a consumption model. | Leverage economies of scale whenever possible. | Reduce expenses by limiting the use of company-owned data centers. | Constantly analyze and account for infrastructure expenses | . Pillar 5: Operational Excellence . Measured across three dimensions: . | Agility | Reliability | Performance | . | Provision infrastructure through code (for example, via CloudFormation). | Align operations and applications with business requirements and objectives. | Change your systems by making incremental and regular changes. | Constantly test both normal and abnormal scenarios. | Record lessons learned from operational events and failures. | Write down and keep standard operations procedures manual up to date. | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#the-five-pillars-of-a-well-architected-framework",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#the-five-pillars-of-a-well-architected-framework"
  },"83": {
    "doc": "AWS for Solution Architects",
    "title": "2: Leveraging the Cloud for Digital Transformation",
    "content": " ",
    "url": "/notes/tech_books/aws-for-solution-architects#2-leveraging-the-cloud-for-digital-transformation",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#2-leveraging-the-cloud-for-digital-transformation"
  },"84": {
    "doc": "AWS for Solution Architects",
    "title": "Regions, Availability Zones, and Local Zones",
    "content": "AWS breaks their infrastructure down into parts: . | AWS Regions exist in separate geographic areas, and are made up of several isolated and independent data centers | Availability Zones (AZ) are the data centers within a region | Local Zones are mini AZs that provide core services that are latency sensitive | . Regions . Regions are separate from each other and this promotes availability, fault tolerance, and stability. Sometimes a service might not be generally available (GA) and is only in one region. Some services are available globally and aren’t region specific Simple Storage Service (S3), Identity Management Service (IAM), and other services have inter-Region fault tolerance – e.g., RDS with read replicas . AWS has a dedicated region just for the government called AWS GovCloud. Availability Zones . The same as a data center. Have multiple power sources, redundant connectivity, and redundant resources. AZs within Regions are interconnected, which gives you fully redundant, high bandwith, low latency, scalable, encrypted, and dedicated connections. Some services allow you to choose AZ while some are automatically assigned. Local Zones . Allow low latency for select services. Like a subset of an AZ, but doesn’t have all the services available in an AZ. Use Case: Applications which require single-digit millisecond latencies to your end-users, latency-sensitive applications . Direct Connect . A low-level infrastructure service that enables AWS customers to set up a dedicated network connection between their on-premise facilities and AWS that allows bypassing public internet. Does not provide encryption in transit, so a separate service (e.g., AWS Site-to-Site VPN) can be paired to encrypt data in transit. Uses IEEE 802.1Q (I triple E eight oh two dot 1 Q) to create VLANs. Can reduce costs when workloads require high bandwith by: . | transfers data from on-prem to cloud, directly reducing ISP commitments | costs to transfer data are billed using AWS Direct Connect transfer rate rather than internet data transfer rates, which is typically lower | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#regions-availability-zones-and-local-zones",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#regions-availability-zones-and-local-zones"
  },"85": {
    "doc": "AWS for Solution Architects",
    "title": "Implementing a Digital Transformation Program",
    "content": "Moving legacy on-prem to cloud Some questions to ask: . | should we do bare minimum, or is it an opportunity to refactor, enhance, and optimize workloads? | should the transformation be purely technological, or should we transform business processes too? | . Rehost . lift and shift least amount of work, services are simply migrated as is, and any problems with existing applications will come along during the migration. Use case: If you are confident your processes and workflows are solid and don’t need to change. Refactor . Not only migrating services, but changing their underlying architecture. Use case: You are comfortable with current application but want to take advantage of certain cloud advantages and functionality, such as database failover. Revise . Modify, optimize, and enhance existing applications and code base before migrating, then you can rehost or refactor. Good for maintaining business continuity and creating business enhancements, but sub-optimal sometimes because of cost of changing and testing code upfront. Use case: If you know your applications are sub-optimal and need to be revised anyway. Rebuild . Completely rewrite and rearchitect the existing applications, which will be considerable work and considerable cost, and might contribute to vendor lock-in. Use case: If the most radical change is needed. Replace . Get rid of applications but replace with SaaS alternatives, which may or may not be more expensive than rebuilding depending on talent pool. Learning curve and development life cycle is shortened, but software will require additional licenses. Use case: If there is a commercially available software as a service available and your talent pool is short. Migration Assessment Tools . | AWS Migration Hub: central repository to keep track of a migration project | AWS Application Discovery Service: automates the discovery and inventory tracking of different infrastructure resources, such as servers, and any dependencies among them | AWS Migration Pattern Library: collection of migration templates and design patterns that can assist in the comparison of migration options and alternatives | CloudEndure Migration: simplifies cloud migration by automating many of the steps necessary to migrate to the cloud | AWS Data Migration Service: facilitate the migration of data from your on-premises databases to the cloud, e.g., into Amazon RDS | . Digital transformation involves using the cloud and other advanced technology to create new or change existing business flows. It often involves changing the company culture to adapt to this new way of doing business. The end goal of digital transformation is to enhance the customer experience and to meet ever-changing business and market demand. Digital Transformation Tips . | ask the right questions . | how can we be doing what we do, faster and better? | how can we change what we do to better serve our customers | can we eliminate certain lines of business, departments, and processes | what are the desired business outcomes when interfacing with customers | . | get leadership buy-in . | need buy-in from C-Suite | can still do Proof of Concept work to prove value | . | clearly delineate goals and objectives . | what are you trying to achieve with migration and ruthlessly pursue that | . | apply agile methodology to digital transformation . | small, iterative improvement to realize value earlier, as opposed to waterfall | look for singles, not home runs | pick low-hanging fruit and migrate those workloads first, which will build momentum for other, harder tasks later | . | encourage risk-taking . | fail, but fail fast and try different things | it is better to disrupt yourself than someone else do it | . | clear delineation of roles and responsibilities . | make sure all team members are aligned on their responsibilities | . | . Digital Transformation Pitfalls . | lack of commitment from the C-Suite . | might fail to provide vision and path to success or resources | . | not having the right team in place . | inexperience with cloud migration, you don’t know what you don’t know | . | internal resistance from the ranks . | people whose roles may be diminished would resist | . | going too fast . | moving too much at once without doing any proof of concept work | . | going too slow . | spending forever planning or migrating small things might make interest wane | . | outdated rules and regulations . | some industries are difficult to disrupt because older regulations exist, e.g., real estate requiring wet signatures | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#implementing-a-digital-transformation-program",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#implementing-a-digital-transformation-program"
  },"86": {
    "doc": "AWS for Solution Architects",
    "title": "3: Storage in AWS",
    "content": " ",
    "url": "/notes/tech_books/aws-for-solution-architects#3-storage-in-aws",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#3-storage-in-aws"
  },"87": {
    "doc": "AWS for Solution Architects",
    "title": "Amazon Elastic Block Storage (EBS)",
    "content": "hard drive for a server, and can easily detach from one server and attach to another, and useful for persistent data, in comparison to the ephemeral data of an EC2 instance. replicated by design, so no need to set up a RAID or another redundancy strategy. Snapshots are iterative and stored on S3. They can be compressed, mirrored, transferred across AWS AZs (by Amazon Data Lifecycle Manager). Stored as Amazon Machine Images (AMI) so they can be used to launch an EC2 instance. using Elastic File Storage (EFS), you can attach the block storage device to multiple EC2 instances . Amazon provides 99.999% availability . | General-purpose Solid State Devices (SSDs) . | solid balance of cost and performance | useful for virtual desktops, development and staging environments, application developmenet | . | Provisioned IOPS SSD . | provisioned inputs and outputs per second ideal for mission critical apps | business applications, production databases | . | Throughput Optimized HDD . | good value and reasonable cost for workloads that need high performance and high throughput | big data, log processing, streaming applications, data warehouse applications | . | Cold HDD . | optimize cost with large volumes of data | data the is infrequently accessed | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#amazon-elastic-block-storage-ebs",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#amazon-elastic-block-storage-ebs"
  },"88": {
    "doc": "AWS for Solution Architects",
    "title": "Amazon Elastic File System (EFS)",
    "content": "Implements a fully managed Network File System (NFS), and several EC2 instances can be mounted to an EFS volume at the same time. Often used for: . | hosting content management systems | hosting CRM applications that need to be hosted within an AWS data center but need to be managed by customer | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#amazon-elastic-file-system-efs",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#amazon-elastic-file-system-efs"
  },"89": {
    "doc": "AWS for Solution Architects",
    "title": "Simple Storage Service (S3)",
    "content": "Object storage, and AWS’s second oldest product, right after EC2. Time To First Byte (TTFB) used to measure performance of a service. Comparison of Storage . Enhancing S3 performance . You should be cognizant of where users are going to access content and design around that. One way is to scale horizontally – S3 allows as many connections to an S3 bucket as possible. CloudFront . A Content Delivery Network (CDN) that caches S3 content to be served across disperse geographic regions with thousands of Points of Presence (PoP). ElastiCache . Managed AWS service that allows you to store objects in memory rather than disk. When retrieving objects, need to check the cache first then S3. Elemental MediaStore . Supports transfer of video files. S3 Transfer Acceleration . Can achieve single-digit millisecond using CloudFront edge locations to accelerate data transfer over long distances. Useful for transferring data over AWS Regions. S3 best practices . ",
    "url": "/notes/tech_books/aws-for-solution-architects#simple-storage-service-s3",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#simple-storage-service-s3"
  },"90": {
    "doc": "AWS for Solution Architects",
    "title": "4: Cloud Computing",
    "content": " ",
    "url": "/notes/tech_books/aws-for-solution-architects#4-cloud-computing",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#4-cloud-computing"
  },"91": {
    "doc": "AWS for Solution Architects",
    "title": "first computer",
    "content": ". | first large-scale electronic general-purpose computer the Electronic Numerical Integrator and Computer (ENIAC) | built between 1943 and 1945 | design proposed by physicist John Mauchly | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#first-computer",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#first-computer"
  },"92": {
    "doc": "AWS for Solution Architects",
    "title": "paradigm shift",
    "content": ". | introduced 1962 by Thomas Kuhn in The Structure of Scientific Revolutions | scientists accept predominant paradigm, but constantly challenge questioning it | eventually new paradigm replaces the old paradigm | e.g. heliocentric replaced geocentric view of solar system | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#paradigm-shift",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#paradigm-shift"
  },"93": {
    "doc": "AWS for Solution Architects",
    "title": "infrastructure as a service",
    "content": ". | advantages: . | most flexibility | provisioning of computer, storage, and network resources can be done quickly | resources can be used for minutes, hours, or days | highly scalable and fault-tolerant | more thorough control of the infrastructure | . | disadvantages: . | security must be managed at all levels, and this is costly and difficult | legacy systems might not be able to be migrated to the cloud | training costs might be high to onboard new staff to the system | . | examples: . | Elastic Cloud Compute (EC2) | Elastic Block Storage (EBS) | . | use cases: . | backups and snapshots | disaster recovery | web hosting | software dev environments | data analytics | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#infrastructure-as-a-service",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#infrastructure-as-a-service"
  },"94": {
    "doc": "AWS for Solution Architects",
    "title": "platform as a service",
    "content": ". | advantages: . | cost-effective and can use CI/CD principles | high availability | scalability | straightforward customization and config of app | reduction in dev effort and maintenance | security policies simplification and automation | . | disadvantages: . | difficult to integrate on-prem and AWS systems | regulations around data security might require securing data (not on third-party environment) | vendor lock-in (increasing scale from IaaS to PaaS to SaaS) | might be runtime issues because of lack of support for certain application needs | legacy systems might be difficult to integrate with AWS | can’t customize some layers if needed | . | examples: . | Elastic Beanstalk | RDS | Lambda | Elastic Kubernetes Service (EKS) | . | use cases: . | business process management, like time clocks or company portal | business analytics/BI for internal data analytics | internet of things | communications applications | databases | API dev | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#platform-as-a-service",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#platform-as-a-service"
  },"95": {
    "doc": "AWS for Solution Architects",
    "title": "master data management",
    "content": ". | used to define and manage company’s critical data, to provide single source of truth | manages data throughout its lifecycle | clean up data inconsistencies, duplicates, deliver to consumers | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#master-data-management",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#master-data-management"
  },"96": {
    "doc": "AWS for Solution Architects",
    "title": "software as a service",
    "content": ". | advantages: . | reduce time, money, and effort on repetitive tasks | shift responsibility for installing, patching, configuring, and upgrading software | allow focus on tasks that require personal attention, such as customer service | . | disadvantages: . | interoperability with other services might not be straightforward | vendor lock-in | customization is very narrow | limited features | . | examples: . | WorkMail | WorkSpaces | QuickSight | Chime | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#software-as-a-service",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#software-as-a-service"
  },"97": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 - general purpose",
    "content": ". | provides balance of compute, memory, and network resources | can be used for variety of diverse worfklows | ideal for apps that use compute, memory, and network resources in equal proportion, such as web servers and code repositories | T (burstable), A (ARM chip), M (x86 dev) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2---general-purpose",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2---general-purpose"
  },"98": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 - compute optimized",
    "content": ". | ideal for compute bound applications that benefit from high performance processors | good for batch processing, media transcoding, high performance web servers, high performance computing (HPC), scientific modeling, dedicated gaming servers | C | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2---compute-optimized",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2---compute-optimized"
  },"99": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 - accelerated computing",
    "content": ". | uses hardware accelerators or co-processors to perform functions | floating point calculations, graphics processing, or data pattern matching | F (Field Programmable Gate Array - FPGA), G (GPU), P (&gt;$ GPU) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2---accelerated-computing",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2---accelerated-computing"
  },"100": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 - memory optimized",
    "content": ". | fast performance for workloads that process large data sets in memory | R (memory-intensive), X (high ratio of memory to compute) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2---memory-optimized",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2---memory-optimized"
  },"101": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 - storage optimized",
    "content": ". | high sequential read/write access on data sets in local storage | deliver tens of thousands of low-latency, random IOPS | H (16 TB HDD), D (48 TB HDD), I (16 GB SSD) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2---storage-optimized",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2---storage-optimized"
  },"102": {
    "doc": "AWS for Solution Architects",
    "title": "amazon machine images (ami)",
    "content": ". | different types of amazon images to build EC2 instances off of | includes most Linux distros, Windows Server, 32/64 bit | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#amazon-machine-images-ami",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#amazon-machine-images-ami"
  },"103": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 best practices - security",
    "content": ". | important to take advantage of identity federation, policies, and IAM | principle of least privilege | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---security",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---security"
  },"104": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 best practices - storage",
    "content": ". | when you shut down EC2 instance, you lose any instance storage | use EBS mounted storage if you need to persist beyond an instance | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---storage",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---storage"
  },"105": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 best practices - resource management",
    "content": ". | use instance metadata and tags to ensure resources can be tracked | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---resource-management",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---resource-management"
  },"106": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 best practices - resource limit",
    "content": ". | default limits: . | limit of 20 instances per region | 5 elastic IPs per region (including unassigned addresses) | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---resource-limit",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---resource-limit"
  },"107": {
    "doc": "AWS for Solution Architects",
    "title": "ec2 best practices - backup, snapshots, and recovery",
    "content": ". | important to have periodic backup schedule for EBS volumes | deploy across multiple AZs for availability and durability | make sure architecture can handle failovers | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---backup-snapshots-and-recovery",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ec2-best-practices---backup-snapshots-and-recovery"
  },"108": {
    "doc": "AWS for Solution Architects",
    "title": "5: Selecting the Right Database Service",
    "content": " ",
    "url": "/notes/tech_books/aws-for-solution-architects#5-selecting-the-right-database-service",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#5-selecting-the-right-database-service"
  },"109": {
    "doc": "AWS for Solution Architects",
    "title": "history of databases",
    "content": ". | first database created by Edgar Codd in 1970 | SQL created by IBM researchers Raymond Boyce and Donald Chamberlin in 1970s | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#history-of-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#history-of-databases"
  },"110": {
    "doc": "AWS for Solution Architects",
    "title": "types of databases",
    "content": ". | relational | document | key-value | graph | wide column storage | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#types-of-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#types-of-databases"
  },"111": {
    "doc": "AWS for Solution Architects",
    "title": "online transaction processing databases",
    "content": ". | useful for workloads that have high writes and low reads | multiple transactions per second | data heavily normalized | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#online-transaction-processing-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#online-transaction-processing-databases"
  },"112": {
    "doc": "AWS for Solution Architects",
    "title": "third normal form (3NF)",
    "content": ". | method of normalizing data past 1st and 2nd normal form, where every column in a table is dependent on the primary key | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#third-normal-form-3nf",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#third-normal-form-3nf"
  },"113": {
    "doc": "AWS for Solution Architects",
    "title": "online analytics processing databases",
    "content": ". | useful for read heavy workflows like large analytics queries | doesn’t process many transactions | data often not normalized, in star or snowflake schema (fact table and dimension tables) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#online-analytics-processing-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#online-analytics-processing-databases"
  },"114": {
    "doc": "AWS for Solution Architects",
    "title": "ACID model",
    "content": ". | model for transactions | (a)tomicity - transactions either commit or they don’t; there is no partial state | (c)onsistency - no transaction violates database invariants (a type of constraint like no account has negative balance) | (i)solation - varying models of isolation, but this is generally more like consistency in that one transaction can’t affect another | (d)urability - after a commit, changes are permanent (committed to disk) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#acid-model",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#acid-model"
  },"115": {
    "doc": "AWS for Solution Architects",
    "title": "BASE model",
    "content": ". | “opposite” of ACID, although meant as a joke – more applicable to distributed systems or systems where performance hit of adhering to ACID principles is too high | (b)asically (a)vailable - data available the majority of the time | (s)oft state - database doesn’t have to be write consistent and replicas don’t need to be mutually consistent | (e)ventually consistent - data stored is eventually consistent, either via replication or only on retrieval | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#base-model",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#base-model"
  },"116": {
    "doc": "AWS for Solution Architects",
    "title": "relational databases",
    "content": ". | data stored in rows and columns all within tables, and tables are related via foreign keys | Relational Database Service (RDS) is primary AWS service: . | open access - Postgres, MySQL, MariaDB | Aurora - AWS’s wrapper for Postgres and MySQL, which gives performance increases and replication out of the box | commercial - Oracle, SQL Server | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#relational-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#relational-databases"
  },"117": {
    "doc": "AWS for Solution Architects",
    "title": "document databases",
    "content": ". | records stored as XML, JSON, or BSON | good for content management systems, analytics, blogging apps, or e-commerce applications | Apache CouchDB, Amazon DocumentDB, MongoDB, Elasticsearch | DynamoDB is fully managed NoSQL database which can achieve single-digit millisecond performance | if faster performance (like microsecond latency) is needed, can use DynamoDB Accelerator (DAX) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#document-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#document-databases"
  },"118": {
    "doc": "AWS for Solution Architects",
    "title": "key-value databases",
    "content": ". | simply a key and a value stored as a BLOB (binary large objects) | memcached and redis | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#key-value-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#key-value-databases"
  },"119": {
    "doc": "AWS for Solution Architects",
    "title": "wide-column store databases",
    "content": ". | column family databases | NoSQL database that can store petabyte-scale amounts of data | Amazon Managed Apache Cassandra Service (MCS) or Amazon Keyspaces (a different variant of Cassandra) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#wide-column-store-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#wide-column-store-databases"
  },"120": {
    "doc": "AWS for Solution Architects",
    "title": "elasticsearch",
    "content": ". | search engine built off Lucene library | full-text search with HTTP web interface and schema-free JSON documents | AWS has fully managed AWS Elasticsearch offering | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#elasticsearch",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#elasticsearch"
  },"121": {
    "doc": "AWS for Solution Architects",
    "title": "kendra",
    "content": ". | enterprise search service fully managed by Amazon that uses machine learning to power it | the content can be unstructured (HTML, MS Word, PDF), semi-structured (Excel, DynamoDB), or structured (Redshift, RDS) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#kendra",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#kendra"
  },"122": {
    "doc": "AWS for Solution Architects",
    "title": "in memory databases",
    "content": ". | with increase of available RAM, in memory databases are becoming a viable solution | additionally, SSDs blur line between volatile and nonvolatile memory in terms of speed | ElastiCache is Amazon’s offering of memecached and redis | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#in-memory-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#in-memory-databases"
  },"123": {
    "doc": "AWS for Solution Architects",
    "title": "graph databases",
    "content": ". | stores relationships between objects as edges and nodes | Amazon Neptune offers full support for property graphs and Resource Description Framework (RDF), as well as the languages Gremlin and SPARQL | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#graph-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#graph-databases"
  },"124": {
    "doc": "AWS for Solution Architects",
    "title": "time-series databases",
    "content": ". | database specifically optimized to store time series data | Amazon Timestream is offering | RDBMSs can store this data but they are not optimized to | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#time-series-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#time-series-databases"
  },"125": {
    "doc": "AWS for Solution Architects",
    "title": "ledger databases",
    "content": ". | delivers cryptographically verifiable, immutable, and transparent transaction logs orchestrated by a central authority | Amazon Quantum Ledger | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#ledger-databases",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#ledger-databases"
  },"126": {
    "doc": "AWS for Solution Architects",
    "title": "data warehouses",
    "content": ". | Redshift is Amazon’s data warehouse offering | useful for BI | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#data-warehouses",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#data-warehouses"
  },"127": {
    "doc": "AWS for Solution Architects",
    "title": "6: Amazon Athena",
    "content": " ",
    "url": "/notes/tech_books/aws-for-solution-architects#6-amazon-athena",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#6-amazon-athena"
  },"128": {
    "doc": "AWS for Solution Architects",
    "title": "what is amazon athena",
    "content": ". | a service that treats any file like a database table and allows you to run select statements on it | this allows you to skip the ETL and perform queries in situ on data, speeding up processing speeds and lowering costs | All you need to do is: . | identify the object you want to query in Amazon S3 | define the schema for the object | query the object with standard SQL | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#what-is-amazon-athena",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#what-is-amazon-athena"
  },"129": {
    "doc": "AWS for Solution Architects",
    "title": "athena supported formats - JSON &amp; CSV",
    "content": ". | supports comma-separated value and javascript object notation formats, as well as other delimiters | these files are not compressed and so aren’t optimized to be used with Athena | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#athena-supported-formats---json--csv",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#athena-supported-formats---json--csv"
  },"130": {
    "doc": "AWS for Solution Architects",
    "title": "athena supported formats - ORC",
    "content": ". | Optimized Row Columnar, originally designed under Apache Hive and Hadoop | provides better performance than uncompressed formats for reading, writing, and processing data | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#athena-supported-formats---orc",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#athena-supported-formats---orc"
  },"131": {
    "doc": "AWS for Solution Architects",
    "title": "athena supported formats - Avro",
    "content": ". | designed under Hadoop project | uses JSON to store, but allows backward and forward compatibility by allowing the schema to be declared in file | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#athena-supported-formats---avro",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#athena-supported-formats---avro"
  },"132": {
    "doc": "AWS for Solution Architects",
    "title": "athena supported formats - Parquet",
    "content": ". | stores files in a flat columnar storage format, which is different than row-based approach | columnar storage is more performant than row-based | well-suited for compression and varying data types | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#athena-supported-formats---parquet",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#athena-supported-formats---parquet"
  },"133": {
    "doc": "AWS for Solution Architects",
    "title": "presto",
    "content": ". | athena uses presto under the hood, which is a general purpose SQL query engine | it leverages Apache Hive to create, drop, and alter tables and partitions | you write Hive-compliant Data Definition Language (DDL)s and ANSI SQL | first developed as an internal project at Facebook on top of large Hadoop/HDFS clusters | can also use massively parallel processing (MPP) via a coordinator node and multiple worker nodes | presto can be deployed on any Hadoop implementation, and it is bundled with Amazon EMR | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#presto",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#presto"
  },"134": {
    "doc": "AWS for Solution Architects",
    "title": "athena federated query",
    "content": ". | in order to handle the many different database types, you might need a federated query (so beyond just S3) | Amazon Athena Federated Query allows you to execute a single SQL query across data stores, simplifying code and getting results faster | you can use many connectors supplied by Dremio, or write your own as Lambda functions | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#athena-federated-query",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#athena-federated-query"
  },"135": {
    "doc": "AWS for Solution Architects",
    "title": "athena workgroups",
    "content": ". | allows administrators to give different access to different groups of users | enables separation of audiences, such as users running ad-hoc queries and users running pre-canned reports | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#athena-workgroups",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#athena-workgroups"
  },"136": {
    "doc": "AWS for Solution Architects",
    "title": "optimizing athena - data partitions",
    "content": ". | you can break up data into smaller groups called partitions | care needs to be taken to choose the way that partitions are broken up so load is evenly distributed | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---data-partitions",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---data-partitions"
  },"137": {
    "doc": "AWS for Solution Architects",
    "title": "optimizing athena - data buckets",
    "content": ". | you can use buckets within a single partition to group single or multiple columns | columns used to filter data are good candidates for bucketing | if a column has high cardinality (amount of unique values) it is a good candidate | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---data-buckets",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---data-buckets"
  },"138": {
    "doc": "AWS for Solution Architects",
    "title": "optimizing athena - file compression",
    "content": ". | optimal file sizes for compression are 200 MB - 1 GB | can achieve compression easily by using Parquet or ORC, which are Gzip or Bzip2 compressed | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---file-compression",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---file-compression"
  },"139": {
    "doc": "AWS for Solution Architects",
    "title": "optimizing athena - file size",
    "content": ". | want files to be a good size, so not too big and not too small | file formats that allow splitting are ideal | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---file-size",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---file-size"
  },"140": {
    "doc": "AWS for Solution Architects",
    "title": "optimizing athena - columnar data store generation",
    "content": ". | if you have columnar storage, you can fine-tune the block size | having a larger block/stripe size allows more rows per block | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---columnar-data-store-generation",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---columnar-data-store-generation"
  },"141": {
    "doc": "AWS for Solution Architects",
    "title": "optimizing athena - column selection",
    "content": ". | make sure your queries are only returning the columns needed in a query (don’t use select * from blah) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---column-selection",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---column-selection"
  },"142": {
    "doc": "AWS for Solution Architects",
    "title": "optimizing athena - predicate pushdown",
    "content": ". | pushing the predicate filter down to where the data lives, which allows filtering out data earlier in the process | ORC and Parquet support this | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---predicate-pushdown",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---predicate-pushdown"
  },"143": {
    "doc": "AWS for Solution Architects",
    "title": "optimizing athena - join, order by, and group by",
    "content": ". | limit joins unless needed, and make sure left table is larger than right | order group by cardinality, so lower cardinality first | order by needs to be handled by single worker (that’s the only way to sort) so use LIMIT if possible | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---join-order-by-and-group-by",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#optimizing-athena---join-order-by-and-group-by"
  },"144": {
    "doc": "AWS for Solution Architects",
    "title": "7: AWS Glue",
    "content": " ",
    "url": "/notes/tech_books/aws-for-solution-architects#7-aws-glue",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#7-aws-glue"
  },"145": {
    "doc": "AWS for Solution Architects",
    "title": "aws glue",
    "content": ". | fully managed ETL service | can process tera- and petabyte scale data | uses Apache Spark in a serverless environment under the hood | useful for: . | population of data lakes, warehouses and lake houses | event-driven ETL pipelines | creation and cleansing of datasets for machine learning | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue"
  },"146": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Console",
    "content": ". | used to create, configure, orchestrate, and develop ingestion workflows | used to manage all other Glue objects centrally, such as connections, jobs, crawlers, as well as scheduling and job triggers | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-console",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-console"
  },"147": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Data Catalog",
    "content": ". | persistent centralized metadata repository | operates similarly to Apache Hive metastore | many other consumers can read it, such as EMR, Athena, or Spectrum | only one per AWS region | allows schema version history, data audit, and governance by tracking changes | changed using Data Definition Language (DDL) statements or via AWS Management Console | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-data-catalog",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-data-catalog"
  },"148": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Crawlers",
    "content": ". | used to scan files, extract metadata, and populate the AWS Glue Data Catalog | once scanned, files can be treated like SQL tables | AWS provides crawlers for different source types, including S3, DynamoDB, many RDBMS | any restrictions placed on underlying S3 files will persist to data in the catalog | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-crawlers",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-crawlers"
  },"149": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Classifiers",
    "content": ". | classifiers recognize the format of data and persist this information | provides a certainty score from 0 to 1 | recognizes Avro, ORC, Parquet, JSON, XML, CSV, and others | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-classifiers",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-classifiers"
  },"150": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Code Generators",
    "content": ". | AWS Glue automatically generates python or scala ETL code | can be edited in Glue Studio, or directly | infrastructure as code | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-code-generators",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-code-generators"
  },"151": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Streaming ETL",
    "content": ". | streaming jobs can be created in Glue to process events in real-time | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-streaming-etl",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-streaming-etl"
  },"152": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Best Practices - choosing the right worker",
    "content": ". | workers are known as Data Processing Units (DPU) | choose Standard, G.1X, G.2X depending on workload type (e.g. memory intensive can use G.xX) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices---choosing-the-right-worker",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices---choosing-the-right-worker"
  },"153": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Best Practices - optimized file splitting",
    "content": ". | files can be split in blocks and processed separately and simultaneously to other files | split files can be accessed via S3, deserialized into an AWS Glue DynamicFrame partition, and handled by an Apache Spark task | normally a deserialized partition is not brought into memory so there is no memory pressure, but if partition is brought into memory via cache or spills onto disk an out-of-memory exception can occur | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices---optimized-file-splitting",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices---optimized-file-splitting"
  },"154": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Best Practices- yarn’s memory overhead allocation",
    "content": ". | Apache Yarn is resource manager used by Glue (Yet Another Resource Negotiator) | handles memory allocation and application workloads | allocates 10% of the total executor memory for JVM | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices--yarns-memory-overhead-allocation",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices--yarns-memory-overhead-allocation"
  },"155": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Best Practices - Apache Spark UI",
    "content": ". | using Spark UI to inspect, monitory, and optimize Glue jobs | can view the jobs as Directed Acyclic Graphs (DAG) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices---apache-spark-ui",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices---apache-spark-ui"
  },"156": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Glue Best Practices - processing many small files",
    "content": ". | Apache Spark 2.2 can handle 600,000 files on standard worker | to overcome this, you can process in batches | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices---processing-many-small-files",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-glue-best-practices---processing-many-small-files"
  },"157": {
    "doc": "AWS for Solution Architects",
    "title": "8: Best Practices for Security, Identity, and Compliance",
    "content": " ",
    "url": "/notes/tech_books/aws-for-solution-architects#8-best-practices-for-security-identity-and-compliance",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#8-best-practices-for-security-identity-and-compliance"
  },"158": {
    "doc": "AWS for Solution Architects",
    "title": "Shared Responsibility Model",
    "content": ". | responsibility for keeping apps secure on both AWS and its users | AWS responsible for some aspects, like hardware, infrastructure, compute, users for other aspects like customer data, platform and application management, OS config, etc. | exact distribution varies depending on service (e.g. fully managed services vs. custom on EC2) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#shared-responsibility-model",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#shared-responsibility-model"
  },"159": {
    "doc": "AWS for Solution Architects",
    "title": "Identity Access Management (IAM)",
    "content": ". | secures every single service in AWS | made up of users, which can be aggregated into groups | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#identity-access-management-iam",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#identity-access-management-iam"
  },"160": {
    "doc": "AWS for Solution Architects",
    "title": "IAM - Users",
    "content": ". | individuals who need access to AWS data and resources | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#iam---users",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#iam---users"
  },"161": {
    "doc": "AWS for Solution Architects",
    "title": "IAM - Groups",
    "content": ". | collection of users | can be grouped based on job function, department, persona, etc. | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#iam---groups",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#iam---groups"
  },"162": {
    "doc": "AWS for Solution Architects",
    "title": "IAM - Roles",
    "content": ". | object definition to configure a set of permissions | can be assigned to user or group or service or resource (e.g. an EC2 instance) | best practice to use roles whenever possible instead of granting permissions directly to user or group | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#iam---roles",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#iam---roles"
  },"163": {
    "doc": "AWS for Solution Architects",
    "title": "IAM - Policies",
    "content": ". | a JSON or YAML document with a set of rules for what actions can be performed | these policies can be assigned to users, groups, or roles | policies can be: . | managed - created as standalone policies to be attached to multiple entities | inline - created within the definition of an IAM entity and can only be assigned to that entity (they don’t have an Amazon Resource Name (ARN)) | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#iam---policies",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#iam---policies"
  },"164": {
    "doc": "AWS for Solution Architects",
    "title": "IAM - Permissions",
    "content": ". | lists of actions that can be taken on an AWS resource (think of it as applied policies) | identity-based policies - attached to users, groups, or roles | resource-based policies - attached to AWS resources, e.g., S3 buckets, EC2 instances, etc. | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#iam---permissions",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#iam---permissions"
  },"165": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Organizations",
    "content": ". | used to manage multiple AWS accounts in centralized location | made up of organization, root account, organizational unit, AWS account, and service control policy (SCP) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-organizations",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-organizations"
  },"166": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Control Tower",
    "content": ". | enables setting up company-wide policies and apply them across AWS accounts | without it, each policy would be applied individually to each account | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-control-tower",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-control-tower"
  },"167": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Guard Duty",
    "content": ". | used to detect threats, malicious behavior, and activity from unauthorized actors | leverages machine learning to detect threats | it is NOT an Intrusion Prevention System (IPS), it is just an Intrusion Detection System | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-guard-duty",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-guard-duty"
  },"168": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Shield",
    "content": ". | managed DDoS protection service | Standard provided at no cost, Advanced costs money but provides additional protection | can be used on EC2, ELB, CloudFront, Global Accelerator, Route 53 | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-shield",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-shield"
  },"169": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Web Application Firewall",
    "content": ". | firewall for web applications | control traffic by creating rules | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-web-application-firewall",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-web-application-firewall"
  },"170": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Firewall Manager",
    "content": ". | allows users to set up firewall rules in central dashboard, so new applications adhere to global rules | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-firewall-manager",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-firewall-manager"
  },"171": {
    "doc": "AWS for Solution Architects",
    "title": "Amazon Cloud Directory",
    "content": ". | fully managed service that creates directories (for things like org charts, device registries, etc.) | allows multiple hierarchies instead of the typical 1 allowed by Active Directory Lightweight Directory Services (AD LDS) and Lightweight Directory Application Protocol (LDAP) | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#amazon-cloud-directory",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#amazon-cloud-directory"
  },"172": {
    "doc": "AWS for Solution Architects",
    "title": "Amazon Inspector",
    "content": ". | checks application compliance against predefined policies, generating a comprehensive report of flaws and issues sorted by severity level | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#amazon-inspector",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#amazon-inspector"
  },"173": {
    "doc": "AWS for Solution Architects",
    "title": "Amazon Macie",
    "content": ". | uses AI and ML to find and protect sensitive data in AWS environments | helps with General Data Privacy Regulation (GDPR) and Health Insurance Portability and Accountability Act (HIPAA) compliance | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#amazon-macie",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#amazon-macie"
  },"174": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Artifact Reports",
    "content": ". | simple service to store, manage, and access various compliance reports, e.g., SOC, PCI, NDAs | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-artifact-reports",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-artifact-reports"
  },"175": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Certificate Manager",
    "content": ". | service to create, maintain, deploy public and private Secure Sockets Layer/Transport Layer Security (SSL/TLS) certs | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-certificate-manager",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-certificate-manager"
  },"176": {
    "doc": "AWS for Solution Architects",
    "title": "AWS CloudHSM",
    "content": ". | hardware security module (HSM) that allows users to generate their own encryption keys for encrypting data at rest | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-cloudhsm",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-cloudhsm"
  },"177": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Directory Service",
    "content": ". | fully managed implementation of Microsoft’s AD, using the actual Microsoft AD | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-directory-service",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-directory-service"
  },"178": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Key Management Service (KMS)",
    "content": ". | provides ability to create and manage cryptographic keys to encrypt data at rest | FIPS 140-2 compliant | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-key-management-service-kms",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-key-management-service-kms"
  },"179": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Secrets Manager",
    "content": ". | used to protect secrets, allowing for rotation, management, and retrieval of all sorts of secrets | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-secrets-manager",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-secrets-manager"
  },"180": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Single Sign-On",
    "content": ". | used to manage users access and permissions for multiple AWS accounts | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-single-sign-on",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-single-sign-on"
  },"181": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Security Hub",
    "content": ". | centralized location to see security alerts and security posture | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-security-hub",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-security-hub"
  },"182": {
    "doc": "AWS for Solution Architects",
    "title": "9: Severless and Container Patterns",
    "content": " ",
    "url": "/notes/tech_books/aws-for-solution-architects#9-severless-and-container-patterns",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#9-severless-and-container-patterns"
  },"183": {
    "doc": "AWS for Solution Architects",
    "title": "Advantages of Containers",
    "content": ". | containers are more efficient, allowing a loosely coupled architecture where services do not need to know about the implementation of other services, so you can update one without needing to update another | stateless, so no state is stored within boundaries | leads to less infrastructure waste | simple, as they are isolated, autonomous, and independent platforms without needing OS | increase productivity – easier to onboard new developers | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#advantages-of-containers",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#advantages-of-containers"
  },"184": {
    "doc": "AWS for Solution Architects",
    "title": "Disadvantages of Containers",
    "content": ". | slightly slower compared to bare-metal servers | there are ecosystem incompatibilities, for example, Docker is not fully compatible with Kubernetes (needs dockershim) or RedHat’s OpenShift | no graphical interface | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#disadvantages-of-containers",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#disadvantages-of-containers"
  },"185": {
    "doc": "AWS for Solution Architects",
    "title": "Virtual Machines",
    "content": ". | two types of virtual machines . | system virtual machines (SVMs) - physical machine substitute, leverage hypervisor architecture | hypervisor - can run virtual machines, aka virtual machine monitors | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#virtual-machines",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#virtual-machines"
  },"186": {
    "doc": "AWS for Solution Architects",
    "title": "Docker",
    "content": ". | very prominent container software | freemium model – released to public in 2013 at PyCon | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#docker",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#docker"
  },"187": {
    "doc": "AWS for Solution Architects",
    "title": "Dockerfile",
    "content": ". | text file containing instructions to show how Docker image is built | specify things like ports, OS, env vars, mounts, etc | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#dockerfile",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#dockerfile"
  },"188": {
    "doc": "AWS for Solution Architects",
    "title": "Docker images",
    "content": ". | container built from a Dockerfile | portable across environments and instance types | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#docker-images",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#docker-images"
  },"189": {
    "doc": "AWS for Solution Architects",
    "title": "Docker run",
    "content": ". | utility where commands can be issued to launch containers (image instances) | containers can be stopped, started, restarted | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#docker-run",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#docker-run"
  },"190": {
    "doc": "AWS for Solution Architects",
    "title": "Docker Hub",
    "content": ". | collection of previously created containers where Docker users share containers | can either be a public or private Docker registry | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#docker-hub",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#docker-hub"
  },"191": {
    "doc": "AWS for Solution Architects",
    "title": "Docker Engine",
    "content": ". | core of Docker, which instantiates and runs containers | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#docker-engine",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#docker-engine"
  },"192": {
    "doc": "AWS for Solution Architects",
    "title": "Docker Compose",
    "content": ". | tool which can configure and instantiate multi-container Docker applications using a YAML file | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#docker-compose",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#docker-compose"
  },"193": {
    "doc": "AWS for Solution Architects",
    "title": "Docker Swarm",
    "content": ". | groups virtual or physical machines running Docker Engine into a cluster | process of managing nodes is called orchestration | same use case as Kubernetes | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#docker-swarm",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#docker-swarm"
  },"194": {
    "doc": "AWS for Solution Architects",
    "title": "Kubernetes",
    "content": ". | open source container orchestration platform used to automate the manual work to deploy, manage, and monitor containerized apps | Google open sourced Kubernetes in 2015, donating to Cloud Native Computing Foundation (CNCF) | uses many applications and extensions to enhance orchestration . | Registration services: Atomic Registry, Docker Registry | Security: LDAP, SELinux, RBAC, OAUTH | Networking services: OpenvSwitch and intelligent edge routing | Telemetry: Kibana, Hawkular, and Elastic | Automation: Ansible playbooks | . | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#kubernetes",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#kubernetes"
  },"195": {
    "doc": "AWS for Solution Architects",
    "title": "Kubernetes Advantages",
    "content": ". | faster development and deployment | cost efficiency | cloud-agnostic deployments | management by cloud provider | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#kubernetes-advantages",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#kubernetes-advantages"
  },"196": {
    "doc": "AWS for Solution Architects",
    "title": "Amazon Elastic Container Service for Kubernetes (EKS)",
    "content": ". | managed wrapper around Kubernetes kernel | greatly simplifies restarting and setting up containers, persisting data, etc. | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#amazon-elastic-container-service-for-kubernetes-eks",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#amazon-elastic-container-service-for-kubernetes-eks"
  },"197": {
    "doc": "AWS for Solution Architects",
    "title": "Amazon Elastic Container Service (ECS)",
    "content": ". | quick solution to host containers at scale, so ideal for simpler workloads | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#amazon-elastic-container-service-ecs",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#amazon-elastic-container-service-ecs"
  },"198": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Fargate",
    "content": ". | serverless compute engine for container management which can be used with EKS or ECS | containers as a service, meaning that the provisioning and management of container infrastructure is managed by AWS | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-fargate",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-fargate"
  },"199": {
    "doc": "AWS for Solution Architects",
    "title": "AWS Batch",
    "content": ". | great for long-running compute jobs that do not need low latency turn times | cheaper than other options, but slower | job: unit of work | job definitions: description of jobs to be executed (what parameters, cpu, ram, etc.) | job queues: list of work to be completed by jobs | compute environment: compute resources to run job | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#aws-batch",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#aws-batch"
  },"200": {
    "doc": "AWS for Solution Architects",
    "title": "10: Microservice and Event-Driven Architectures",
    "content": " ",
    "url": "/notes/tech_books/aws-for-solution-architects#10-microservice-and-event-driven-architectures",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#10-microservice-and-event-driven-architectures"
  },"201": {
    "doc": "AWS for Solution Architects",
    "title": "microservice",
    "content": ". | a software application that is structured as loosely coupled, easily deployable, and testable, and is organized in a well-defined business domain | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#microservice",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#microservice"
  },"202": {
    "doc": "AWS for Solution Architects",
    "title": "layered architecture",
    "content": ". | code is implemented in layers as a “separation of concerns” | generally, top most layer communicates with users and other systems, middle layer handles business logic, and bottom layer is data persistence | allows applications where only the top layer is publicly accessible | we can swap out layers for other tech if the layers are loosely coupled | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#layered-architecture",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#layered-architecture"
  },"203": {
    "doc": "AWS for Solution Architects",
    "title": "event-driven architecture",
    "content": ". | creating, messaging, processing, and storing events are the critical functions of a system | an event is any change in the state of the system | not all changes are events – only meaningful changes are events | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#event-driven-architecture",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#event-driven-architecture"
  },"204": {
    "doc": "AWS for Solution Architects",
    "title": "event producer",
    "content": ". | detects change in state, then generates the event and notifies others of the change by writing to a queue | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#event-producer",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#event-producer"
  },"205": {
    "doc": "AWS for Solution Architects",
    "title": "event consumer",
    "content": ". | fetch events from queue (in async way), then performs action based on event | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#event-consumer",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#event-consumer"
  },"206": {
    "doc": "AWS for Solution Architects",
    "title": "event streaming",
    "content": ". | events are popped off queue as soon as one consumer processes the event | useful for workloads that need to be highly scalable and can be highly variable, since scaling is just adding more consumers | use case is for events that need to be processed exactly once but order doesn’t matter | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#event-streaming",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#event-streaming"
  },"207": {
    "doc": "AWS for Solution Architects",
    "title": "pub-sub model",
    "content": ". | allows several consumers to process the same message | potentially guarantees order of messages received | useful for use cases where more than one consumer needs to receive messages | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#pub-sub-model",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#pub-sub-model"
  },"208": {
    "doc": "AWS for Solution Architects",
    "title": "benefits of event-driven architecture",
    "content": ". | no need to poll which is expensive, since push mechanism alerts consumers when new event occurs | dynamic targeting means there is no need to keep track of data consumers | keeps communication between producers and consumers simple | allows for decoupling and scalability, as each producer and consumer can adapt to their workload in isolation | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#benefits-of-event-driven-architecture",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#benefits-of-event-driven-architecture"
  },"209": {
    "doc": "AWS for Solution Architects",
    "title": "disadvantages of event-driven architecture",
    "content": ". | can’t solve all problems, and the added complexity of setting up a message queue might not be worth it | popular with IoT workflows, but not others | difficult to troubleshoot problems because system is asynchronous | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#disadvantages-of-event-driven-architecture",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#disadvantages-of-event-driven-architecture"
  },"210": {
    "doc": "AWS for Solution Architects",
    "title": "plugin/microkernel architecture",
    "content": ". | consists of a core system with features added via ‘plugins’ or extensions | . ",
    "url": "/notes/tech_books/aws-for-solution-architects#pluginmicrokernel-architecture",
    
    "relUrl": "/notes/tech_books/aws-for-solution-architects#pluginmicrokernel-architecture"
  },"211": {
    "doc": "Becoming Human",
    "title": "Becoming Human",
    "content": "This book attempts to answer what it is about humans that is unique, what distinguishes our species from others. Tomasello builds on Vygotsky’s theory of development and injects an evolutionary aspect to it, morphing it into a theory of shared intentionality. It introduced me to the concept of ontogeny, or development theory, of humans. In summary form, the theory is that human ontogeny is a constructive process involving maturation, experience, and executive self-regulation. The maturational framework begins with general great ape cognitive and social ontogeny, but then also incorporates evolutionarily new and specifically human capacities that transform the process. There are two sets of specifically human capacities. Joint Intentionality Motivation: the motivation to socially affiliate and bond with other individuals (especially adults) by sharing / aligning psychological states (emotions, goals, attention, knowledge) with them. Cognition: the cognitive capacity to create a joint agent “we” with other individuals, creating the possibility of taking the perspective of others, including recursively (aka the dual-level structure), and relating to others second-personally as equals. Collective Intentionality Motivation: the group-minded motivation to affiliate with and care for the social group by respecting and conforming to (aligning with) its conventions and norms (that is, under the pressure of obligation). Cognition: the cognitive capacity to form a group-minded “we” and so to participate in conventions, norms, and institutions, and to view things from “objective” and normative perspectives. As these new capacities enter into ontogenetic pathways, they make possible new forms of sociocultural interaction and experience—such as joint attention and dual-level collaboration, along with their associated perspectives and roles—leading to new kinds of psychological attitudes, such as the senses of fairness and guilt. I think where this book is so interesting is that it seems like it borrows from a philosophical idea in joint intentionality and rigorously tests it. And there is certainly a parade of studies, one after the other. It makes the work feel unassailable, and while many studies are from Tomasello himself, surely if there is this much literature backing up Tomasello’s claims, there is something to it. But the core idea that I hadn’t ever really thought about, that what makes humans uniquely human is their ability to collaborate, is ground-shaking. You can cast all processes in this new light – everything we learn is about this collaboration, this in-group, out-group type of membership. Tomasello does exactly that, each chapter focusing on a component of this type of collaboration: social cognition, communication, cultural learning, cooperative thinking, collaboration, prosociality, social norms, and moral identity. The work is a culmination of dozens of years of research, and despite being a neophyte to the discipline, has the feel of being a definitive work to me. I imagine I’ll keep coming back to the core ideas over and over again in how I frame things. It might have a similar effect that Harrari’s work, and the shared construction of myths, had on me a few years ago. These two ideas seem to interlock. ",
    "url": "/notes/educational_books/becoming-human",
    
    "relUrl": "/notes/educational_books/becoming-human"
  },"212": {
    "doc": "Becoming Human",
    "title": "Two Takeaways",
    "content": ". | Collaboration, in the form of joint intentionality and shared intentionality, is what separates humans from animals. Joint intentionality is the capacity for two humans to collaborate, and shared intentionality is a larger human capacity to collaborate typically manifesting in patterns of behavior called culture. | Tomasello adapts Lev Vygotsky’s sociocultural theory of cognitive development, where human development is a socially mediated process where children acquire their cultural beliefs, values, and problem-solving skills through collaborative dialogues with more knowledgeable members of society, and contrasts this uniquely human developmental process with our closest relatives, great apes. This book is an answer to what makes humans unique, and it is this collaboration and the linguistic, pedagogical, and psychological processes that reify it. | . ",
    "url": "/notes/educational_books/becoming-human#two-takeaways",
    
    "relUrl": "/notes/educational_books/becoming-human#two-takeaways"
  },"213": {
    "doc": "Black Swan Green",
    "title": "Black Swan Green",
    "content": "David Mitchell, 2006 . ",
    "url": "/notes/other_books/black-swan-green",
    
    "relUrl": "/notes/other_books/black-swan-green"
  },"214": {
    "doc": "Black Swan Green",
    "title": "Summary",
    "content": "Chapter 1: January man . Jason Taylor is a 13-year-old with a stammer in the small village of Black Swan Green in Worcestershire. The first chapter starts with a rule Jason’s father has: “Do not set foot in my office” and Jason breaking that rule to pick up the phone. It also introduces Jason’s older sister Julia, friend Dean “Moron” Moran, popular boy Nick Yew, Gilbert “Yardy” Swinyard, Ross Wilcox and his cousin Gary Drake, golden boy student Neal Brose, tomboy Dawn Madden, Mervyn “Squelch” Hill, bully Grant Burch, local legend Tom Yew and “less shiny legend” Pluto Noak. Jason secretly publishes his poems in the Black Swan Green Parish magazine under the alias “Eliot Bolivar”. Jason breaks his grandfather’s expensive Omega Seamaster De Ville watch. Also, after an accident on an iced-over lake, he meets a mysterious old woman rumoured to be a witch. Chapter 2: Hangman . Jason goes into more detail about his struggles with stammering. He then explains how his stammers affect his relationships with other people. He refers to this mental block as “hangman”. He’s scared to stand up and speak during the school’s weekly rhetoric session, but is saved by a call from his South African speech therapist, Mrs. de Roo. He calls his stammer “Hangman” . Chapter 3: Relatives . Introduces Jason’s relatives who come for a visit, including cool, 15-year-old cousin Hugo Lamb (who reappears in Mitchell’s later novel The Bone Clocks), who pressures Jason to try his first cigarette. Chapter 4: Bridle path . Jason is attacked by dobermans and scolded by their owner. When he comes across he meets his classmates Kit Harris, Grant Burch, Philip Phelps and Ant Little. A fight between Burch and Wilcox ends with the former breaking his right wrist. Jason encounters Dawn Madden, a girl he has a crush on. She treats him like a dog. Escaping up a tree, Jason witnesses Tom Yew, on leave from the Navy, make love to Debby Crombie. Chapter 5: Rocks . This chapter explores Jason’s perspective on the growing British instability in the Falklands War and arguments between his mother and father. Tom Yew is killed when his ship, HMS Coventry, is bombed by Skyhawks. Eventually, a ceasefire is declared. Chapter 6: Spooks . Jason’s mother takes up an interest in running an art gallery part-time. Jason finds an invitation to join the Spooks, a local secret society made up of Noak, Burch, Swinyard, Peter Redmarley and John Tookey. Jason and Moran are challenged with making it through six back gardens in 15 minutes. Jason makes it with ten seconds to spare, but his friend Moran is injured when he falls through a greenhouse. Chapter 7: Solarium . Jason receives an invitation from the publisher of his poems. The real benefactor is revealed to be Eva van Outryve de Crommelynck (a much younger version of whom also has a part in Cloud Atlas). She conducts sessions with him, offering constructive criticisms of his poems. Crommelynck is soon extradited as a result of her husband’s financial scams in Germany. Chapter 8: Souvenirs . Jason goes on two trips: one with his father for a work event, another with his mother to her job at Yasmin Morton-Bagot’s gallery. During his trip with his father, Jason is taken to get fish and chips by Danny Lawlor, a man who works under his father at Greenland. He later meets his father’s boss, Craig Salt. Jason’s mother takes over as manager of Yasmin Morton-Bagot’s gallery, La Boite aux Mille Surprises. Jason and his mother prevent a trio of girls stealing items from the store. His mother decides to take him to see Chariots of Fire, an act which gets noticed by people from his school. Chapter 9: Maggot . Wilcox and Drake make fun of Jason for going to the cinema with his mother. Wilcox starts calling him “maggot”, a name which grows within the school. The entire school is punished because Wilcox and his group berate a teacher. Jason meets Holly Deblin, who tells him, “You’re not a maggot. Don’t let dickheads decide what you are.” Wilcox and his group jump Jason after school and Jason tries to stands up for himself, but fails. The bullies throw Jason’s backpack atop the school bus’ roof as it drives off. Jason catches up to the bus, the driver Norman Bates asks why Jason allows himself to be bullied. Bates urges that Jason attack Wilcox with a knife. Upon hearing this, Jason says that if he did he’d “get sent to Borstal.” Norman Bates replies, “Life’s a Borstal!” . Chapter 10: Knife grinder . A gypsy knife grinder visits Jason’s house, offering his services. Jason does not let him in. Jason and his father attend a village meeting to decide what to do about a proposed gypsy encampment. After several speeches, a fire alarm is pulled, causing minor panic. Moran’s father reveals to Jason that his grandfather was a gypsy. Through a series of events Jason finds himself in the gypsy camp. Chapter 11: Goose fair . Jason finds Wilcox’s lost wallet, containing six hundred pounds, at the fair. After some encounters in the fairground he decides to give it back. Wilcox breaks up with Madden and finds her sleeping with Burch. In shock, Wilcox steals Tom Yew’s Suzuki and crashes it, losing part of his right leg. Chapter 12: Disco . It is learned that Jason’s father lost his job. Jason crushes Brose’s calculator in a vice. After being taken to the Principal’s office, Jason reveals that Brose has been running an extortion scheme intimidating other boys in his year for money. Brose is expelled. It is learned that Jason was kicked out of the Spooks. Miss Lippetts delivers a class about secrets and the ethics of revealing them. During the dance, Jason kisses Deblin. He reveals to his father that he broke the watch and his father reveals that he’s been having an affair and is divorcing Jason’s mother. Chapter 13: January man . Taking place two weeks later, Jason reminisces around the village one final time before leaving. The mystery phone calls were from Jason’s father’s mistress, Cynthia. He has stopped writing poems for the parish magazine. ",
    "url": "/notes/other_books/black-swan-green#summary",
    
    "relUrl": "/notes/other_books/black-swan-green#summary"
  },"215": {
    "doc": "Black Swan Green",
    "title": "Some Thoughts",
    "content": "At this point, I think David Mitchell could do anything fiction-wise. Black Swan Green, eschewing the grandiose narrative and temporal sweeps of his other novels, concerns a 13 year old Jason Taylor coming of age, as 13 year old boys are wont to do, amidst the backdrop of the dissolution of his parent’s marriage in a small town in Worcestershire, UK. The book spans 13 chapters, each a well-hewn vignette of gained experience, each a step towards that age that Jason Taylor is coming to. The book does what no other Mitchell novel has so far, which is constrain itself to a single narrator in a confined timeline. In Jason Taylor, Mitchell finds an authentic voice, in part perhaps because this is Mitchell’s most autobiographical novel (as if any novel couldn’t be said to be pulled from some experience), Mitchell having shared the same vocal falterings as Jason Taylor (heretofore JT). At times this veers into the preternaturally precocious. What 13 year old kid might say “a brick of loneliness is reaching terminal velocity inside me”? Mitchell brings a little more realism when he has JT declare “This druid feeling I get in the woods’s so thrilling it makes me want to crap”. When I was younger and I was just learning how to play the guitar, I remember hearing Stevie Ray Vaughan and thinking to myself that what he did sounded easy to do. Took me 6 months of playing to disabuse me of the notion that that primal cement mixer sound of Stevie’s was anything easy to create. I feel the same way with Mitchell – the uniformity and unrelenting authenticity of his prose, the cleverness of the structure evinced by genre, the risks, the performance, all are so hard to do on their own, and within Mitchell you find an author who can hit the lexical equivalent of 6 octaves. The only criticism you might levy is Mitchell is too good, him a basso, his voice echoing underneath the text, so you get Mitchell as a 13 year old boy, Mitchell as a Dutch clerk, Mitchell as an older publisher. That sort of criticism only stands because we expect so much out of Mitchell. I know whatever he writes I will be picking up, rapt. ",
    "url": "/notes/other_books/black-swan-green#some-thoughts",
    
    "relUrl": "/notes/other_books/black-swan-green#some-thoughts"
  },"216": {
    "doc": "Book of Numbers",
    "title": "Book of Numbers",
    "content": " ",
    "url": "/notes/other_books/book-of-numbers",
    
    "relUrl": "/notes/other_books/book-of-numbers"
  },"217": {
    "doc": "Book of Numbers",
    "title": "Summary",
    "content": "Book is divided into three sections, one with Joshua Cohen the author being introduced to Joshua Cohen the tech billionaire (heretofore as “Principal”). Principal is asking for Joshua Cohen to ghost write a novel, and is bringing him on a whirlwind tour of the Middle East to conduct interviews. Second section is a run-of-the-mill rise of a tech company type story, first rendered in sincere prose by presumably Joshua Cohen’s hand, then narrated by Principal himself, who tells the story of Tetrate, the company Principal founded, and their improbable but inevitable rise to success. The final section shifts back to Joshua Cohen’s vantage after the revelation by Principal that Tetrate is being paid by the government to spy on its users. Principal is dying of cancer, and wants this truth to be unveiled. He wants Joshua Cohen to write his memoir and pass on all audio tapes to the wiki leaks analog in this universe. ",
    "url": "/notes/other_books/book-of-numbers#summary",
    
    "relUrl": "/notes/other_books/book-of-numbers#summary"
  },"218": {
    "doc": "Book of Numbers",
    "title": "Quotes",
    "content": "Im not sure how to write about this, not sure whether to still be writing at all—I’ve been trying to screen and block so much out, so many confidences throughout, classified stuff, government stuff, might even get me imprisoned stuff, that it’s become systemic with me, to the point that I find myself trying to withhold on this confession even. Principal’s mouth wired to my ears, his eyes becoming mine, a monitor, a common prompt between us blinking, unblinking, at this sense of having become so irrecordably joined that the only way not to write about him is not to write about myself. I’ll have to spread and type around. Furl and reach between Del and Esc. (133) . The thread then split into two, one a discussion of Nixon, the other a discussion of the history of data manipulation, beginning with the punchcard and its tabulator and ending, as like all discussions end, with the Holocaust. (216) . But imagine if everything was the reverse and you had to invent a clincher before inventing the equipment to sew an animal skin before even inventing the animal. That was search invented by how to search. Invented by how to tailor the results to the user. Not to mention that “button,” in another context, could refer not to a clothes clasp but to a key pressed to launch a weapon. Not to mention that in still other contexts “needle” could mean “annoy,” or “bother,” and “thread” might not be a literal string or twine but figurative as like a “drift” or “stream” whose speed is measured in “knots,” “a train of thought” just “flowing,” until it was “brought to heel.” The choice was to both needle the thread and thread the needle. Through its eye. In one ear, out the other. To know the polysemy of tongues. We had to code a searchengine to check our own code for a searchengine. That should tell you everything. (228) . The Story wasn’t everything, of course, but its telling had to convince editors that it was, or at least had to convince readers that it was—had to story its way into obliterating any intimations of alternative or individual experience. This was the worst of journalism—the realization that no matter how diligently you worked to be impartial, your presence alone was the slant, the tilt, and that even transcendence would have to become narrated, narratized, plotted. (523) . But the for serious offline impact of 09/11 was the continual contact, continuous contact, it encouraged. On 09/12 everyone went out and bought phones. The mobiles, the cells. Suddenly, to lose touch was to die, and the only prayer left for anyone who felt buried whether under information or debris was for a signal strong enough to let their last words outlive them on voicemail. (378) . ",
    "url": "/notes/other_books/book-of-numbers#quotes",
    
    "relUrl": "/notes/other_books/book-of-numbers#quotes"
  },"219": {
    "doc": "Book of Numbers",
    "title": "Themes",
    "content": "Style . Section headings begin with “/”, like a URL, and end in ://, which is like the end of a domain, e.g., https://this-is-website/sub-page1. There are long sections that are cross-out, presumably mimicking Cohen the narrator’s writing process, which makes the text palimpsestic, serving the larger theme of polysemy. There are several types of narratives going on here, where you have dictations of interviews, stream-of-consciousness babble, dictations of interviews, a standard historical recounting of a tech company start-up, emails, letters, and a few other things in between. Again, all serving a principal theme of the speed and medium of information delivery blurring lines of meaning. Cohen (the author), invents many new words, sometimes from whole cloth, sometimes shifting a noun into an adjective or a verb into an adverb – standard fare for the Pynchon/Wallace/postmodern fare. Language can be adapted and shifted for purpose and most prescriptivist arguments are exclusionary at best, actively prejudiced at worst. Mirrors/Polysemy . The main characters and main tech companies are clear mirrors of reality (to tetrate is this novel’s version of to google, sharing the same sort of “very large number” connotations as a googolplex – tetration is the mathematical operation of double exponents, as exponents are to multiplication). There are two Joshua Cohens in the novel, and a third lurking in the margins in authorial shadows. The novel shares it’s name with the 4th book of the Torah (Joshua is the successor to Moses in that book and does lead his people to the promised land, a reward denied to Moses because he refused to talk to a rock or something). There is a Julian Assange character, called Thor Balk, who is also similarly accused of some sexual impropriety, and who is also ensconced in a Russian embassy in hiding from the powers that be. The novel is layered, where at the center you have a story about the creation of search engine and the business scaffolding all around it, and that is largely what this book thematically settles upon – how to categorize information, especially as the trickle grows into a deluge with the widespread adoption of the Internet as an ocean of data. Beyond that, Cohen (the narrator), is still trying to deliver his people into the promised land, and like most Jewish male authors of the 20th and 21st century, trying to figure out the overlap of the various Venn diagrammed circles of America’s past, present, and future, his masculinity, his broken marriage and the historical place of Jews. Cohen is a womanizer, and if we believe Rachel’s sections of the novel (her stream of consciousness blog), a miscarriage and subsequent aloofness is what prompts the demise of their relationship. Beyond that, you have a novel (like many postmodern novels) about writing in and of itself. The novel starts with a protestation: “If you are reading this on a screen, fuck off. I’ll only talk if I’m gripped with two hands”, and ends with the author at a publishing conference and his publisher friend having died somewhere over Reykjavik, Iceland while flying there. The irony, if you can call it that, is that Cohen, the narrator, knows he has no control over the medium after he publishes, and like Moses launching his people into the promised land, he is destined to remain stranded beyond his novel’s borders. ",
    "url": "/notes/other_books/book-of-numbers#themes",
    
    "relUrl": "/notes/other_books/book-of-numbers#themes"
  },"220": {
    "doc": "Book of Numbers",
    "title": "Thoughts",
    "content": "I love a well constructed sentence, the verbs and nouns hung together in some novel orientation that speaks to a beauty all it’s own, to the power of the expression of language. Joshua Cohen can craft those sentences, same way that David Foster Wallace or Pynchon could. They march across the page like a regiment of infantry, or unfurl like a bedsheet out to dry on a spring day. I knew this from reading the Netanyahus, and I see this for his Book of Numbers. But thematically, I just don’t think this one hung together as well as Netanyahus. In a lot of ways, I think there is an analogue with Pynchon’s Crying of Lot 49 and V, and Cohen’s Netanyahus and Book of Numbers. Both books (CoL49 and N) are shorter, coming later in a career than their sprawling, swollen predecessors, and reveal authors at the height of their expressive powers. Both (V and BoN) are painfully boring books, but showcase the buds of a burgeoning virtuosity. These authors will be important, their early books say, if not yet. Maybe it’s the fact that the Internet has caused things to move so quickly, that a novel published in 2015 can feel so dated. Cohen gets the tech mostly right, but it feels like the impact is just felt in traditional terms: a Jewish man wondering about how to be a man in an indifferent, and often hostile, American landscape. Bloom, the critic, calls this one of the finest Jewish books of the century (I’ve never read the other three he mentions), and while I immensely respect Bloom, this one just didn’t bring me to the promised land, but, after wandering through the desert of prose for the literary equivalent of 40 years, did gesture toward the milk and honeyed future. ",
    "url": "/notes/other_books/book-of-numbers#thoughts",
    
    "relUrl": "/notes/other_books/book-of-numbers#thoughts"
  },"221": {
    "doc": "Clean Architecture",
    "title": "Clean Architecture",
    "content": ". | Part I: Introduction . | Chapter 1: What is Design and Architecture? | Chapter 2: A Tale of Two Values | . | Part II: Programming Paradigms . | Chapter 3: Paradigm Overview | Chapter 4: Structured Programming | Chapter 5: Object-Oriented Programming | Chapter 6: Functional Programming | . | Part III: Design Principles . | Chapter 7: SRP: Single Responsibility Principle | Chapter 8: OCP: The Open-Closed Principle | Chapter 9: LSP: The Liskov Substitution Principle | Chapter 10: ISP: Interface Segregation Principle | Chapter 11: DIP: The Dependency Inversion Principle | . | Part IV: Component Principles . | Chapter 12: Components | Chapter 13: Component Cohesion . | Tension Diagram for Component Cohesion | . | Chapter 14: Component Coupling | . | Part V: Architecture . | Chapter 15: What is Architecture? | Chapter 16: Independence | Chapter 17: Boundaries: Drawing Lines | Chapter 18: Boundary Anatomy | Chapter 19: Policy and Level | Chapter 20: Business Rules | Chapter 21: Screaming Architecture | Chapter 22: The Clean Architecture | Chapter 23: Presenters and Humble Objects | Chapter 23: Partial Boundaries | Chapter 26: Layers and Boundaries | Chapter 27: The Main Component | Chapter 28: Services Great and Small | Chapter 28: The Test Boundary | Chapter 29: Clean Embedded Architecture | . | Part V: Details . | Chapter 30: The Database is a Detail | Chapter 31: The Web is a Detail | Chapter 32: Frameworks are Details | Chapter 33: A Use Case | Chapter 34: The Missing Chapter | . | . ",
    "url": "/notes/tech_books/clean-architecture",
    
    "relUrl": "/notes/tech_books/clean-architecture"
  },"222": {
    "doc": "Clean Architecture",
    "title": "Part I: Introduction",
    "content": "Chapter 1: What is Design and Architecture? . Traditionally, architecture seems to imply high level details, while design is low-level structures and details, but little details support high-level details– it’s all part of the same whole of the system. The goal of software architecture is to minimize the human resources required to build and maintain the required system. The measure of design quality is measure of effort required to meet needs of customer. Developers tell themselves two lies: . | “We can clean it up later; we just have to get to market first” – never clean it up because market is always moving | writing messy code is faster than clean code – it never is | . “The only way to go fast is to go well”. Summary . Avoid overconfidence and take software design seriously. In order to take software design seriously, you need to know what good design and architecture is – you need to know attributes of a system that minimizes effort and maximizes productivity. Chapter 2: A Tale of Two Values . Every software system provides two different values to stakeholders: . Behavior . | the way a system behaves, written in a functional specification or requirements document then written in code | when system doesn’t behave the way it is supposed to, programmers then debug | . Architecture . | software of a system, subject to change | difficulty in making a change should be proportional to the scope of the change, not shape | new requirements roughly fit the same scope, but they often no longer fit the shape of the system and thus are increasingly difficult | architectures should be as shape-agnostic as practical | . Is a system working (behavior) or the ease of change (architecture) more important? If a program is impossible to change, it will become useless, but if it is easy to change, it can be made useful. Eisenhower’s Matrix . | important &amp; urgent | important &amp; NOT urgent | . | NOT important &amp; urgent | NOT important &amp; NOT urgent | . | behavior is urgent but not always particularly important | architecture is important but never particularly urgent | . Business managers are not equipped to evaluate the importance of architecture, so it is responsibility of software dev team to assert importance of architecture over urgency of features. ",
    "url": "/notes/tech_books/clean-architecture#part-i-introduction",
    
    "relUrl": "/notes/tech_books/clean-architecture#part-i-introduction"
  },"223": {
    "doc": "Clean Architecture",
    "title": "Part II: Programming Paradigms",
    "content": "Chapter 3: Paradigm Overview . Structured Programming . | discovered by Edsger Wybe Dijkstra in 1968 | goto statements harmful to program structure, replace with if/then/else and do/while/until constructs | “Structured programming imposes discipline on the direct transfer of control” | . Object-Oriented Programming . | discovered by Ole Johan Dahl and Kristen Nygaard in 1966 | “Object-oriented programming imposes discipline on the indirect transfer of control” | . Functional Programming . | discovered before computers by Alonzo Church who in 1936 invented $ \\lambda$-calculus (lambda calculus) | typically no assignment statements | “Functional programming imposes discipline on assignment” | . Patterns typically take something away and are negative in intent, meaning there likely isn’t anything else to take away and there won’t be any other paradigms. All three were invented before 1968 and there’s been nothing since. Summary . | we use polypmorphism to cross architectural boundaries | we use functional programming to impose discipline on the location of and access to data | we use structured programming as the algorithmic foundation of our modules | . Chapter 4: Structured Programming . Dijkstra saw that programming was hard, and the cognitive load was too high to keep all details in mind at once. His answer was to use the mathematical discipline of proof, or the idea of using composable elements to create programs. The use of goto prevented a program from being able to be decomposed recursively, and that good uses of goto really corresponded to if/then/else or do/while control structures. All programs can be built from three elements: sequence, selection, and iteration. Eventually, goto was phased out, and we are all ‘structured’ programmers in the sense that languages don’t give us the option to use undisciplined direct transfer of control. Proofs ended up being too difficult, but the scientific method replaced proofs. The central idea is that things are falsifiable but not provable, as in, you can only prove something is false rather than proving it is true. Dijkstra: “Testing shows the presence, not the absence, of bugs”. Structured programming allows us to decompose a program into small provable functions that are falsifiable, i.e., testable. Summary . Ability to create falsifiable units of programming that makes structured programming valuable today, and the reason unrestrained gotos aren’t used. Functional decomposition is great practice. Software is like a science, from low to high level, and is driven by falsifiability. Architects define modules, components, and services that are easily testable (falsifiable), using restrictive disciplines. Chapter 5: Object-Oriented Programming . What is OOP? Some say “combo of data and function”, but that implies that o.f() is different from f(o) , which is absurd. Others say it is a way to model real world, but this is too loose and evasive. Many say it is attributes of polymorphism, encapsulation, and inheritance. Encapsulation . Being able to draw a cohesive line around data and functions, seen as private data members and public functions of a class. Perfect encapsulation exists in C, a non-OO language. Data structures and functions would be declared in header files and implementation files would take care of the details, and users didn’t have access to implementation files. Once OO was introduced with C++, you lost perfect encapsulation. Introducing public, private, and protected keywords a way to regain encapsulation, but this is a hack. Many OO languages have little or no encapsulation. Inheritance . Inheritance is simply the redeclaration of a group of variables and functions within an enclosing scope. OO languages allow for easier inheritance that isn’t a workaround, as well as multiple inheritance, but this functionality exists in non-OO languages . Polymorphism . Giving a single interface to entities of different types (think, file interface in Unix) . | 1 2 3 4 5 6 7 . | struct FILE { void (*open) (char* name, int mode); void (*close) (); int (*read) (); void (*write) (char) ; void (*seek) (long index, int mode); } . | . Polymorphism is an application of pointers to functions, which have been in use for a long time. OO allowed this to be much safer, however, as pointers to functions are dangerous, relying on manual conventions. OO eliminates these conventions. Unix chose to make IO devices plugins (polymorphism allows things to becomes plugins to the source code) because device independent programs are more adaptable. For example, punch cards to magnetic tape. Most OS’s implement this device independence. Dependency Inversion . In typical calling tree, high level functions call mid level functions, which call low level functions, etc. The caller was forced to mention the name of the module that contained the callee, meaning that the flow of control was dictated by the behavior of the system. Polymorphism means any source code dependency, no matter where it is, can be inverted. What this means is that working in systems written in OO languages have absolute control over direction of all source code dependencies. Database and UI depend on the Business Rules, and from here components can be deployed independently. Summary . OO is the ability, through the use of polymorphism, to gain absolute control over every source code dependency in the system. Architect can create plugin architecture where modules that contain high-level policies are independent of modules that contain low-level details, and all these modules can be deployed independently. Chapter 6: Functional Programming . We might write a program to compute squares in Java like this: . | 1 2 3 . | for (int i=0; i &lt;25; i ++&gt;) { System.out.println(i*i); } . | . In Clojure, a derivative of Lisp, it’d look like this: . | 1 . | (println (take 25 (map (fn [x] (* x x)) (range)))) . | . The key to functional programming is that variables do not vary (are immutable). In Java, the i variable mutates. Immutability and Architecture . All race conditions, deadlock conditions, and concurrent update problems are due to mutable variables, and if no variable is ever updated you can’t have these concurrency problems. We might be able to make everything immutable, if we had infinite storage and infinite processing power. One compromise is to split mutable and immutable components, and to protect the mutable component by using a transaction or retry-based memory in front of that mutable component. Architects should push as much processing as possible to immutable components. Event Sourcing . Store only the transactions, and re-compute the state as needed. For example, banks store withdrawals and debits, and if the account balance is needed, all the debits and withdrawals are tallied. Nothing is ever deleted or updated, instead of CRUD we have CR. This is the way source control system works. Summary . Each paradigm takes something away. We have learned what not to do, but software is not a rapidly advancing tech, and the rules are the same as they were in 1946. Software is still composed of sequence, selection, iteration, and indirection. ",
    "url": "/notes/tech_books/clean-architecture#part-ii-programming-paradigms",
    
    "relUrl": "/notes/tech_books/clean-architecture#part-ii-programming-paradigms"
  },"224": {
    "doc": "Clean Architecture",
    "title": "Part III: Design Principles",
    "content": "SOLID principles tell us how to arrange functions and data into classes. The goal of the principles is the creation of mid-level software structures that: . | tolerate change | are easy to understand | are the basis of components that can be used in many software systems | . SOLID Principles . SRP: The Single Responsibility Principle . | each software module has one, and only one, reason to change | . OCP: The Open-Closed Principle . | systems should be easy to amend by adding new code, not changing existing code | . LSP: The Liskov Substitution Principle . | to build a software system from interchangeable parts, those parts must adhere to a contract that allows those parts to be substituted for one another | . ISP: The Interface Segregation Principle . | avoid depending on things you don’t use | . DIP: The Dependency Inversion Principle . | code that implements high-level policy should not depend on the code that implements low-level details but rather should rely on policies | . Chapter 7: SRP: Single Responsibility Principle . “A module should be responsible to one, and only one, actor.” . A module is a cohesive set of functions and data, typically a source file. Best to look at symptoms of violating this principle. Symptom 1: Accidental Duplication . Three different actors responsible for three different methods - accounting department for calculatePay(), human resources for reportHours(), and DBAs for save(). If two methods rely on the same underlying algorithm, changing it will change its affect on both methods, which might cause problems. Symptom 2: Merges . If there are two actors that need to change a source file and those file changes need to be merged together, this is a symptom of violation of SRP. There are a few solutions to this problem, and they all involve separating the code from the single class. We could create three classes, one for each method, and then thread them together using the Facade pattern. Summary . SRP is about functions and classes, but it appears at two more levels: . | at components, it becomes Common Closure Principle | at architectural, it is Axis of Change (responsible for creating Architectural Boundaries) | . Chapter 8: OCP: The Open-Closed Principle . “A software artifact should be open for extension but closed for modification” . The behavior of a software artifact should be extendible without having to modify that artifact. When we design architecture, we want component relationships to be unidirectional, and components that should be protected from change should be depended on by lower level components, i.e., if component A should be protected from changes in component B, component B should rely on component A. At the architectural level, we separate functionality based on how, why, and when things change, and then organize that separated functionality into a hierarchy of components. High-level components are protected from changes made to low-level components. Summary . The goal of OCP, one of the driving forces behind architecture of systems, is to make the system easy to extend without incurring a high impact of change. We partition the system into components, and arrange those components in a dependency hierarchy that protects higher-level components from changes in lower-level components. Chapter 9: LSP: The Liskov Substitution Principle . “What is wanted here is something like the following substituion property: If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.” . The following design conforms to LSP because Billing does not depend in any way on the two subtypes of License. The canonical violation of LSP, the Square/Rectangle problem below: . Summary . LSP should be extended to the level of architecture. Violating substitutability can cause a system’s architecture to be polluted with a significant amount of extra mechanisms. Chapter 10: ISP: Interface Segregation Principle . “No client should be forced to depend on methods it does not use.” . Source code dependencies are often language dependent: in statically typed languages like Java, programmers declare source code dependencies, and changes would force recompile and redeploy. In dynamically typed languages like Python and Ruby, these dependencies are inferred at runtime and thus allow more flexible and loosely coupled systems to be created. ISP still has architectural ramifications, however: imagine System S implementing Framework F on top of Database D. Changes to Framework F, even if System S doesn’t use them, might require redeploys to Database D and System S. Chapter 11: DIP: The Dependency Inversion Principle . “The most flexible systems are those in which source code dependencies only refer to abstractions, not concretions.” . While we can’t completely avoid relying on concretions (String in Java, for example), we should be worried about volatile concrete elements, those subject to frequent change. We can rely on stable abstractions and reduce the volatility of interfaces by adding functionality to implementations without making changes to interfaces. This boils down to a specific set of coding practices: . | Don’t refer to volatile concrete classes - refer to abstract classes instead | Don’t derive from volatile concrete classes - corollary of previous rule | Don’t override concrete functions - concrete functions require source code dependencies, and overriding them does not eliminate those dependencies, you inherit them | Never mention the name of anything concrete and volatile - a restatement of the principle itself | . We use Factories to manage the dependency and create the class. This allows us to separate the system into two components, one concrete, the other abstract. Summary . DIP is the most visible organizing principle in architecture diagrams, and the separation between concrete and abstract will inform all diagrams. The Dependency Rule is the way in which dependencies cross from concrete to more abstract in a single direction. ",
    "url": "/notes/tech_books/clean-architecture#part-iii-design-principles",
    
    "relUrl": "/notes/tech_books/clean-architecture#part-iii-design-principles"
  },"225": {
    "doc": "Clean Architecture",
    "title": "Part IV: Component Principles",
    "content": "Chapter 12: Components . Components are the units of deployment. jar files in java, gem files in Ruby, DLL in .NET. In compiled languages, they are aggregation of binary files, and in interpreted languages they are aggregations of source files. Well-designed components retain the ability to be independently deployable and thus independently developable. Chapter 13: Component Cohesion . Three principles of component cohesion: . | The Reuse/Release Equivalence Principle (REP) . | people who want to reuse software components can not and will not do so unless those components are tracked through a release process and are given release numbers, and developers might choose to upgrade or not based on change log | from arch. view, classes and modules that are formed into a component must belong to a cohesive group; grouped classes and modules should be releasable together | . | The Common Closure Principle (CCP) . | “Gather into components those classes that change for the same reasons and at the same times. Separate into different components those classes that change at different times and for different reasons.” | most of the time maintainability is more important than reusability, so gathering components that change at the same time together enhances maintainability | SRP restated for components, as well as Open Closed principle (open for extension but closed for modification) | . | The Common Reuse Principle (CRP) . | Classes and modules that tend to be reused together belong in the same component | CRP tells us more about which classes shouldn’t be part of a component – if classes and modules are together, they should be inseparable. \\ | “Don’t depend on things you don’t need” | . | . Tension Diagram for Component Cohesion . These principles are often in contention. Chapter 14: Component Coupling . The Acyclic Dependencies Principle . In the past, there was an idea to allow relative isolation for developers to work collaboratively which was to defer that integration until the end of the week, i.e., a weekly build. Eventually, the integration time creeps earlier in the week, and the build schedule grows, and this is not ideal. A solution to the above would be to partition development into releasable components owned by a single dev or a team of devs, so consuming teams might choose whether they want to update their used components. Integration now happens in small increments, and no team is at the mercy of others; integration can be continuous. In order to make this work, you need to manage the dependency structure, and there can be no cycles; regardless of what component you end up at, it is impossible to follow the dependency tree and end up at the original component. We need a directed acyclic graph (DAG). We know how to build systems when we understand the dependencies between its parts. With cycles in the dependency graph, it is very difficult to work out order in which you must build components. There are two ways we could break the cycle: . | Use the dependency inversion principle (DIP) to create an interface of the used methods | create a new component with the classes that the two components depend on | . As systems grow, these dependencies will appear; the component structure can’t be designed from the top down. We have come to expect that large-grained decompositions like components, will also be high-level functional decompositions. Decomposition in computer science, also known as factoring, is breaking a complex problem or system into parts that are easier to conceive, understand, program, and maintain. In reality, component dependency diagrams have little to do with the function of a system, they are merely describing buildability and maintainability. One of the overriding concerns is the isolation of volatility: we don’t want frequently changing components to affect stable, high-value components. We don’t want to change business rules because our GUI changes. This process needs to happen after we’ve built the system a bit: we don’t know about common closure, we don’t know about reusable elements, and we almost certainly would create dependency cycles. Stable Dependencies Principle . Ensures that modules that are intended to be easy to change are not depended on by modules that are harder to change. Stability is related to the amount of work required to make a change. Component X is stable, because three components depend on it. X is responsible for three components, but depends on none, so it is independent. Component Y is very unstable. No components depend on it, so it is irresponsible, and it is dependent. Changes may come from three external sources. Stability Metrics We can count the dependencies coming in and going out of a component, and this is the positional stability of the component . | Fan-in: incoming dependencies | Fan-out: outgoing dependencies | Instability: $ \\int_0^1 I = Fanout \\div (Fanin + Fanout) $ | . When I is equal to 1, no other component depends on this component – it is irresponsible and dependent, meaning there is no reason not to change it if needed . When I is equal to 0, it means the component is depended on by other components but does not itself depend on other components. It is responsible and independent (and stable) – lots of dependents make it hard to change and nothing forces it to change. I metric of a component should be larger than the I metrics of the components that it depends on, that it should decrease in the direction of the dependency. Changeable components on top and stable components on bottom. The Stable Abstractions Principle . “A component should be as abstract as it is stable” . | $ Nc $: the number of classes in the component | $ Na $: the number of abstract classes and interfaces in the component | $ A $: abstractness.$ A = Na \\div Nc $ | . Best components are maximally stable and abstract, and maximally unstable and concrete. | Zone of Pain - highly stable, concrete – if these components are volatile (need to be changed often), this is painful | Zone of Uselessness - maximally abstract but no dependents – these components are useless | . ",
    "url": "/notes/tech_books/clean-architecture#part-iv-component-principles",
    
    "relUrl": "/notes/tech_books/clean-architecture#part-iv-component-principles"
  },"226": {
    "doc": "Clean Architecture",
    "title": "Part V: Architecture",
    "content": "Chapter 15: What is Architecture? . A software architect is a programmer, the best programmer, and they continue to take programming tasks, because it is important they experience the problems they are creating for the rest of programmers. The architecture of a software system is the shape given to that system by those who build it, and the purpose of the shape is to facilitate the development, deployment, operation, and maintenance of the software system. “The strategy behind that facilitation is to leave as many options open as possible for as long as possible.” . The primary purpose of architecture is to support the life cycle of the system, and good architecture makes the system easy to understand, easy to develop, easy to maintain, and easy to deploy, to minimize lifetime cost and maximize programmer productivity. development . systems need to be easy to develop, and this ease is dictated by different team structures. small teams might be predisposed to a monolith, while distributed teams to microservices. deployment . a goal of architecture should be to make sure a system is deployable with a single action . some things might leave a system easy to develop but hard to deploy: e.g., microservices . operation . it is easier to scale out hardware to help operation, so its impact on architecture is less pronounced. hardware is cheap and people are expensive. The architecture of a system makes the operation of the system readily apparent to the developers; it should reveal operation. maintenance . likely the most costly aspect of software systems, and the primary cost is spelunking (digging through existing software, trying to find the best place and strategy to add a new feature or repair a defect) and risk. Software has two types of value: behavior and structure. We keep software soft by leaving as many options open as possible. The details we leave open are the ones that don’t matter. Every software system can be decomposed into two major elements: policy and details. Policy is where the value of the system lives, details enable computers or humans to communicate with policy, and the goal of architect is to make a system that recognizes policy as most essential, and ensures details are irrelevant to that policy. These details can be delayed and deferred, e.g., what database, whether REST compliant, web server, etc. Chapter 16: Independence . Good architecture must support: . | use cases and operation of the system | maintenance of the system | development of the system | deployment of the system | . Use Cases . Architecture must support intent of the system. Architecture does not wield much influence over behavior, so best thing architecture can do is clarify and expose intent of the system and make it visible at the architectural level. These exposed elements will be classes or functions that have prominent positions within architecture and will be clearly named to describe that. Operation . A system must be structured to allow its operation, whether that is 100,000 customer orders per second or 2,000 records per second throughput. It is best to leave open decisions on system structure (monolith, microservices). Development . “Any organization that designs a system will produce a design whose structure is a copy of the organization’s communication structure” - Conway’s Law . A system that must be developed by an organization with many teams and many concerns must have an architecture that facilitates independent actions by those teams. Deployment . The goal is “immediate deployment”, achieved through the proper partitioning and isolation of the components of the system. A good architecture supports use cases and balances that with a component structure that mutually satisfies them all. This is hard because all use cases are not known, so leaving the system open to change in all the ways it must change is important. Decoupling Layers . Use SRP and CCP to separate components that change for different reasons and collect what changes for the same reasons, and divide those into decoupled horizontal layers. Decoupling Use Cases . Group together use cases in the same way we did for components, and make those the vertical slices across your horizontal layers. We shouldn’t have to modify use cases, just add more. Then, we can choose a decoupling mode – is it service-oriented architecture (SOA)? What needs to be run in the same address space, what can be separated to a different service? This option can be left open. If decoupling is done well, it should be easy to hot-swap components in the live system. Adding a new use case should be as simples as adding a new jar file or service to the system. Be wary of true duplication vs false duplication. If you have a change that needs to be reflected in all its duplicated elements, that is true duplication, but if you build an abstraction over duplicated code that is really two separate entities that evolve along separate paths, this is accidental duplication and can be largely ignored. Decoupling Modes . | Source level - we can control dependencies between source code modules so changes to one don’t force changes or recomp. to others | Deployment level - decoupled components are partitioned into independently deployable units such as jar files, gem files, or dlls | Service level - reduce dependencies down to data structures and only communicate through network packets | . How to choose? One method is to decouple at the service-level by default, but this is often a waste in effort, memory, and cycles (the first being most expensive). Good architecture protects the majority of the source code from these changes, and leaves the option open as long as possible. Chapter 17: Boundaries: Drawing Lines . Software architecture is the art of drawing boundaries that separate software elements from one another and restrict one side from knowing about those on the other. Coupling saps human resources required to build systems. Draw lines between things that matter and things that do not. E.g., the database doesn’t matter to the GUI, so there should be a line between the two. Some have thought that the database is the embodiment of the business rules, but that is false. The database is a tool that the business rules use indirectly. All the business rules need to know about is that there is a set of functions to fetch/save data. We can draw a line across the inheritance relationship, just below the DatabaseInterface. The Database could be implemented with Oracle or MySQL or Couch or Datomic or flat files, and the business rules don’t care. Also worth noting, IO is irrelevant. This is all a plugin architecture, or the idea that we could swap layers as plugins to business rules. Summary . To draw boundary lines in software architecture, you first partition the system into components. Some of those components are core business rules, others are plugins that contain necessary functions that are not related to the core business. Then you arrange the code in those components such that the arrows between them point in one direction – toward the core business. Chapter 18: Boundary Anatomy . monolith - the simplest and most common architectural boundary, simply disciplined segregation of functions and data within a single processor and a single address space. From a deployment view, this is a single executable file. Even in a monolith, OO paradigms allow us to decouple classes and function calls; dependencies cross boundaries towards the higher-level component. Chapter 19: Policy and Level . Software systems are statements of policy: a program is a detailed description of the policy by which inputs are transformed to outputs. Within a system are many smaller statements of policy, and architecture is separating those policies and regrouping based on the ways that they change, often in a directed acyclic graph, and the direction of those dependencies is based on the level of the components they connect. Low-level components to depend on high-level components. A definition of level would be distance from the inputs and outputs. Higher level policies that are farthest from the inputs and outputs tend to change less frequently and for more important reasons, while lower level policies change more frequently and with more urgency but for less important reasons. Chapter 20: Business Rules . If we divide our apps into business rules and plugins, what is a business rule? Simply they are rules or procedures that make or save money. They would make or save the business money even if implemented manually. E.g., a bank charging N% interest on a loan. These are Critical Business Rules, because they are critical to the business itself. These items typically need data, called Critical Business Data. Bounded together, they are an object called an Entity. We can see Critical Business Data and Critical Business Rules together in the above class, although it doesn’t have to be a class – it could be any object. Sometimes, business rules might only save money when used in an automated way. This is a use case, or a description of the way an automated system would be used. Use cases control when Critical Business Rules within entities are invoked. These use cases use the Request and Response model, where a use case accepts simple request data structures for its input and returns simple response data structures as its output. Chapter 21: Screaming Architecture . If you look at a home, or a library, the architecture screams the function. A software application should scream about the use cases of the application. A good architecture allows decisions about frameworks, databases, web servers, and other environmental issues and tools to be deferred and delayed. Also, the Web is an IO device, not an architecture. Frameworks are tools, not ways of life. If your system architecture is all about use cases, you should be able to unit test all those use cases without any frameworks in place. Chapter 22: The Clean Architecture . Most architectures try to achieve the same thing, separation of concerns, through dividing the system into layers that have the following characteristics: . | independent of frameworks | testable | independent of the UI | independent of the database | independent of any external agency | . The further in you move, the higher level the software is. “Source code dependencies must point only inward, toward higher-level policies.” . entities - describe enterprise-wide Critical Business Rules; can be object with methods, or set of data structures and functions use cases - contains application specific business rules, encapsulating and implementing all the use cases of the system interface adapters - converts data from a format most useful for use cases and identities to a format for some external agency framework and drivers - this is where all the details go, and there isn’t much code here other than glue code . isolated, simple data structures are passed across the boundaries – we don’t want the data structures to have any sort of dependency that violates the dependency rule. Chapter 23: Presenters and Humble Objects . The Humble Object Pattern - originally used by unit testers to split the hard to test behaviors from the easy to test behaviors. we can use that to split into two modules or classes, the hard to test (humble) and the easy. The GUI is hard to test, but the functionality isn’t. So splitting them gives us the Presenter and the View. Code in the hard to test object (humble) is as simple as possible. The Presenter is the testable object. In this scenario, its role is to format data for presentation so the View can simply move it to screen. Everything that appears on the screen is presented as a string, a boolean, or an enum. Where do ORMs belong? In the database layer, between gateway interfaces and the database. Chapter 23: Partial Boundaries . Proper boundaries are expensive to create – you need to create reciprocal Boundary interfaces, Input and Output data structures, and all the dependency management to ensure the two sides are independently compilable and deployable. We can create partial boundaries to give us flexibility later (this might be a violation of agile’s YAGNI - you ain’t gonna need it). Do all the work of creating the boundary but then keep it in the same component. Requires same amount of code, but not of administration of multiple components. Another pattern is the Strategy pattern, or getting the boundary behavior at runtime. Another pattern might be the Façade pattern, which sacrifices dependency inversion, where the Façade deploys service calls to classes the Client is not supposed to access. Summary . Three ways to implement boundary: . | partial boundary | one-dimensional boundary | façade | . each boundary can be degraded if that boundary never materializes. It is a function of an architect to decide where boundaries might one day exist. Chapter 26: Layers and Boundaries . It’s easy to think a system is comprised of only three systems: UI, Business Rules, and Database, but there is more. Chapter 27: The Main Component . Think of Main as a plugin to the application that sets up initial conditions and configurations, gathers all the outside resources, and then hands control over to the high-level policy of the application. There might be a Main plugin for dev, for test, for production. If we think of Main sitting behind an architectural boundary, configuration becomes a lot easier to reason about. Chapter 28: Services Great and Small . Service-oriented and microservice architecture are popular in part because: . | services seem strongly decoupled from each other | services appear to support independence of development and deployment | . Using services isn’t an “architecture”. An architecture is defined by the boundaries that separate high-level policy from low-level details. Services might be part of an architecture, but they don’t define it. the decoupling fallacy . It is a myth that services are fully decoupled. They might share resources within a processor or on a network, and they are certainly coupled by the data they share. If a new field is added to a data record passed between services, the receiving service needs to be changed. Additionally, while interfaces are well-defined, so are they between functions. Services aren’t any more rigorously defined. the fallacy of independent development and deployment . Teams can be solely responsible for writing, maintaining, and operating the service as part of a dev-ops strategy, and this is scalalable. This is only partially true. | large orgs can be built on monoliths and component-based systems as well as service based | services cannot always be independently developed, deployed, and operated (based on decoupling fallacy) | . Chapter 28: The Test Boundary . Tests are part of the system. From an architectural standpoint, all tests are the same. We can think of tests as the outermost circle, and they follow the Dependency principle, as in, their dependencies point inward. Tests tend to be tightly coupled to system code, so changes to common systems can cause hundreds or even thousands of tests to fail, called the Fragile Tests Problem, which has the effect of making the system rigid because people resist changes so tests don’t fail. Design for testability – don’t depend on volatile things, so build a system so tests don’t rely on volatile things. One way to achieve this is to build a testing API so tests can verify business rules. This API will be a superset of interactors and interface adapters. We want to decouple the structure of the tests from the structure of the application. This avoids the structural coupling of test and application. Tests must be well-designed if they are to provide the desired benefits of stability and regression, and those tests that are not designed as part of the system tend to be fragile and difficult to maintain. Chapter 29: Clean Embedded Architecture . “Although software does not wear out, firmware and hardware become obsolete, thereby requiring software modifications.” . ",
    "url": "/notes/tech_books/clean-architecture#part-v-architecture",
    
    "relUrl": "/notes/tech_books/clean-architecture#part-v-architecture"
  },"227": {
    "doc": "Clean Architecture",
    "title": "Part V: Details",
    "content": "Chapter 30: The Database is a Detail . “From an architectural view, the database is a non-entity – it is a detail that does not rise to the level of an architectural element.” This doesn’t mean data models are details; those are highly significant to architecture. Edgar Codd defined the principles of relational databases in 1970, and its very valuable technology. Accessing things on memory is hard. Data access takes milliseconds, meaning you need indexes, caches, and query optimizers for fast and efficient access of data. This has taken two dominant forms: file systems and relational database management systems (RDBMS). File systems are document based, and they work well when you need to find a file by name but not search its contents. Databases are content based, and are good if you need to find a record by content. Once disks go away, all data will be stored in RAM. The format it takes on RAM will be the format all programmers are used to and what data from tables is turned into: stacks, queues, linked lists, hash tables, trees, etc. What about performance? When it comes to data storage, that concern can be encapsulated and separated from business rules. Efficient data access and storage is a low level concern. The data is significant. The database is a detail. Chapter 31: The Web is a Detail . Abstracting the business rules from the UI and web isn’t easy, but it can be done. Chapter 32: Frameworks are Details . Frameworks are popular and useful, but they are not architectures. The relationship between you and the framework author is asymmetric – you rely entirely on the framework and they don’t know you exist. This is a weird chapter full of parasitic references of invasion. You can use the framework, but try not to couple completely to it. Inject it into your Main component but leave it there. Chapter 33: A Use Case . No notes for this chapter. Chapter 34: The Missing Chapter . 4 ways to package your application: . | Package by Layer . | traditional horizontal-layered application | layers only depend on lower adjacent layer | good way to start a project, but problems are 1) you probably need to increase modularizing 2) it doesn’t scream its architecture | . | Package by Feature . | switch from horizontal to vertical layering | closer to screaming architecture, but still problematic | . | Ports and Adapters . | like hexagonal, or boundaries, controllers, and entities architecture patterns | business-domain-focused code is independent and separate from technical implementation details such as frameworks and databases | inside contains domain concepts expressed in ubiquitous domain language, and the outside depends on the inside by never the other way around | . | Package by Component . | an additional way of packaging | bundle up business logic and persistence code into single element, which is a mechanism to enforce certain access schemes (i.e., a controller not accessing a persistence layer around the service layer) | . | . ",
    "url": "/notes/tech_books/clean-architecture#part-v-details",
    
    "relUrl": "/notes/tech_books/clean-architecture#part-v-details"
  },"228": {
    "doc": "Code",
    "title": "Code",
    "content": "Interactive Diagrams . Takes you from Morse code, to braille to boolean algebra and gates to relays and switches all the way to a working computer (Petzold uses as a base the Intel 8080, which was an 8 bit processor with 16 bits of addressable memory created in 1974). He takes you through base numbering like hexadecimal (base 16) and binary (base 2), and walks you through how you can perform arithmetic with these numbers. Lots of interesting stuff: . | hexadecimal, binary, decimal | boolean algebra | logic gates | how to add bits and how to represent negative numbers via twos complement | character encoding (e.g., ascii, latin-1, utf-8) | the architecture of computer systems, from primitive gates to registers, latches, flip flops, the ALU, and eventually the CPU, memory, and peripherals | as comprehensive a history lesson on the computer as you’ll find | electrical engineering | machine code and assembly code | QR codes and barcodes | braille and morse code | from relays to vacuums to transistors to integrated chips (all the ways of perform a switch based on voltage) | computer arithmetic and logic | . ",
    "url": "/notes/tech_books/code",
    
    "relUrl": "/notes/tech_books/code"
  },"229": {
    "doc": "Continuous Architecture In Practice",
    "title": "Continuous Architecture In Practice",
    "content": ". | Continuous Architecture In Practice . | 1: Why Software Architecture is More Important than Ever . | What is Architecture | Software Industry Today | Current Challenges with Software Architecture | Software Architecture in an Increasingly Agile World | Continuous Architecture | Continuous Architecture Benefits | . | 2: Architecture in Practice: Essential Activities . | Quality Attributes . | ATAM utility tree | . | Architectural Decisions . | Making and Governing Architectural Decisions | Architectural Decisions in Agile Projects | . | Technical Debt . | Capturing Technical Debt | . | Feedback Loops | Common Themes in Today’s Software Architecture Practice . | Principles as Architecture Guidelines | Team-Owned Architecture | Models and Notation | Design Patterns | . | . | 3: Data Architecture . | What is Data? . | Common Language | . | NoSQL and Polyglot Persistence | Scale and Availability | Event Sourcing | Data Ownership and Metadata | Data Integration | Data (Schema) Evolution | . | 4: Security as an Architectural Concern . | Security in an Architectural Context . | CIA triad | Shifting Security Left | . | Architecting for Security . | Threat Modelling | Threat Identification | Prioritizing Threats | . | Architectural Tactics for Mitigation . | Information Privacy and Integrity | Nonrepudiation | Availability | Secrets Management | Social Engineering Mitigation | Zero Trust Networks | . | . | 5: Scalability as an Architectural Concern . | Scalability in the Architectural Context . | What Changed: The Assumption of Scalability | Types and Misunderstandings of Scalability | The Effect of Cloud Computing | . | Architecting for Scalability: Architecture Tactics . | Caching for Scalability | Using Asynchronous Communications for Scalability | Stateful and Stateless Services | Microservices and Serverless Scalability | . | . | 6: Performance as an Architectural Concern . | Forces Affecting Performance | Architectural Concerns | Architecting for Performance . | Performance Modeling | Performance Testing | Tactics to Control Resource Demand-Related Forces | Tactics to Manage Resource Supply-Related Forces | Database Performance Tactics | . | . | 7: Resilience as an Architectural Concern . | Resilience in an Architectural Context . | Business Context | Availability Metrics | Resilient Organization | . | Architecting for Resilience . | Measurements and Learning | . | Architectural Tactics for Resilience . | fault recognition tactics | isolation tactics | protection tactics | mitigation tactics | . | Maintaining Resilience . | Operational Visibility | Testing for Resilience | Dealing with Incidents | . | . | 8: Software Architecture and Emerging Technologies . | Artificial Intelligence, Machine Learning, and Deep Learning . | Types of Machine Learning | Problems Solved by Machine Learning | . | Shared Ledger, Blockchain, and Distributed Ledger Technologies | . | Thoughts on the Book | . | . ",
    "url": "/notes/tech_books/continuous-architecture-in-practice",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice"
  },"230": {
    "doc": "Continuous Architecture In Practice",
    "title": "1: Why Software Architecture is More Important than Ever",
    "content": ". | goal of architecture is to deliver business value, but with increasing speed of delivery, architecture needs to change | demands from stakeholders have also increased, leading to practices of agile, continuous delivery, and DevOps | . What is Architecture . | Achieve quality attribute requirements for a software system . | things like scalability, security, performance, resiliency | . | Define the guiding principles and standards for a project or product and develop blueprints . | blueprints allow architecture to be abstracted for tech or business stakeholders | . | Build usable (and perhaps reusable) services . | defining good interfaces for services | . | Create a roadmap to an IT future state . | transition planning activities to create an IT blueprint | . | . | while architecture might be creating a blueprint up front, many large organizations eschew this as wasted effort because blueprints are hard to maintain and are useless if outdated | some orgs replace blueprints with standards and common services | . Software Industry Today . | Monolithic (1980s) . | large software stack on single machine provided by manufacturer | . | client/server, or distributed monolith (1990s) . | splitting application into tiers, meaning decisions started needing to be made about where business logic goes | . | Internet-connected (2000s) . | enhanced client/server, now quality attributes need to be considered | . | Internet &amp; Cloud Computing (2010s) . | rise of cloud computing and software and infra as a service | . | Intelligent Connected (2020s) | . | limitations of up front planning led to agile | historical challenges still remain . | achieving complex system attributes like resilience and security | meeting needs of stakeholders | ensuring technical cohesion across a large system | . | . Current Challenges with Software Architecture . | Focus on Tech Details Rather than Business Context . | gaining understanding of business and its needs not typically done | IT architects more comfortable solving technological problems than business ones | . | Perception of Architects not Adding Value . | architecture broken up into enterprise, solution, and application (system) | often enterprise architects aren’t close enough to problem domain to add actionable insights | . | Architectural Practices Might be Too Slow . | increased speed of feedback from stakeholders has come with need for increased speed of delivery | many architectural decisions are implicit in the software | many architectural practices are geared towards older systems of record rather than systems of engagement | many of the best architects are deeply involved in building process | . | Some Architects May be Uncomfortable with Cloud Platforms . | speed of movement means learning is constant and keeping up to date difficult | . | . Software Architecture in an Increasingly Agile World . | agile started with Extreme Programming (XP) in 1996 | in this model, no need for architects, because “the best architectures, requirements, and design emerge from self-organizing teams” (Agile Manifesto, Principle 11) | paved the way for emergent architecture, or architectures that in the aggregate exhibit properties beyond just individual parts | does not scale well for quality attributes, and tech debt and tech features often get deferred | Scaled Agile Framework (SAFe) - architectural runway, or long-term architectural plan | Large Scale Scrum (LeSS) framework | Disciplined Agile Deliver (DaD) | . Continuous Architecture . | Principle 1: Architect products; evolve from projects to products | Principle 2: Focus on quality attributes, not on functional requirements | Principle 3: Delay design decisions until they are absolutely necessary | Principle 4: Architect for change – leverage the “power of small” | Principle 5: Architect for build, test, deploy, and operate | Principle 6: Model the organization of your teams after the design of the system you are working on | . | the goal of continuous architecture is to speed up the software dev and delivery process by systematically applying an architecture perspective and discipline continuously throughout the process (15) | artifacts should be a means, not an end | . Continuous Architecture Benefits . | in the typical time, cost, and quality triangle, continuous architecture allows for balance of time and cost constraints while not sacrificing quality | most innovation teams focus on building an MVP, but when that needs to be turned into a production-grade software that leads to problems, sometimes a complete rewrite – continuous architecture tends to avoid this | . ",
    "url": "/notes/tech_books/continuous-architecture-in-practice#1-why-software-architecture-is-more-important-than-ever",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice#1-why-software-architecture-is-more-important-than-ever"
  },"231": {
    "doc": "Continuous Architecture In Practice",
    "title": "2: Architecture in Practice: Essential Activities",
    "content": ". | goal of architecture is to balance customer demand and delivery capacity to create a sustainable and coherent system | system should meet functional and quality attributes | historically, it was one all-seeing and wise individual doing architecture, but now we refer to “architecture work” and “architectural responsibility” | Fred Brookes in Mythical Man Month puts emphasis on conceptual integrity – can be achieved by close collaboration in a team | models, perspectives, views are valuable architectural artifacts, but are means to an end – to create a sustainable system | . Quality Attributes . functional requirements - describe the business capabilities that the system must provide and runtime behavior quality attributes (non-functional requirements - quality attributes a system must meet in delivering functional requirements, the so-called -ilities . | SQuaRe model comprises 8 quality characteristics - Functional Suitability, Performance Efficiency, Compatibility, Usability, Reliability, Security, Maintainability, Portability | ~10 quality attribute scenarios are manageable for a software system | architecturally significant - decisions which have most impact on architecture of the system | about balancing tradeoffs between functional and quality attributes | . ATAM utility tree . | tool for architecture trade-off analysis . | stimulus - what event triggers architectural scenario | response - how a system should be expected to respond | measurement - quantify the response to the stimulus | environment (optional) - the context in which the stimulus occurs | . | . Architectural Decisions . | typically, an architect would create a diagram and that would be called architecture | complex diagram has limited use, since it requires (1) explanation from the creator and (2) it can be hard to change | the architectural decision is the unit of work of an architect | . important facets of architectural decision: . | clearly articulate all constraints | focus on quality attributes, not functional requirements | all options considered and rationale need to be documented | tradeoff between options and effect on quality attributes considered | who made the decision and when | . Making and Governing Architectural Decisions . | the closer you get to implementation, the more decisions are made | . Guidelines . | main job of higher governance bodies is to define guidelines | the higher you go, the fewer principles there are | . Visibility . | create visibility of architectural decisions and circulate at all levels of the institution will minimize architectural compromises | creating a culture for sharing arch. decisions is difficult to realize, as it requires discipline, perseverance, and open communication | . Architectural Decisions in Agile Projects . | by clearly defining all known architectural decision, we create architectural backlog | taking a risk-based approach, you focus on architecturally significant scenarios | 50% of architecture is communication and collaboration | . Technical Debt . | metaphor for challenge caused by several short-term decisions resulting in long-term challenges | so widely used it is difficult to define | the focus on maintainability and evolvability is key to how to think about technical debt | if a system is not expected to evolve, concern with technical debt is minimal | . divide technical debt into three categories: . | code | architecture | production infrastructure | . Capturing Technical Debt . | a tech debt registry is a key artifact | . for each tech debt item, need to understand: . | consequences of not addressing | remediation approach for addressing tech debt item | . | need to agree on process for prioritization of tech debt, potentially basing on consequences of not resolving | need to ignore “technical purity” and focus on impact to business value | product owner decides what items should be prioritized | you can also carve out protected channel for tech debt | four main channels of work: 1) features 2) defects 3) technical debt 4) risk (security, compliance, etc.) | . Feedback Loops . | output of a process is fed back as an input into the same process | . key goal of agile and DevOps is: 1) to achieve greater flow of change 2) increasing the number of feedback loops 3) minimizing time between change happening and feedback being received . steps to implement a feedback loop: . | collect measurements - a small number of meaningful measurements | assess - multi-disciplinary group to analyze output of feedback | schedule incrementally - determine incremental change to arch. based on analysis | implement changes - back to step 1 | . | pair programming, unit tests, continuous integration, scrums, springs, demos are all tools for feedback loops . | fitness function - provides an objective integrity assessment of some architectural characteristics | continuous testing - implements a shift-left approach (push testing to the left), using an automated process to improve speed of testing – every component can be tested as soon as it is developed | . Common Themes in Today’s Software Architecture Practice . Principles as Architecture Guidelines . principles need to be . | clear - like slogans, easy to understand and remember | provide guidance for decisions | atomic - does not require any other context or knowledge | . Team-Owned Architecture . | star developers are hard to find | build effective teams in long run is more effective model | architecture is increasingly becoming a skill rather than role . | ability to design | leadership | stakeholder focus | ability to conceptualize and address systemwide concerns | life cycle involvement | ability to balance concerns | accountable for conceptual integrity of system | . | . Models and Notation . | communication is key, so plenty of time is spent discussing exact meaning of terms | UML developed to this pursuit | We cannot overcommunicate! | . keys to a model: . | simplicity | accessibility to target audience | consistency (in shapes and connections) | . Design Patterns . | patterns are helpful to communicate archetypes and understand tradeoffs | . ",
    "url": "/notes/tech_books/continuous-architecture-in-practice#2-architecture-in-practice-essential-activities",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice#2-architecture-in-practice-essential-activities"
  },"232": {
    "doc": "Continuous Architecture In Practice",
    "title": "3: Data Architecture",
    "content": ". | processing data is the reason information systems exist | . What is Data? . DIKW Pyramid . | data (what) is the bits and bytes we collect | information (what) is data structured so that i can be understood and processed | knowledge (how) comes from using the data and information to answer questions | wisdom (why) - a little more elusive but can be seen as uncovering connections in data, information, and knowledge | . Common Language . | having a well-defined and communicated data model is a pre-requisite for successful software dev | Domain-Driven Design - approach to that common language . | bounded context - subdomains that the larger domain split into, each with separate data model, definitions, relationships, and components | ubiquitous language - language used by dev team and business sponsors within a bounded context | . | build cohesive teams around components | helpful to use a language glossary | . NoSQL and Polyglot Persistence . polyglot persistence . | applying the right technology to address each of the different data access patterns required in a system | goes hand in hand with microservices, each component has its own persistence mechanism and shares data only via well-defined APIs | some problems with microservices: . | managing dependencies and interaction patterns can be tricky and high cognitive load | performance issues in all services communicating | each database tech requires specific expertise | . | . types of NoSQL storage: . | type | main differentiators (strengths) | limitations | typical application | examples | . | key-value | Scalability, availability, partition tolerance | Limited query functionality; cannot update part of the value separately | Storage of session data, chat room enablement, cache solutions | Memcached, Redis, Amazon Dynamo, Riak | . | document | Flexible data model, easy to develop with because data representation is close to code data structures; some have ACID capabilities | Analytic processing, time series analysis; cannot update part of the document separately | Internet of Things data capture, product catalogs, content management applications; changing or unpredictable structures | MongoDB, CouchDB, Amazon Document DB | . | wide column | Ability to store large datasets at high reads, scalability, availability, partition tolerance | Analytic processing, aggregation heavy workloads | Catalog searches, Time series data warehouses | Cassandra, HBase | . | graph | Relationship-based graph algorithms | Transactional processing, not easy to configure for scalability | Social networking, n-degree relationships | Neo4j, Amazon Neptune, Janus Graph, GraphBase | . | Lightweight Evaluation and Architecture Prototyping for Big Data (LEAP4PD) provides a good reference for evaluating data solutions | . Scale and Availability . | CAP thereom - distributed systems can only guarantee two of the three properties: consistency, availability, and partition tolerance . | most distributed systems provide partition tolerance, so choice between consistency (will the data returned be right) and availability (will query return answer) | eventual consistency - at some point in time in the future, the data will be right | . | PACELC - If a partition (P) occurs, a system must trade availability (A) against consistency (C). Else (E), in the usual case of no partition, a system must trade latency (L) against consistency (C) | . Event Sourcing . | common use of traditional database system is to maintain the state of an application (querying gives a consistent view of domain being represented) | event sourcing captures all events that go into system, so we can re-create state at any point | often used in conjunction qith Command Query Responsibility Segregation (CQRS) - one model to update info, another to read | . Data Ownership and Metadata . | important to understand which component is going to master (source of truth) the data | sharing data by reference means consuming services can’t update data (immutable) . | might lead to race conditions inherent in distributed data | also creates additional communications between components and increased read workload | . | . a case for increased metadata: . | sufficient metadata allows you to discover, integrate, and analyze data sources in an efficient manner | track data lineage and provenance | metadata is strong enabler of automating software dev and data management process like data pipelines | . Data Integration . two reasons for data integration . | business process - sharing data between components | analytics - move data from multiple sources to single component to facilitate analysis and monitoring | . REST (representational state transfer) . | relies on concept of resource (a data structure you can expect to be returned by a web endpoint) | move from a verb-centric view (get_customer_data, delete_invoice, etc) to a noun-centric view and rely on simple HTTP vers to act on your nouns | eliminates complext, centrally managed middleware | . Data (Schema) Evolution . | Postel’s Law - be conservative in what you do, liberal in what you accept – Tolerant Reader | Expand and Contract Pattern - expand to support both old and new version of schema, then, contract to support only new version | . ",
    "url": "/notes/tech_books/continuous-architecture-in-practice#3-data-architecture",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice#3-data-architecture"
  },"233": {
    "doc": "Continuous Architecture In Practice",
    "title": "4: Security as an Architectural Concern",
    "content": "Security in an Architectural Context . | it is important to involve security experts in your security work | making a system secure can have an impact on almost any other quality property | most quality attributes, like security, increase cost, so architectural decisions are about tradeoffs | modern security has changed to be internet security – most applications are no longer running in isolated data centers but in massive distributed cloud-based systems reasons for hostile security environment: | network-connected systems | large number of pro and amateur attackers | large amount of FOSS or external software in software supply chains | limited general security awareness | dark net packaging security exploits and attack mechanisms | . CIA triad . | Confidentiality - limiting access to those who are authorized to access it | Integrity - ensuring that only valid changes can be made to the system’s data and can only be initiated by authorized parties | Availability - ensuring that the system is available and can be accessed at all times . | from an arch perspective, need to understand requirements for CIA, threats system faces, and security mechanisms (people, processes, and technologies) to protect it | because most security attributes are what shouldn’t happen they are difficult to quantify | can use checklist approach, such as Open Web Application Security Project (OWASP) Application Security Verification Standard (ASVS) | . Shifting Security Left . | security should be part of entire system delivery life cycle in small frequent steps (“little and often”) | this is a principle of DevSecOps, to address security as early as possible | . Architecting for Security . | security threat - what could go wrong as result of a malicious actor who wants to attack system | . Threat Modelling . identifying things that can go wrong and working out mitigation . | understand what you are building, i.e., system boundaries, deployment platform, system structure | analyze what could go wrong and what security problems this could cause (two popular models - STRIDE and attack trees) | mitigate the security problems, typically using security tech like single sign-on, role-based access control, attribute-based access control, encryption, digital signatures, etc | validate by taking a step back and seeing what has been done so far, e.g., talking with experts, testing, etc. | . | keep incrementally threat modelling as you add features | . Threat Identification . STRIDE . | spoofing - impersonate a security identity | tampering - change data in a way that is not expected | repudication - bypass identity controls | information disclosure - access info without authorization | denial of service - preventing the system from being used | elevation of privilege - gaining security privs the attacker isn’t meant to have | . attack trees . | threat identification from the perspective of the attacker | root of the tree is goal attributed to attacker | each node is a strategy for achieving the goal | continue to decompose each node until leaf node represents a specific and credible attack on the system | can annotate with risk factors like impact, likelihood, difficulty, cost of attack, etc. | . Prioritizing Threats . | can use a simple classification system to prioritize threats | using Likert-scale of High, Medium, Low for likelihood and impact | not a science, but helpful in comparing opinions | if you think a threat is serious, it almost certainly is | keep it simple and focused on threats | other, more sophisticated threat modelling approaches: . | Process for Attack Simulation and Threat Analysis (PASTA) | Visual, Agile and Simple Threat (VAST) modeling method | Operationally Critical Threat, Asset, and Vulnerability Evaluation (OCTAVE) | MITRE’s Common Attack Pattern Enumeration and Classification (CAPEC) | National Institute of Standards and Technology (NIST) model | . | . Architectural Tactics for Mitigation . | Authentication - confirm the identity of the security principal | Authorization - control what actions security principal can perform and what info they have access to | Auditing - monitor use of sensitive info and sensitive actions to prove security mechanism is working | . Information Privacy and Integrity . information privacy - ability to reliably limit who can access data within a system or data passing between the system and other places information integrity - mitigation of tampering risks by preventing unauthorized security principals from changing info or authorized principals from changing data in an uncontrolled way . Nonrepudiation . nonrepudiation - mechanism to prevent security principals from denying their actions . | can be achieved by cryptographic signature for every action, or logging list of user actions in secure, tamper-resistant list | . Availability . | denial of service attacks and ransomware attacks are common | some methods to prevent: . | throttling incoming requests | quotas to prevent one request from overwhelming the system | local or cloud-based filters to exclude large requests | elastic infra to expand as needed | . | key tactic for mitigating ransomware is to prevent from happening in the first place | constant end-user education about phishing attacks, the most common attack vector for ransomware | . Secrets Management . three main parts to secrets management . | choosing good secrets | keeping them secret | changing them reliably | . | best approach is to use a dedicated and proven secrets manager | current view of experts, including NIST, is that you shouldn’t force passwords to be changed unless they are compromised, but you should change them immediately if they are | . Social Engineering Mitigation . | weakest link is typically humans interacting with the system | need limit access of each user to level of access required for their role | “four-eyes” approach, or two people to approve | . Zero Trust Networks . | historically, approach to securing systems was to use zones of trust, with level of trust increasing the further into the network you are . | Internet zone (area outside) | trusted zone (company’s own private network) | demilitarized zone (area between trusted and Internet) | privileged zone (area within trusted zone with especially sensitive information) | . | problem of this approach is that once a zone is breached, attacker has access to everything in that zone | new approach is zero trust networks, with it’s roots in Google’s BeyondCorp model . | need to validate trust relationships and assume that the network we use is hostile | . | . ",
    "url": "/notes/tech_books/continuous-architecture-in-practice#4-security-as-an-architectural-concern",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice#4-security-as-an-architectural-concern"
  },"234": {
    "doc": "Continuous Architecture In Practice",
    "title": "5: Scalability as an Architectural Concern",
    "content": ". | scalability can be defined as the property of a system to handle an increased workload by increasing the cost of the system | increased workload - higher transaction volumes or greater number of users | system combination of software and computing infrastructure, as well as human resources to operate | . Scalability in the Architectural Context . | scalability tactics used at large companies might not apply - need to be careful about too quickly scaling without understanding implications and understanding requirements | . What Changed: The Assumption of Scalability . | in the past, need to scale was lower in part because: . | business stakeholders expectations were lower | scaling was less possible due to physical constraints | scaling might not be needed because transactions were made through human intermediaries | . | monolithic arch. led to service-oriented arch, which led to microservice-based architecture enabled by cloud infrastructure | need for scaling increased as physical constraints disappeared and business requirements mandated it | we can think about scaling in a supply and demand framework, where increase in demand requires increase in supply, but if demand dries up, supply becomes wasted inventory | . Types and Misunderstandings of Scalability . | calling a system scalable is a common oversimplification - concept needs to be qualified | vertical scalability, or scaling up, is increasing size of machine . | expensive way of handling scaling but useful for scaling in-memory data structures | . | horizontal scaling, or scaling out, is increasing number of compute nodes for an application | . three approaches to scaling in increasing complexity: . | segregating incoming traffic by some sort of partition, similar to sharding (difference between partitioning and sharding is sharding implies separate machines while partitioning might occur on same machine) | cloning the compute servers and replicating databases, then distributing traffic via a load balancer | splitting the functionality of app into services and distributing services and their associated data to separate infra resource sets (such as containers) | . The Effect of Cloud Computing . | elastic scalability refers to scalability in the cloud key concerns: . | pay-per-use context, unused resources should be released (but not too quickly) | instantiating and releasing resources should be automated to keep cost of scalability as low as possible | . | some concerns are commercial cloud environments might have scalability limits | . Architecting for Scalability: Architecture Tactics . Caching for Scalability . 4 types of caches . | Database object cache - fetch results of database query and store in memory, e.g., Memcached, Redis, etc. | Application object cache - store result of a service (that typically is computationally heavy) | Proxy cache - used to cache retrieved Web pages on a proxy server | Precompute cache - stores the results of complex queries on a database node for later retrieval | . Using Asynchronous Communications for Scalability . | synchronous - code execution will block request until response is received | asynchronous - code execution will continue while waiting for response | synchronous is simpler and less costly to design and implement | smart endpoints and dumb pipes - Martin Fowler’s Microservices | . Stateful and Stateless Services . | a stateful service is on that needs additional data besides what is provided with the current request in order to successfully process the request | state might exist in the client (e.g., cookies), in the service instance, or outside the instance - only in the service instance is stateful | a stateless service does not need additional info beyond what is provided with the request payload | stateless services are easier to scale because they decouple data and compute – don’t need to worry that a particular compute node is pointed at the right data | can be difficult to implement stateless because engineers are used to working with stateful services, and dealing with user session data from stateless can be tricky (best approach might be to keep user session data small and cache to be accessible by any compute node) | . Microservices and Serverless Scalability . | for microservices, size isn’t as important as loose coupling, stateless design, and doing a few things well | serverless, of function as a service (FaaS) architecture, e.g., AWS Lambda, Google Cloud Functions, etc. | serverless usually increases dependency on cloud vendor | . ",
    "url": "/notes/tech_books/continuous-architecture-in-practice#5-scalability-as-an-architectural-concern",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice#5-scalability-as-an-architectural-concern"
  },"235": {
    "doc": "Continuous Architecture In Practice",
    "title": "6: Performance as an Architectural Concern",
    "content": ". | performance is about time and the software system’s ability to meet its timing requirements | it is also about management of systems resources in the face of particular types of demand to achieve acceptable timing behavior | typically measured in throughput and latency | “Performance can also be defined as the ability for a system to achieve its timing requirements using available resources, under expected full-peak load” | most systems have performance concerns; only systems with significantly variable workloads have scalability concerns | . Forces Affecting Performance . | one way to look at performance is as contention-based model – system’s performance determined by limiting constraints, such as operating environment | performance can be improved by controlling resource demand as well as managing resource supply | . Architectural Concerns . | how do we measure, using clear, realistic, and measurable objectives, timing and computational resources timing | measure timings from the end-user point of view . | response time/latency - how long to | turnaround time - time to complete a batch of tasks | throughput - amount of workload in a unit of time | . | . computational resources . | measure computational resources . | CPU usage | memory usage | disk usage | network usage | . | also, cost effectiveness not commonly measured as quality attribute, but almost always a factor to consider | . Architecting for Performance . | microservice architecture . | many architectures are moving to small, decoupled, single responsibility services | can lead to performance problems, as too many calls between services can lead to increased execution time | . | NoSQL Tech . | need to understand read and write patterns to choose appropriate NoSQL tech | choice of tech has large effect on performance of the system | . | Public/Commercial Clouds . | cloud provides important capabilities, such as pay-as-you-go, elasticity | performance is not just responsibility of cloud provider, as you need to build systems that can take advantage of these capabilities | also need to consider data locality (bring data to compute, or bring compute to data) | . | serverless architectures . | with serverless, engineers can ignore infrastructure – provisioning, scaling, etc. | you can also run app code from anywhere, e.g., edge servers close to end users, increasing performance and decreasing latency, but comes at a cost | . | . Performance Modeling . | a performance model provides estimate of how software system is likely to perform against different demand factors | allows you to estimate performance | you also need data capture and analysis model that enables you to refine model based on performance test results | . Performance Testing . | purpose of perf testing is to measure performance of software system under normal and expected max load | need to test in env that is as close as possible to prod | . different types of performance tests: . | normal load testing - expected normal load, test response time, responsiveness, turnaround time, throughput, and cloud infra resource utilization | expected max load - similar to normal, but under expected max load | stress testing - beyond max load, helps establish corner cases | . Tactics to Control Resource Demand-Related Forces . | reduce overhead - group smaller services into larger services | limit rates and resources - use resource governors and rate limiters | increase resource efficiency - code optimization in critical services | . Tactics to Manage Resource Supply-Related Forces . | increase resources - scale up or out | increase concurrency - process requests in parallel | use caching - use caching to reduce roundtrips to database | . Database Performance Tactics . | materialized views - a type of precompute cache, makes a physical copy of an input/output intensive query (typically with several joins) | indexes - add indexes to speed read queries – indexes add overhead to writes and require space on disk | data denormalization - store data that would otherwise be normalized across tables in single table, which would speed up read queries | . ",
    "url": "/notes/tech_books/continuous-architecture-in-practice#6-performance-as-an-architectural-concern",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice#6-performance-as-an-architectural-concern"
  },"236": {
    "doc": "Continuous Architecture In Practice",
    "title": "7: Resilience as an Architectural Concern",
    "content": ". | in the past, high-availability meant we accepted a certain amount of planned an unplanned downtime | now, approach is to aim for minimal downtime | . Resilience in an Architectural Context . | fault - an accidentla condition that may cause system to fail | failure - when a system or component deviates from required behavior | availability - measurable quality attribute of a system – ratio of time system is available to time it could be available | reliability - builds on availability and adds constraint of correct operations, “the probability of a failure-free software operation for a specified period of time in a specified environment” | high availability - tech that helps achieve availability, typically clustering or database replication | resilience - each part of a system be responsible for contributing to a system’s availability by adapting its behavior when faults occur; . | tolerating latency | retrying requests | automatically restarting processes | limiting error propagation, etc. | . | failure is inevitable, so need to build systems that provide service even when some part is malfunctioning | . four aspects to prevent failure: . | knowing what to do - what automated mechanisms and manual processes are needed and where, e.g., failover, shedding load, restarting | knowing what to look for - so we can monitor systems for events that threaten availability, e.g., hardware failures, software failures, etc. | knowing what has happened - so we can learn from experience, successes and failures | knowing what to expect - both backward looking info and forward looking predictions | . Business Context . | typically talk about number of 9’s of availability (5 9s, or 99.999% is 1 second unavailable per day) | . limited metric because: . | most situations, more is assumed to be better, but 5 9s is expensive and complex | practical differences between amount of 9s is basically zero for most businesses | these measures don’t consider timing of unavailability | . two types of systems: . | need to be available just about all the time | can tolerate longer periods of downtime | . Availability Metrics . | MTBF - mean time between failures - used for system function | MTTR - mean time to recovery - used for system function | RPO - recovery point objective - how much data can be recovered (in time) | RTO - recovery time objective - how long it takes to recover data . | minimizing time to recover is better than reducing time in between failures – leads to more availability and more resilience | . Resilient Organization . | competency of a resilient org is to know what has happened in past and learn from it things to think about re: learning . | although people want to share successes and failures, sometimes it just doesn’t happen, either because people don’t feel safe, or it isn’t highly prioritized | when engaged in retros, needs to be data-drive, otherwise retros are based in incomplete memories and opinions rather than facts | while a good retro might happen, needs to be grounded in action and plan to build long-term impact | . | a resilient organization works on resilience via people, processes, and tech to create culture and org that is resilient, not just the tech stack | . Architecting for Resilience . path to technical resilience: . | recognize problem to diagnose and take remedial action . | health checks, metric alerts | . | isolate problem so it doesn’t affect other parts of the system . | logical or physical separation in environments, fail fast | . | protect system components that might become overloaded . | controlled retries | . | mitigate the problem, preferably through automated means . | state replication, fault-tolerant request handling | . | resolve the problem by confirming mitigation is effective and complete or identifying further intervention . | controlled restarts, failover | . | . Measurements and Learning . | need to understand what is going on today, what happened in the past, and projecting what could happen | generate a stream of learning opportunities | embed measurement mechanisms into the system | analyze data regularly, ideally automatically | perform retrospectives on both good and bad periods | identify learning opportunities from data and retros | improve continuously and intentionally by building a learning culture | . Architectural Tactics for Resilience . fault recognition tactics . health checks - verify system is working, typically using synthetic transaction that mimics real load watchdogs and alerts - watchdog is a piece of software that looks for a specific condition then performs an action, typically an alert . isolation tactics . sync (RPC) vs. async (messages) - an async system is much more resilient than a sync one – faults propagate quickly bulkheads - conceptual idea to limit scope of a failure to a specific part of the system defaults and caches - use cache (or defaults as a rudimentary cache) to serve data even if system is down . protection tactics . back pressure - signal to callers that queue or message bus is full and to stop sending new requests until queue is clear load shedding - reject workload that can’t be processed or that would cause system to be unstable – a variant is throttling/rate limiting timeouts - define how long a caller should wait until caller should be notified that request failed circuit breakers - a state machine-based proxy that sits in front of service meant to “trip” if certain conditions (count of aggregate errors, e.g.,) are met . mitigation tactics . data consistency: rollback and compensation . | ACID transactions to ensure state of system is consistent | dealing with distributed transactions (across multiple systems), typical algorithm is two phase commit (2PC), which isn’t very performant | newer idea of compensating transactions or sagas, where if you have a sequence of, say, three writes that need to happen, each write is committed but if any fail, compensating transactions happen to the successful ones to revert state | . data availability: replication, checks, and backups . | replication can be used to mitigate node failure by ensuring data is immediately available on another node | checking involves checking both underlying storage mechanisms integrity and checking integrity of system data | backup ensures a copy of data is available in case of disaster | . Maintaining Resilience . Operational Visibility . | key to operational visibility is monitoring, usually thought of as metrics, traces, and logs | observability can be thought of as extending monitoring to provide insight into internal state of system to allow failure modes to be better predicted and understood | . Testing for Resilience . | chaos engineering - to introduce failures into system to check response | . Dealing with Incidents . | old way was Information Technology Infrastructure Library (ITIL) based service delivery management (SDM) | transitioned to devops, where team develop and operate (and mitigate incidents) effective incident response requires: . | well-structured, thoroughly rehearsed approach | well-defined roles, e.g., incident command, problem resolution, communications, etc. | effective, pre-agreed set of tools | well thought through approach to communication within resolution team and outwards | . | . ",
    "url": "/notes/tech_books/continuous-architecture-in-practice#7-resilience-as-an-architectural-concern",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice#7-resilience-as-an-architectural-concern"
  },"237": {
    "doc": "Continuous Architecture In Practice",
    "title": "8: Software Architecture and Emerging Technologies",
    "content": ". | benefit of architecture-led aproach when team uses emerging tech is architecture can be used to plan and communicate with stakeholders | sound planning and clear communication reduce implementation and tech risk | new tech is risk, and concentration should be on reducing risk | . Artificial Intelligence, Machine Learning, and Deep Learning . | artificial intelligence - intelligence demonstrated by machines by imitating thinking funcitons associated with human brain, e.g., learning and problem solving | machine learning - augmenting software systems with statistical models to perform specfic task without explicit instructions | deep learning - subset of machine learning that uses artificial neural networks | . Types of Machine Learning . | supervised learning - use labeled training datasets to learn model parameters to perform classification (divide input into two or more classes) of operational datasets | unsupervised learning - finding structure in datasets consisting of input data without labelled responses | reinforcement learning - computer interacts with a dynamic environment in which a certain goal must be attained (driving a car, winning a game, etc.) | . Problems Solved by Machine Learning . | document classification | chatbots and conversational interfaces for customer service | data entry | advanced analytics . | architectural concerns for training and deploying ML models are provenance of data, observability of ML task performance, metadata management, security, explainability (results make sense to humans) | . Shared Ledger, Blockchain, and Distributed Ledger Technologies . | shared ledger - a comprehensive record of transactions, info, or events that are replicated, shared, and synchronized across multiple, sites, countries, or institutions | blockchain - secure and immutable list of blocks of information, each containing a cryptographic hash of the previous block, a timestamp, and a transaction | distributed ledger - a shared ledger that is maintained by multiple parties | . problems solved by shared ledger: . | clearing and settlements of security trades | international payments | anti-money laundering | verifying customer identity | insurance | trade finance . | often, use cases that supposedly require a shared ledger might be better served by a distributed database | . ",
    "url": "/notes/tech_books/continuous-architecture-in-practice#8-software-architecture-and-emerging-technologies",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice#8-software-architecture-and-emerging-technologies"
  },"238": {
    "doc": "Continuous Architecture In Practice",
    "title": "Thoughts on the Book",
    "content": "Most problems in technology are really communication problems. Most architecture problems then are ones of consensus; agreement between institutions and factions within an organization, between product, tech, the dev teams, that one dev manager who was a dev and was a MySQL pro who hasn’t met a solution that MySQL couldn’t answer. Building that consensus means you rarely arrive at a technically pure solution, one that meets all use cases optimally. There are just too many competing forces, often too much institutional inertia or too much tapering interests in projects that take longer than a 3 month program increment. This book attempts to define a language we can use when talking about architecture. What does scalability, or security, or performance really mean outside of the buzzwordy, euphemistic way the terms can be bandied about. One who is fulfilling the competencies of an architect then can use this language to build consensus, to get the sort of buy-in that is required for doing anything in the complicated ecosystems of today’s enterprises. If you can agree that performance, or scalability can be reduced down to a series of quantifiable stimulus, response, and measurement triads, then picking the tech stack to meet those use cases is an implementation detail. This book is an argument for “continuous architecture”, building off the iterative and continuous delivery of software we have seen with the Agile and DevOps movements over the last ten years and staking out arguments for what a continuously delivered architecture looks like within that framework. The “in practice” part refers as much to the recurring case study of a trade finance system the book has threading through each chapter as it does to an emphasis on the process and people edges of the PPT framework. So many book reviews of tech books hinge on whether or not the reader already knows what’s in the book. A book is either castigated as a beginner sampler, or as reductive to the topics it addresses. I think in the case of this book, it isn’t attempting to tread new ground but to build a ubiquitous language of architectural concerns. It breaks down topics and provides mini-frameworks for how to talk about them, giving you predominant trends and implementations within a given quality concern. Sure, after reading this books trim 268 pages you won’t be ready to implement a microservice architecture, but you’ll know the questions to ask, where to start, and what to concentrate on. And that is the strength of this book. It provides scaffolding for how to think about architecture, outlining 6 principles ((1)Architect products; evolve from projects to products, (2) Focus on quality attributes, not on functional requirements, (3) Delay design decisions until they are absolutely necessary, (4) Architect for change – leverage the “power of small”, (5) Architect for build, test, deploy, and operate, and (6) Model the organization of your teams after the design of the system you are working on), and harkening back to them constantly. Each quality attribute that the book addresses will reference these principles, providing a metronome-like repetition drill. The book serves as as good as any an entry point for introduction into the increasingly diffuse competencies of an architect, and while I skipped their initial book about continuous architecture, I found this one to be an effective tool in building out my mental model of architecture. ",
    "url": "/notes/tech_books/continuous-architecture-in-practice#thoughts-on-the-book",
    
    "relUrl": "/notes/tech_books/continuous-architecture-in-practice#thoughts-on-the-book"
  },"239": {
    "doc": "Data Mesh: Delivering Data-Driven Value at Scale",
    "title": "Data Mesh: Delivering Data-Driven Value at Scale",
    "content": ". | What is Data Mesh? | Data Principles . | Domain-Oriented Ownership | Data as a Product | Self-Serve Data Platform | Federated Computational Governance | . | Why Data Mesh? | Progression of Data Architecture | How to Design Data Mesh . | Data Mesh Architectural Components | Data Product Affordances | Getting Started with Data Mesh | Changing Culture | . | . ",
    "url": "/notes/tech_books/data-mesh",
    
    "relUrl": "/notes/tech_books/data-mesh"
  },"240": {
    "doc": "Data Mesh: Delivering Data-Driven Value at Scale",
    "title": "What is Data Mesh?",
    "content": ". | Data mesh is a decentralized sociotechnical approach to share, access, and manage analytical data in complex and large-scale environments—within or across organizations | data mesh looks to achieve these outcomes: . | Respond gracefully to change: a business’s essential complexity, volatility, and uncertainty | Sustain agility in the face of growth | Increase the ratio of value from data to investment1 | . | . organizational shifts required: . Data Mesh Model . | data mesh focuses on analytical data, as opposed to operational data | operational data is “data on the inside”, private data of application | . ",
    "url": "/notes/tech_books/data-mesh#what-is-data-mesh",
    
    "relUrl": "/notes/tech_books/data-mesh#what-is-data-mesh"
  },"241": {
    "doc": "Data Mesh: Delivering Data-Driven Value at Scale",
    "title": "Data Principles",
    "content": "Interplay of Four Principles . Domain-Oriented Ownership . | underpinned by domain-driven design to find seams of organizational units to decompose data | domain is a sphere of knowledge, influence, or activity | bounded context - delimited applicability of a particular model that gives team members a clear and shared understanding of what has to be consistent and what can develop independently | context mapping - define relationship between bounded contexts/independent models | . three types of domain data . | Source-aligned domain data . | Analytical data reflecting the business facts generated by the operational systems (native data product) | . | Aggregate domain data . | Analytical data that is an aggregate of multiple upstream domains. | . | Consumer-aligned domain data . | Analytical data transformed to fit the needs of one or multiple specific use cases (fit-for-purpose domain data) | . | . Exposing analytical data directly from the operational database is an antipattern . | work with multiple models of shared entities rather than single source of truth, which is expensive and impediment to scale | In data mesh, a data pipeline is simply an internal implementation of the data domain and is handled internally within the domain. It’s an implementation detail that must be abstracted from outside of the domain (26) | . Data as a Product . | successful products have three common characteristics: they are feasible, valuable, and usable (from INSPIRED by Marty Cagan) | product thinking to internal technology begins with establishing empathy with internal consumers (i.e., fellow developers), collaborating with them on designing the experience, gathering usage metrics, and continuously improving the internal technical solutions over time to maintain ease of use (31) | . baseline usability attributes of data product . discoverable . data product itself intentionally provides discoverability information . addressable . provides a permanent and unique address to data user to programmatically or manually access . understandable . data product provides semantically coherent data with specific meaning . trustworthy &amp; truthful . data product represents facts of business properly; need to know how closely data reflects reality of events that have happened SLOs: . | Interval of change: How often changes in the data are reflected | Timeliness: The skew between the time that a business fact occurs and becomes available to the data users | Completeness: Degree of availability of all the necessary information | Statistical shape of data: Its distribution, range, volume, etc. | Lineage: The data transformation journey from source to here | Precision and accuracy over time: Degree of business truthfulness as time passes | Operational qualities: Freshness, general availability, performance | . natively accessible . | a data product needs to make it possible for various data users to access and read its data in their native mode of access | . interoperable . | The key for an effective composability of data across domains is following standards and harmonization rules that allow linking data across domains | . Some things to standardize . | Field type: A common explicitly defined type system | Polysemes identifiers: Universally identifying entities that cross boundaries of data products | Data product global addresses: A unique global address allocated to each data product, ideally with a uniform scheme for ease of establishing connections to different data products | Common metadata fields: Such as representation of time when data occurs and when data is recorded | Schema linking: Ability to link and reuse schemas—types—defined by other data products | Data linking: Ability to link or map to data in other data products | Schema stability: Approach to evolving schemas that respects backward compatibility | . valuable on its own . | data product should be valuable without needing to be correlated or joined with other data products | . secure . | Data users access a data product securely and in a confidentiality-respecting manner. Data security is a must. | Access control: Who, what, and how data users—systems and people—can access the data product | Encryption: What kinds of encryption—on disk, in memory, or in transit—using which encryption algorithm, and how to manage keys and minimize the radius of impact in case of breaches | Confidentiality levels: What kinds of confidential information, e.g., personally identifiable information, personal health information, etc., the data product carries | Data retention: How long the information must be kept | Regulations and agreements: GDPR, CCPA, domain-specific regulations, contractual agreements | . two new roles needed for data mesh . | data product developer: responsible for developing, serving, and maintaining domain data products | data product owner: accountable for success of domain’s data products in delivering value, growing data users, and maintaining life cycle of data products | . | reframe receiving upstream data from ingestion to consumption – data is served already cleaned and processed | success is measured through the value delivered to the users and not its size | . Self-Serve Data Platform . The data platform is: . A collection of interoperable domain-agnostic services, tools, and APIs that enable cross-functional domain teams to produce and consume data products with lowered cognitive load and with autonomy. The main responsibility of the data mesh platform is to enable existing or new domain engineering teams with the new and embedded responsibilities of building, sharing, and using data products end to end; capturing data from operational systems and other sources; and transforming and sharing the data as a product with the end data users. | platform is used as shorthand for set of underlying data infrastructure capabilities – doesn’t mean single solution or single vendor | . shift how we talk about data platform . | accommodate generalists (T shape, paint drip) rather than current industry requirement of specialists | . key downsides of current data platform thinking . | cost is estimated and managed monolithically, not per isolated domain resources | security and privacy management assume physical resources are shared under same account and don’t scale to isolated security context per data product | A central pipeline (DAG) orchestration assumes management of all data pipelines centrally, which conflicts with independent pipeline | . data platform objectives: . | enable autonomous teams to get value from data - platform enables product developer to concentrate on domain-specific aspects of data product development | exchange value with autonomous and interoperable data products - mesh becomes organizational data marketplace | accelerate exchange of value by lowering the cognitive load - abstracting complexity; should be able to declare structure of data, retention period, potential size, etc. – remove human intervention and manual steps | scale out data sharing - embrace Unix philosophy | support a culture of embedded innovation - rapidly building, testing, and refining ideas; need to free people from unnecessary work and accidental complexity | . how to transition to self-servce data mesh platform . | design APIs and protocols first - start with interfaces platform exposes to its users | prepare for a generalist approach - favor platform tech that fits better with natural style of programming (not something that creates another DSL) | do an inventory and simplify - take a look at what you already have | create higher-level APIs to manage data products - platform must introduce higher level of APIs that deal with data product as an object | build experiences, not mechanisms - shift articulation of platform from mechanisms it includes to the experiences it enables | begin with simplest foundation, then harvest to evolve - data platform is emergent, designed and brought to life incrementally by many | . Federated Computational Governance . Federated and computational governance is a decision-making model led by the federation of domain data product owners and data platform product owners, with autonomy and domain-local decision-making power, while creating and adhering to a set of global rules . Apply Systems Thinking to Data Mesh Governance . | data mesh requires a governance model that embraces systems thinking. Systems thinking, as described by Peter Senge, is the discipline of “seeing the whole,” shifting our focus “from parts to the organization of parts, recognizing interaction of the parts are not static and constant, but dynamic processes.” | mesh is more than the sum of its parts | the art of governing a data mesh ecosystem is in maintaining an equilibrium between local (domain) optimization and global (the mesh) optimization | need to continuously adjust behavior using leverage points (small change lead to large shift in behavior) and feedback loops (system structures that either balance or reinforce a change in state of system) | embrace dynamic topology as default state | utilize automation and distributed architecture | . Apply Federation to the Governance Model . Federated Team - team that decides policies implemented, how platform supports these policies computationally, how data products adopt policies . | created of domain representatives, data platform representatives, subject matter experts, and facilitators and managers | . Guiding Values - clarity on value system that guides how decisions are made . | localize decisions and responsibility close to the source | identify cross-cutting concerns that need a global standard | globalize decisions that facilitate interoperability | identify consistent experiences that need a global standard | execute decisions locally | . Policies - output of a system governance, between local and global effect . Incentives - what incentives to use to motivate as leverage points, can be local or global . Apply Computation to the Governance Model . Standards as Code behavior, interfaces, and data structure that is expected to be implemented in a consistent way across all data products . | data product discovery and observability interfaces | data product data interfaces | data and query modeling language | lineage modeling | polysemes identification modeling | . Policies as Code . | data privacy and protection | data localization | data access control and audit | data consent | data sovereignty | data retention | . Automated Tests Automated Monitoring . data mesh governance heavily relies on embedding the governance policies into each data product in an automated and computational fashion. This of course heavily relies on the elements of the underlying data platform, to make it really easy to do the right thing. The continuous need for trustworthy and useful data across multiple domains to train ML-based solutions will be the ultimate motivator for the adoption of data mesh governance and doing the right thing. ",
    "url": "/notes/tech_books/data-mesh#data-principles",
    
    "relUrl": "/notes/tech_books/data-mesh#data-principles"
  },"242": {
    "doc": "Data Mesh: Delivering Data-Driven Value at Scale",
    "title": "Why Data Mesh?",
    "content": ". | great expectations of data - diverse and wide applications of ML and analytics | great divide of data - complexity risen from fragmentation of operational and analytical data | scale - large scale data source proliferation | business complexity and volatility - continuous change and growth of business | discord between data investments and returns - expensive data solutions lacking impact | . Data mesh learns from the past solutions and addresses their shortcomings. It reduces points of centralization that act as coordination bottlenecks. It finds a new way of decomposing the data architecture without slowing the organization down with synchronizations. It removes the gap between where the data originates and where it gets used and removes the accidental complexities—aka pipelines—that happen in between the two planes of data. Data mesh departs from data myths such as a single source of truth, or one tightly controlled canonical data model. ",
    "url": "/notes/tech_books/data-mesh#why-data-mesh",
    
    "relUrl": "/notes/tech_books/data-mesh#why-data-mesh"
  },"243": {
    "doc": "Data Mesh: Delivering Data-Driven Value at Scale",
    "title": "Progression of Data Architecture",
    "content": "First Generation: Data Warehouse Architecture . | Extracted from many operational databases and sources | Transformed into a universal schema—represented in a multidimensional and time-variant tabular format | Loaded into the warehouse tables | Accessed through SQL-like queries | Mainly serving data analysts for reporting and analytical visualization use cases | . Second Generation: Data Lake Architecture . | introduced in 2010 as response to challenge of data warehouse in satisfying data scientists who wanted data in original format | Data is extracted from many operational databases and sources. | Data represents as much as possible of the original content and structure. | Data is minimally transformed to fit the popular storage formats, e.g., Parquet, Avro, etc. | Data—as close as possible to the source schema—is loaded to scalable object storage. | Data is accessed through the object storage interface—read as files or data frames, a two-dimensional array-like structure. | Data scientists mainly access the lake storage for analytical and machine learning model training. | Downstream from the lake, lakeshore marts are created as fit-for-purpose data marts. | Lakeshore marts are used by applications and analytics use cases. | Downstream from the lake, feature stores are created as fit-for-purpose columnar data modeled and stored for machine learning training. | . Third Generation: Multimodel Cloud Architecture . | Support streaming for near real-time data availability with architectures such as Kappa. | Attempt to unify batch and stream processing for data transformation with frameworks such as Apache Beam. | Fully embrace cloud-based managed services and use modern cloud-native implementations with isolated compute and storage. They leverage the elasticity of the cloud for cost optimization. | Converge the warehouse and lake into one technology, either extending the data warehouse to include embedded ML training, or alternatively building data warehouse integrity, transactionality, and querying systems into data lake solutions. | . Characteristics of Current Data Architecture . | monolithic architecture - 1) ingest data, 2) cleanse enrich and transform data, and 3) serve data | monolithic technology | monolithic organization - central data team, conway’s law | centrally owned | technically partitioned (rather than domain partitioned) – partitioning is orthogonal to axes of change and slows releases | . ",
    "url": "/notes/tech_books/data-mesh#progression-of-data-architecture",
    
    "relUrl": "/notes/tech_books/data-mesh#progression-of-data-architecture"
  },"244": {
    "doc": "Data Mesh: Delivering Data-Driven Value at Scale",
    "title": "How to Design Data Mesh",
    "content": "Data Mesh Architectural Components . Domain . | Systems, data products, and a cross-functional team aligned to serve a business domain function and outcomes and share its analytical and operational capabilities with the wider business and customers. | This is a well-established concept. | . Domain analytical data interfaces . | Standardized interfaces that discover, access, and share domain-oriented data products. | At the time of writing, the implementation of these APIs is custom or platform specific. | The proprietary platforms need to offer open interfaces to make data sharing more convenient and interoperable with other hosting platforms. | . Domain operational interfaces . | APIs and applications through which a business domain shares its transactional capabilities and state with the wider organization. | This concept has mature implementations. | It is supported by de facto standards such as REST, GraphQL, gRPC, etc. | . Data (product) quantum . | Data product implemented as an architecture quantum that encapsulates all the structural components it needs to do its job —- code, data, infrastructure specifications, and policies. | It is referred to in architectural discussions. It is used interchangeably with data products. | At the time of writing this is an experimental concept with custom implementations. | . Data (product) container . | A mechanism to bundle all the structural components of a data product, deployed andmrun as a single unit with its sidecar. | At the time of writing this is an experimental concept with custom implementations. | . Data product sidecar . The accompanying process to the data product. It runs with the context of a data product container and implements cross-functional and standardized behaviors such as global policy execution. | At the time of writing this is an experimental concept with custom implementations. | . Input data port . | A data product’s mechanisms to continuously receive data from one or multiple upstream sources. | At the time of writing this has custom implementations with existing event streaming and pipeline management technologies. | . Output data port . | A data product’s standardized APIs to continuously share data. | At the time of writing this has vendor-specific custom implementations. | A mature implementation of the concept requires open data sharing standards with support for multiple modes of access to temporal data. | . Discovery and Observability APIs . | A data product’s standard APIs to provide discoverability information —- to find, address, learn, and explore a data product—and observability information such as lineage, metrics, logs, etc. | At the time of writing custom implementations of these APIs have been built. | A mature implementation requires open standards for discoverability and observability information modeling and sharing. Some standards are currently under development. | . Control port . | A data product’s standard APIs to configure policies or perform highly privileged governance operations. | At the time of writing this concept is experimental. | . Platform plane . | A group of self-serve platform capabilities with high functional cohesion surfaced through APIs. | This is a general concept and well established. | . Data infrastructure utility plane . | Atomic services to provision and manage physical resources such as storage, pipeline orchestration, compute, etc. | At the time of writing the services that constitute the infrastructure plane are mature and provided by many vendors with support for automated provisioning. | . Data product experience plane . | Higher-level abstraction services that operate directly with a data product and enable data product producers and consumers to create, access, and secure a data product, among other operations that run on a data product. | At the time of writing, custom implementation of services constituting a data product experience plane has been implemented. No reference implementation publicly exists. | . Mesh experience plane . | Services that operate on a mesh of interconnected data products such as searching for data products and observing the data lineage across them. | At the time of writing, custom implementations of some of the services constituting a mesh experience plane, such as discovery and search services, have been implemented. No reference implementation publicly exists. | . Data Plane User Journeys/Personas . | data product developers - from generalist developers to specialist data engineers who 1) incept, explore, bootstrap, and source, 2) build, test, deploy and 3) maintain, evolve, and retire a data product | data product consumers - they need access and use data to do their job | data product owners - responsible for delivering and evangelizing successful data products for their specific domains | data governance members - have a collective set of responsibilities to assure the optimal and secure operation of the mesh as a whole | data platform product owner - responsible for delivering the platform services as a product with the best user experience | data platform developers - build and operate the data platform (as well as use it) | . Data Product Affordances . The term affordance refers to the relationship between a physical object and a person (or for that matter, any interacting agent, whether animal or human, or even machines and robots). An affordance is a relationship between the properties of an object and the capabilities of the agent that determine just how the object could possibly be used. A chair affords (“is for”) support and, therefore, affords sitting. Most chairs can also be carried by a single person (they afford lifting), but some can only be lifted by a strong person or by a team of people. If young or relatively weak people cannot lift a chair, then for these people, the chair does not have that affordance, it does not afford lifting. The presence of an affordance is jointly determined by the qualities of the object and the abilities of the agent that is interacting. This relational definition of affordance gives considerable difficulty to many people. We are used to thinking that properties are associated with objects. But affordance is not a property. An affordance is a relationship. Whether an affordance exists depends upon the properties of both the object and the agent. | affordances can be thought of as properties of the data product | . | design for change - data products need to respond gracefully to change | design for scale - data product must result in a scale-out mesh | design for value - data product must put delivering value to its consumers with the least amount of friction at its heart | . | there is no central orchestrator of pipelines, aware of global configuration – for globalized behavior the sidecar pattern is used | . Serve Data . | The data product shares immutable and bitemporal data, available through clearly defined read-only interfaces supporting multiple modes of access. | The data product affords a diverse set of data product users to access data for training machine learning models, generating reports, data analysis and exploration, and building data-intensive applications. | It does not afford transactional and operational applications that require updating or deleting data to maintain their current state. | . Consume Data . | The data product consumes data from upstream sources of a variety of types. | The data product affords consuming data from its collaborating operational application, other data products, or external systems. | The data product only affords consuming data from the sources it identifies and configures through the platform. | It does not afford consuming data from sources it does not identify and configure. | . Transform Data . | The data product processes and transforms input data into new data that it then serves. | The data product affords data product developers with multiple modes of transformation computation. | The transformation can be program code, a machine learning model, or a complex query running inference. | The transformation can generate new data or remodel or improve the quality of input data. | . Discover | Understand | Explore | Trust . | The data product serves APIs and information that affords data product users to discover, explore, understand, and trust it. | data quality metrics – not to signal data is good or bad, just useful to communicate threshold of guarantees . | accuracy - how closely the data represents the true value of the attribute in the real-world context | completeness - the degree of data representing all properties and instances of the real-world context | consistency - the degree of data being free of contradicitons | precision - the degree of attribute fidelity | . | . Compose Data . | The data product affords data product users to compose, correlate, and join its data with other data products. | The data quantum affords programmatic data composability by performing set (table or graph) operations computationally. | The data product does not afford data composability to systems that demand a single and tightly coupled data schema (e.g., SQL schema) shared across multiple data products. | . Manage Life Cycle . | The data product affords data product users to manage its life cycle. | It provides a set of build-time and runtime configuration and code so that data product developers can build, provision, and maintain it. | . Observe | Debug | Audit . | The data product affords data product users to monitor its behavior, debug its issues, and audit it. | It provides programmatic APIs to provide the necessary information such as data processing logs, lineage, runtime metrics, and access logs. | use cases for observability via logs, traces, and metrics: . | monitor the operational health of the mesh | debug and perform postmortem analysis | perform audits | understand data lineage | . | . Govern . | The data product affords data users (governance group, data product developers) and the mesh experience plane (administrative and policy controls) a set of APIs and computational policies to self-govern its data. | It enables the build-time configuration of its governing policies and runtime execution of them at the point of access to data, read or write. For example, it maintains data security by controlling access to its data and protects privacy and confidentiality through encryption. | . Getting Started with Data Mesh . | organizational complexity - orgs that experience scale and complexity where existing data warehouse or lake solutions are blockers | data-oriented strategy - orgs planning to get value from data at scale | executive support - demands motivating the org to change how people work | data technology at core - orgs that use data and AI as a competitive advantage | early adopter - demand spirit of experimentation, taking risks, failing fast, learning, and evolving | modern engineering - tech that enforce centralized data modeling, control, storage don’t lend themselves well to data mesh | domain-oriented organization - tech organized around business domains | long-term commitment - adoption of data mesh is a transformation and a journey . | data mesh requires transformational change as a component of a larger data strategy business-driven execution has benefits: . | continuous delivery and demonstration of value and outcome | rapid feedback from the consumers | reducing waste - create only whats needed | . | . challenges: . | building point-in-time solutions - might develop platform capabilities that are not extensible | delivering to tight business deadlines | project-based budgeting - projects as sole source of investment for building platform services | . guidelines for business-driven execution . | start with complementary use cases - allows avoiding point solutions | know and prioritize the data consumer and provider personas | start with use cases that have minimal dependencies on the platform’s missing features | create long-term ownership and budgeting for platform services and data products | . | works best as a multi-phase evolution, built iteratively (avoid rigid up-front plans) | use fitness functions to measure evolution towards goal | fitness function - an objective function used to summarize how close a prospective design solution is to achieving its set aims. | . Changing Culture . | Deploy a movement-based organizational change – start small and move fast to show value, get buy-in, and gather momentum toward a sustainable and scaled change | . ",
    "url": "/notes/tech_books/data-mesh#how-to-design-data-mesh",
    
    "relUrl": "/notes/tech_books/data-mesh#how-to-design-data-mesh"
  },"245": {
    "doc": "Designing Data Intensive Applications",
    "title": "Designing Data Intensive Applications",
    "content": ". | Chapter 1: Reliable, Scalable, and Maintainable Applications . | Reliability | Scalability | Maintainability | Chapter Summary | . | Chapter 2: Data Models and Query Languages . | Relational Model | Document Model | Graph Model | Relational vs Document | Query Languages | Chapter Summary | . | Chapter 3: Storage and Retrieval . | Indexes | Transactions vs Analytics | Data Warehouses and Column-Oriented Storage | Chapter Summary | . | Chapter 4: Encoding and Evolution . | Formats for Encoding Data | Modes of Dataflow . | Dataflow through Databases | Dataflow through Services: REST and RPC | Dataflow though async messages | . | Chapter Summary | . | Chapter 5: Replication . | Leader-based replication | Multi-Leader Replication | Leaderless Replication | Chapter Summary | . | Chapter 6: Partitioning . | Partitioning of Key-Value Data | Partitioning &amp; Secondary Indexes | Rebalancing Partitions | Request Routing | Chapter Summary | . | Chapter 7: Transactions . | What is a Transaction? | ACID | Weak (Non-Serializable) Isolation Levels . | Read Committed | Snapshot Isolation and Repeatable Read | . | Serializability . | Actual Serial Execution | Two-Phase Locking (2PL) | Serializable Snapshot Isolation (SSI) | . | Chapter Summary | . | Chapter 8: The Trouble with Distributed Systems . | Faults and Partial Failures | Unreliable Networks | Unreliable Clocks | Chapter Summary | . | Chapter 9: Consistency and Consensus . | Consistency Guarantees | Linearizability | Ordering Guarantees | Distributed Transactions and Consensus | Chapter Summary | . | Chapter 10: Batch Processing . | Batch Processing with Unix Tools | MapReduce and Distributed Filesystems | Beyond MapReduce | Chapter Summary | . | Chapter 11: Stream Processing . | Transmitting Event Streams | Databases and Streams | Processing Streams | Chapter Summary | . | Chapter 12: The Future of Data Systems . | Data Integration | Unbundling Databases | Aiming for Correctness | . | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications"
  },"246": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 1: Reliable, Scalable, and Maintainable Applications",
    "content": " ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-1-reliable-scalable-and-maintainable-applications",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-1-reliable-scalable-and-maintainable-applications"
  },"247": {
    "doc": "Designing Data Intensive Applications",
    "title": "Data Systems",
    "content": "We can group data components (databases, caches, queues, etc.) under the umbrella of data systems instead of as separate components because . | many new systems have emerged that blur the typical line (Kafka, Redis) | many use cases are covered by stitching together data components with application code | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#data-systems",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#data-systems"
  },"248": {
    "doc": "Designing Data Intensive Applications",
    "title": "Three concerns for software systems",
    "content": ". | Reliability . | The system should continue to work correctly even in the face of adversity | . | Scalability . | As the system grows, there should be reasonable ways of dealing with growth | . | Maintainability . | Over time, many different people will work on the system, and they should all be able to work on it productively | . | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#three-concerns-for-software-systems",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#three-concerns-for-software-systems"
  },"249": {
    "doc": "Designing Data Intensive Applications",
    "title": "Reliability",
    "content": ". | Things that can go wrong are called faults, and a system that can withstand them is fault-tolerant or resilient | fault: component of system deviates from spec | failure: (different from a fault) when the system stops providing the required service to a user | we generally prefer tolerating faults over preventing faults | . Types of Faults . Hardware Faults . | e.g. hard disks crash, RAM becomes faulty, etc . | hard disks have a mean time to failure (MTTF) of about 10 to 50 years | typically we can add redundancy to a system or individual components by adding additional hardware (additional machines, backup generators, etc) | move toward systems that can tolerate loss of entire machines (Netflix’s Chaos Engine takes machines offline to test recovery) | . | . Software Faults . | systematic error within system | lots of small things can help minimize software faults: thinking about assumptions and interactions, process isolation, data observation | . Human Errors . | might be leading cause of errors | mitigating design choices can be: . | build well-designed abstractions, APIs, and admin interfaces, make it easy to ‘do the right thing’ | use fully featured sandbox environments | test thoroughly at all levels (unit tests, whole-system integration tests, manual tests) | make recovery quick and easy | build detailed and clear monitoring (telemetry) | . | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#reliability",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#reliability"
  },"250": {
    "doc": "Designing Data Intensive Applications",
    "title": "Scalability",
    "content": "the term we use to describe a system’s ability to cope with increased load . Describing Load . | load on a system can be described with a few numbers which we call load parameters | the best choice of load parameters depends on architecture of your system: could be requests/second, or ratio of reads/writes to a database | fan-out: in transaction processing systems, describes the number of requests to other services that we need to make in order to serve one incoming request | . Describing Performance . | when you increase load parameters: . | and keep system resources the same, how is performance affected | how much do you need to increase resources to keep performance the same | . | in batch processing systems (like Hadoop) we care about throughput | in online systems, we care about response time | latency: time request is waiting to be handled | response time: total time a client sees, so time to process (service time), queuing delays, etc | measuring performance . | we use arithmetic mean (synonymous with average), or median with percentiles | p95, p99, p999 (95%, 99%, 99.9%) to reflect thresholds of percentiles past the median | typically used in service level objectives (SLO) and service level agreements (SLA) | . | head of line blocking: it only takes a small number of slow responses to hold up the processing of subsequent requests (packet at front holds up a line of packets) | . Coping with Load . | scaling up - vertical scaling, moving to a more powerful machine | scaling out - horizontal scaling, distributing the load across multiple smaller machines . | shared-nothing architecture - distributing load across multiple machines | . | some systems are elastic (scaled automatically based on load) while some are scaled manually | magic scaling sauce - the false idea that there is a one size fits all solution to scaling | an architecture that scales well for a particular application is built around assumption of which operations will be common and which will be rare (informed by load parameters) | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#scalability",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#scalability"
  },"251": {
    "doc": "Designing Data Intensive Applications",
    "title": "Maintainability",
    "content": "The majority of the cost of software is not in its initial development but ongoing maintenance . Operability . make it easy for operations teams to keep systems running smoothly . Simplicity . make it easy for new engineers to understand the system by removing complexity, or avoiding a big ball of mud . | accidental complexity - complexity not inherent in the problem space but arises because of the implementation | an abstraction is a useful technique to hide non-important implementation details behind a façade | . Evolvability . make it easy for engineers to make changes to the system in the future (aka extensibility, modifiability, or plasticity) . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#maintainability",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#maintainability"
  },"252": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": ". | an application must meet various requirements to be useful . | functional requirements - what it should do, like allow data to be stored, retrieved, searched | non-functional requirements - general properties, like reliability, compliance, scalability, maintainability | . | Reliability means making systems work correctly, even when faults occur. Faults can be in hardware (typically random and uncorrelated), software (bugs are typically systematic and hard to deal with), and human (who inevitability make mistakes from time to time). Fault tolerance techniques can hide certain types of faults from the end user | Scalability means having strategies for keeping performance good, even when load increases. In order to discuss scalability, we first need ways of describing load and performance quantitatively. In scalable systems, you can add processing capacity in order to remain reliable under high load. | Maintainability has many facets, but in essence it’s about making life better for the engineering and operations teams who need to work with the system. Good abstractions can help reduce complexity and make the system easier to modify and adapt for new use cases. Good operability means having good visibility into the system’s health, and having effective ways of managing it. | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary"
  },"253": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 2: Data Models and Query Languages",
    "content": ". | Data models are perhaps the most important part of developing software – most applications are built by layering one data model on top of another, with each layer hiding the complexity of the layers below it by providing a clean data model . | Cascading levels of data models: . | as an app developer, you model the real world in terms of objects or data structures, and APIs used to manipulate those structures | when you want to store that data, you use a general-purpose data model such as JSON or XML | engineers who built the database software decided on ways of representing that general-purpose data model as bytes in memory, on disk, or on a network | hardware engineers have figured out how to represent bytes in terms of electrical currents, pulses of light, etc. | . | . Relational Model . | SQL based off relational model proposed by Edgar Codd in 1970 | data is organized in relations (tables in SQL) where each relation is an unordered collection of tuples (rows in SQL) | object databases came and went in late 80’s and early 90’s | XML databases appeared in early 2000’s but only have niche audience | much of the current web is based on relational model | impedance mismatch - a borrowed electronics term which can refer to the need for a translation layer to take objects generated from object-oriented paradigms and write to a relational model . | Object-relational mapping (ORM) frameworks like ActiveRecord, Hibernate, SQLAlchemy might reduce boilerplate code for that translation layer, but they don’t hide it completely | . | . Document Model . | use cases for ‘NoSQL’: . | need for greater scalability, including for very large datasets or very high write throughput | preference for free and open source software | specialized query operations not well supported by relational model | frustration with restrictiveness of relational schemas, and desire for more expressive and dynamic data model | . | polyglot persistence: many future use cases might employ document and relational models | . Graph Model . | graph consists of two objects: . | vertices (aka nodes or entities) | edges (aka relationships or arcs) | . | several different implementations of graph model, including property graph, triple-stores, semantic web | . property graph . | implemented by Neo4j, Titan, and InfiniteGraph (among others) | each vertex contains: . | a unique identifier | a set of outgoing edges | a set of incoming edges | a collection of properties (key:value pairs) | . | each edge contains: . | a unique identifer | a vertex where the edge starts (the tail vertex) | a vertex where the edge ends (the head vertex) | a label to describe the kind of relationship between the two vertices | a collection of properties (key:value pairs) | . | think of the graph storing two relational tables, one for vertices, one for edges | . triple-stores . | similar to property graphs, just describes things with different words | all info stored as three-part statement - subject, predicate, object. e.g. JIM LIKES EGGS (JIM - subject, LIKES - predicate, EGGS - object) | . semantic web . | while not all triple-stores are synonymous with the semantic web, they are interlinked in many minds | semantic web is the idea that websites could publish machine-readable information about their sites in a consistent format to form a ‘web of data’ (note Berners-Lee constantly says there is no data layer for the internet) | Resource Description Framework (RDF) - is positioned as that format . | Apache Jena popular tool for this | . | . Many-to-One and Many-to-Many Relationships . | Storing standardized list of data, so you can join to that data and prevent duplication (normalized data) | 1st Normal Form (NF), 2NF, 3NF, etc have little practical difference – rule of thumb, if you are duplicating values that could be stored in one place, your schema is not normalized | normalizing requires a many-to-one relationship, something not supported well with document model (support for joins is weak), meaning you need to shift that logic to application code over database model logic | . Relational vs Document . simpler application code . | if your data is document-like, use document (shredding - relational technique of splitting a document-like structure into multiple tables, makes for complicated application code) | if you need many-to-many or joins, use relational | . schema flexibility . | schema-on-write (relational): structure of data is explicit and database ensures all data conforms to it | schema-on-read (document): structure of data is implicit and only interpreted when data is read NOTE: ALTER TABLE typically fast except for MySQL, where the entire table is copied . | . data locality . | if joins aren’t required for your document, then there is a performance advantage to all data in a single document (called storage locality) | some relational databases group related data together to achieve storage locality . | Google’s Spanner (allows schema to declare table’s rows interleaved (nested) with a parents) | Oracle through multi-table index cluster tables | Bigtable (Cassandra and HBase) through column-family | . | . convergence . Many data systems support multiple models. | many relational databases support JSON (PostGreSQL 9.3+, MySQL 5.7+) | many relational databases support XML (other than MySQL) | . Query Languages . SQL . | SQL is a declarative language which follows the structure of relational algebra closely | other declarative languages examples: XSL, CSS | imperative languages tell the computer to perform operations in order (most programming languages) | declarative languages lend themselves to parallel execution | . MapReduce Querying . | programming model for processing large amounts of data across multiple machines created by Google | you specify two functions – map (aka collect), and a reduce (aka fold or inject). Below is MapReduce implemented in MongoDB: | MongoDB allows you to embed javascript in a MapReduce query: | . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 . | db.observations.mapReduce( function map() { // this function returns a key and a value to be passed to // the reduce function, and must be pure (no side effects) var year = this.observationTimestamp.getFullYear(); var month = this.observationTimestamp.getMonth() + 1; emit(year + \"-\" + month, this.numAnimals); }, function reduce(key, values) { // this pure function takes the key and values from map return Array.sum(values); }, { query: {family: \"Sharks\"}, out: \"monthlySharkReport\" } ) . | . Cypher . | declarative language implemented by Neo4j and used to query property graphs | . Querying Graph Models with SQL . | you can query graph models in SQL, it is just extremely verbose, and relies on a recursive common table expression e.g. WITH RECURSIVE | common table expressions - temporary data set returned by a query, which is then used by another query. It’s temporary because the result is not stored anywhere; it exists only when the query is run – e.g. WITH expression_name AS (CTE definition) | . SPARQL . | query language for triple-stores using RDF data model | similar to Cypher (Cypher borrows its pattern matching from SPARQL) | . Datalog . | predates SPARQL | is a subset of Prolog | need to define rules at outset, and while it might be harder for one-off queries, rules are reusable and Datalog might fit use case if data is complex | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-2-data-models-and-query-languages",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-2-data-models-and-query-languages"
  },"254": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": ". | Historically, data started out being represented as one big tree (the hierarchical model), but that wasn’t good for representing many-to-many relationships, so the relational model was invented to solve that problem. More recently, developers found that some apps don’t fit well within the relational model either. New nonrelational “NoSQL” datastores have diverged in two main directions . | Document databases target use cases where data comes in self-contained documents and relationships between one document and another are rare. | Graph databases go in the opposite direction, targeting use cases where anything is potentially related to everything. | . | All three models (document, relational, and graph) are widely used. Each is good in its domain. One model can be emulated in terms of another model (e.g. graph data can be represented in a relational db), but the result is often awkward. There is no single one-size-fits-all solution | graph databases and document databases don’t typically enforce schema for data they store, however, application most likely still assumes that data has a certain structure. just a question of whether the schema is explicit (schema-on-write) or implicit (schema-on-read) | each model comes with its own query language or framework, e.g. SQL, MapReduce, MongoDB’s aggregation pipeline, Cypher, SPARQL, Datalog | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-1",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-1"
  },"255": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 3: Storage and Retrieval",
    "content": "at a fundamental level, a database needs to do two things: . | when you give it data it should store the data | when you ask it later it should give the data back to you | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-3-storage-and-retrieval",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-3-storage-and-retrieval"
  },"256": {
    "doc": "Designing Data Intensive Applications",
    "title": "Log-structured storage",
    "content": ". | many databases internally use a log, or append only sequence of records, to store data (different from application logs, which are typically text files emitted by an application to describe what is happening) log used here is different than a machine-generated output explaining what is happening. log here means append only sequence of records . | . Indexes . | an additional structure used to efficiently find data within a database | keep some additional metadata on the side which acts a signpost to help you locate the data you want | speeds up read performance but degrades write performance (typically because index needs to be updated after every write) | . Hash Indexes . | simple index of key:value pairs stored in a hash map/dictionary on disk, where each key is associated with a byte offset to lookup the value on disk | Bitcask, the default storage engine for Riak, does this | this sort of use case is well-suited for frequent updates to values and where the hash map can fit in memory | important things to consider for this implementation: . | file format: binary format that first encodes the length of string in bytes then the raw string (without needing to escape chars) | deleting records: if you want to delete a record, you need to append a special delete record (sometimes called a tombstone) to signal during compaction merge to remove the record | crash recovery: since the hash map is in memory, restarts mean you lose the hash map. you can store version on disk to warm start the hash map | partially written records: crashes can happen at any time, even partially through writes. Bitcask uses checksums to ignore corrupted parts of log | concurrency control: since writes are sequential append only, its common to only have a single writer. Data files are append only and immutable, so they can be read concurrently | . | . segment files . | since the log is an append-only structure, we need break it up into segment files to prevent running out of space | after a segment file reaches a certain size, we can create a new one to write to, then perform compaction on the older segment files, meaning, throwing away duplicate keys in the log and keeping only the most recent update . | older segment files are merged in the background then swapped without interruption to writes | . | . SSTables . | Sorted String Table (SSTable) - takes the idea for hash indexes, but requires that segment files be sorted in order by key. also requires that each key only appears once in each merged segment table (because in order to do compaction, we need to mergesort, which relies on uniqueness of keys when comparing one file to another) | keys duplicated across segment files don’t matter, since most recent segment contains most up to date value per key | your in-memory hash index can be sparse, because keys are sorted and so easy to scan (typically one index per every few kilobytes is sufficient) | you can compress blocks and then just point the index at a block, saving disk space and I/O | . LSM-Trees . | described in Patrick O’Neil et al Log-Structured Merge-Tree or LSM-tree | memtable and SSTable introduced by Google’s Bigtable paper | how do we maintain sorted order? much easier in memory than on disk . | write comes in, add to a balanced tree data structure (e.g. a red-black tree) - this is typically called a memtable | when memtable is larger than a threshold, write that memtable as an SSTable file to disk. start new memtable while old is being written to disk | to serve a read request, first check memtable, then first segment file, then second, etc. | from time to time, run a merging and compaction process for older segment files | maintain an append only log on disk that holds all writes, to recover the memtable in case of crash (you can delete after current memtable is written to disk) | . | . B-Trees . | keeps indexes sorted by value, but instead of storing database in segment files, B-Trees store database in fixed size blocks or pages, which corresponds more closely to underlying hardware | you start at the root of the tree. each page contains references (like pointers but on disk) to child pages until you get to a page of individual keys (a leaf page), which either contains the value or references to the page where the value can be found | number of references to child pages called the branching factor | trees are balanced, so traversal is always O(log n) – most databases can fit into a B-tree that is three or four levels deep (e.g. a four-level tree of 4 KB pages with a branching factor of 500 can store 256 TB) | . Reliability . | many B-tree impl. use write-ahead logs (WAL), aka redo logs, to persist all writes to the database in an append only log before it can be applied to pages | . B-Trees vs LSM-Trees . | B-Trees need to write data twice, once to the write-ahead log and once to page | Log-structured indexes might write data multiple times due to repeated compaction and merging (write amplification) and is particularly concerning for SSDs, which can only overwrite blocks a limited amount of times before wearing out | LSM-Trees typically able to sustain higher write throughput because they often have lower write amplification | B-Trees have keys that exist exactly one place in index, which is good for databases that want strong transactional semantics via transaction isolation and locks | . Secondary Indexes . | both log-structured and B-Trees can work as secondary indexes in addition to a primary key index. These secondary indexes don’t need to be unique (unless you add that constraint) | . Storing values within the index . | the value of the index might be an actual row, or it might be a reference to the row, typically stored in a heap file – data in these heap files are not stored in any particular order | updating a value in a heap file can be efficient by overwriting the data in place (assuming the data is the same length) | clustered index - storing the row directly in the index, and secondary indexes just refer to the primary key | a compromise between clustered and non-clustered is a covering index, or index with included columns, which stores some of the tables columns within an index, allowing queries to be ‘covered’ or answered by an index alone | . Multi-column indexes . | concatenated indexes used to store indexes for multiple columns, which is good for searching full index combinations, but not individual columns after the primary key | multi-dimensional indexes are a good way to query several columns at once, especially for geospatial data. R-Trees are typically used instead of B-Trees | . Full-text search and fuzzy indexes . | Lucene is able to search for words within a certain edit distance (edit distance meaning when 1 letter has been added, removed, or replaced) | Levenshtein distance - used to figure out amount of edits required to go from one word to another | . In memory databases . | we typically use disks because they are durable and cost less per gigabyte than RAM (the second argument is becoming less relevant) | Memcached - an entirely in memory cache (lost if restarted) | other in-memory databases aim for more durability, writing log of changes to disk, writing periodic snapshots, etc. | VoltDB, MemSQL, and Oracle TimesTen are relational in-memory databases | anti-caching approach is a way around working with datasets larger than memory, by persisting data to disk when out of memory, and bringing back into memory when used (this is similar to virtual memory and swap files at OS level) | new area of research - nonvolatile memory (NVM); still in infancy | . Transactions vs Analytics . | Property | Transaction processing systems (OLTP) | Analytics systems (OLAP) | . | Main read pattern | small number of records per query, fetched by key | aggregate over large number of records | . | Main write pattern | Random-access, low-latency writes from user input | Bulk import (ETL) or event stream | . | Primarily used by | End user/customer via web application | Internal analyst, for decision support | . | What data represents | Latest state of data (current point in time) | History of events that happened over time | . | Dataset size | Gigabytes to terabytes | Terabytes to petabytes | . Data Warehouses and Column-Oriented Storage . | you store data in an OLAP data warehouse as it will be insulated from live transaction processing and queries won’t affect live customer-facing systems | typically perform Extract-Transform-Load (ETL) operations to populate the database | Data warehouses typically sell their systems under expensive commercial licenses (e.g. Amazon RedShift is a host version of ParAccel) | Some are based on the ideas from Google’s Dremel | many data warehouses can have hundreds of columns | The typical use case for OLAP queries are only accessing a small amount of many columns – unlike OLTP systems which are row-oriented storage, meaning that a row is stored in contiguous bytes on disks, OLAP systems are column-oriented storage, which stores a column in contiguous bytes. | . Star and Snowflake Schema . | many data warehouses use star schema as their data model (known as dimensional modeling) | at the center of the schema is a fact table, most often representing a particular event | some of the columns are attributes of the event, while others are foreign key references to other tables called dimension tables, which typically represent the who, what, where, when, how, and why of the event | snowflake schema - a variation of the star schema, but dimensions are broken even further into sub-dimensions | . Column Compression . | since there are far less distinct values in a column than there are rows, we can compress this data. a popular method is bitmap encoding, which details all the unique values in a column, then encodes an array of 1s and 0s for whether a row contains that value, which creates sparse data sets, which can be compressed more easily by encoding run length (how many 1s or 0s in a row) | . Vectorized Processing . | the query engine can take a chunk of compressed column data that fits in the CPU’s L1 cache, and iterate through in a tight loop (no function calls) much more quickly than if many function calls are required, e.g. to type-cast data formats | . Materialized Views . | for expensive queries (like aggregation functions), it might make sense to actually store the results in a table. materialized views differ from regular views (which are just shorthand for queries) because they are an actual table stored on disk, and they need to be recomputed when the underlying data changes | a special use case is a data cube, which is a grid of aggregates based on various dimensions (e.g. product sales for a given day, also rolled to a total) | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#log-structured-storage",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#log-structured-storage"
  },"257": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": ". | storage engines fall into two broad categories . | optimized for transaction processing (OLTP) | optimized for analytics processing (OLAP) | . | OLTP systems are typically user-facing, which means they see a huge volume of requests. In order to handle the load, applications usually only touch a small number of records in each query. The application requests records using some kind of key, and the storage engine uses an index to find the data for the requests key. Disk seek time is often a bottleneck. | Data warehouses and similar analytics used by business analysts, not end users. They handle much lower volume of queries, and each query is demanding, requiring many million records to be scanned in short time. Disk bandwith is often bottleneck | On storage engine side, there are two main schools of thought: . | log-structured: only permits appending to files and deleting obsolete files, but never updates a file that has been written. e.g. Bitcask, SSTables, LSM-Trees, LevelDB, Cassandra, HBase, Lucene, etc | update-in-place: treats the disk as a set of fixed-size pages that can be overwritten. e.g. B-Trees | . | log-structured storage engines are comparatively new — the key is they systematically turn random-access writes into sequential writes which enables higher write throughput | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-2",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-2"
  },"258": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 4: Encoding and Evolution",
    "content": " ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-4-encoding-and-evolution",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-4-encoding-and-evolution"
  },"259": {
    "doc": "Designing Data Intensive Applications",
    "title": "Formats for Encoding Data",
    "content": ". | Programs typically work with data in two ways: . | in memory: kept in objects (list, array, struct, hash table, etc.) and efficiently accessed and manipulated by CPU (typically via pointers) | out of memory: you need to encode data into a self-contained sequence of bytes to write to file or send over network, etc | . | encoding - the translation of in-memory representation to byte sequence (aka serialization or marshalling), and the opposite action is decoding (aka parsing, deserialization, unmarshalling) | . Language-Specific Formats . | many languages have built-in support for encoding in-memory objects to byte sequences: . | java.io.Serializable for Java | ‘Marshal` for Ruby | pickle for python | . | this languages bind you to the programming language, and instantiate arbitrary classes or execute arbitrary code, which is a security risk | . JSON, XML, and Binary Variants . | JSON, XML, and CSV are textual formats and will remain valuable especially as interchange formats between organizations, but there are limitations: . | ambiguity around encoding numbers - in XML and CSV, you can’t distinguish between a number a string that happens to consist of digits. JSON doesn’t distinguish integers and floats, and doesn’t distinguish precision, which is a problem with large numbers (&gt; 253) | binary strings - JSON and XML have good support for Unicode character strings, but not binary strings – binary strings are typically encoded as text using Base64, which is hacky and increases data footprint by 33% | schema support - schema support is ubiquitous for XML, but used less often for JSON, and there is no schema support for CSV. Schema languages are powerful but complicated to learn | . | Binary variants for JSON - BSON, BJSON, UBJSON, BISON, Smile, etc | Binary variants for XML - WBXML, Fast Infoset, etc | . Thrift and Protocol Buffers . | binary encoding libraries that encode object name and type using a schema | Google invented Thrift, Facebook invented protobuf | Thrift has two encoding formats, BinaryProtocol and CompactProtocol | . Avro . | started in 2009 as a subproject of Hadoop | has two schema languages . | Avro interface domain language (IDL) for human editing | JSON for more easy machine reading | . | data type isn’t encoded in the binary, so you need to read the data along with the schema to determine data type, meaning you need to decode with the exact same schema used to write the data . | backward and forward compatibility: . | writer and reader schema don’t need to be the same, just compatible | writer’s schema - schema used to write data | reader’s schema - schema used to read data | if the code reading the data encounters a field that appears in the writer’s schema but not in the reader’s schema, it is ignored | if the code reading the data expects some field but the writer’s schema does not contain a field of that name, it is filled in with a default value declared in the reader’s schema | . | schema can be: . | declared at the beginning of a large container file with many records | referenced by a version number stored elsewhere at the beginning of a record | negotiated on connection setup over a network via something like the Avro RPC protocol | . | Thrift and Protocol Buffer rely on code generation, which is good for static typed languages but less good for dynamic typed languages | Avro provides optional code generation because it is self-describing, containing all necessary metadata . | this is particularly useful for dynamically typed data processing languages like Apache Pig | . | . Many of these encodings share a lot with ASN.1, a schema definition language. It’s binary encoding (DER) is still used to encode SSL certs (X.509) . | Binary encodings have a few nice properties over JSON, XML, &amp; CSV . | much more compact | schema is a valuable document, and since it is required for reading you know it’s up to date | keeping a database of schemas allows you to check forward and backward compatibility | for static typed languages, ability to generate code from schemas is useful | . | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#formats-for-encoding-data",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#formats-for-encoding-data"
  },"260": {
    "doc": "Designing Data Intensive Applications",
    "title": "Modes of Dataflow",
    "content": "Dataflow through Databases . | process that writes to the database encodes the data, process that reads from the database decodes it | several processes might be accessing a database at the same time, so some might be running newer code and some older, so forward compatibility is important | data outlives code | you can rewrite data into a new schema (migration) but it is expensive and time consuming on larger datasets | schema evolution allows the entire database to appear as if it was encoded with a single schema, even though underlying records were written with various versions | when you do a data dump, it is written in one go and is immutable afterwards, so object containers like Avro might be a good fit, or analytics-friendly column-oriented format such as Parquet | . Dataflow through Services: REST and RPC . | when two processes need to communicate over a network, the most common way is to have two roles: clients &amp; servers – servers expose an API and the clients connet to the servers to make requests to that API as a service | web -&gt; clients (web browsers) make requests to web servers, send GET requests to download HTML, CSS, JS, etc, and send POST requests to submit data to server | native app also make network requests | a client-side JS app running in browser can use XMLHttpRequest to become an HTTP client (Ajax) | service-oriented architecture (SOA) or microservice architecture – to decompose a larger app into smaller services . | key idea is to make app easier to change and maintain by making services independently deployable and evolvable | . | . Web Services . | when HTTP is used for the underlying protocol of talking to the service, it is called a web service | two popular approaches: REST and SOAP, which are almost opposite in terms of philosophy | . REST . | REST is not a protocol but a design philosophy . | simple data formats | URLs for identifying resources | using HTTP for cache control, authentication, and content type negotiations | . | an API designed according to REST principles is RESTful | definition format such as OpenAPI (aka Swagger) can be used to describe RESTful APIs and produce documentation | . SOAP . | XML based protocol for making API requests, most commonly used over HTTP but comes with a complex plethora of related standards (web service framework, aka WS-*) | described using Web Services Description Language (WSDL), which is not designed to be human-readable | ostensibly standardized, but interoperability between different vendor impl. might cause problems | . RPC . | many implementations of making API calls over network, all based on remote procedure call (RPC) . | Enterprise JavaBeans (EJB) and Java’s Remote Method Invocation (RMI) - limited to Java | Distributed Component Object Model (DCOM) limited to Microsoft platforms | Common Object Request Broker Architecture (CORBA) overly complex and neither forward or backward compatible | . | RPC tries to make calling a remote service look the same as calling a function within programming language (called location transparency) | this approach is flawed because: . | a local function call either succeeds or fails, but a network request is unpredictable | a local function returns a result or throws an exception, but a network request might timeout | there is no inherent mechanism for idempotence with network calls | network calls have variable execution time | local function calls allow you to pass pointers, but network calls require those parameters to be encoded into a sequence of bytes | the client might be in a different programming language, causing the need for a translation of data types | . | . Dataflow though async messages . | async message-passing systems are somewhere between RPC and databases | a client’s request (message) is passed to another process with low latency, to an intermediary called a message broker, or message queue | using a message queue has advantages . | it can act as a buffer if recipient is overloaded or unavailable | it can automatically redeliver messages to a crashed process so nothing is lost | it avoid sender needing to know IP and port of recipient, where virtual machines come and go | it allows one message to be sent to several recipients | it logically decouples sender from recipient | . | In the past, message brokers were dominated by commercial enterprise (TIBCO, IBM WebSphere, webMethods), but more recently, open source impl. like RabbitMQ, ActiveMQ, HornetQ, NATS, and Apache Kafka are populate | They typically work like this: one process (producer) sends a message to a named queue or topic, and the broker ensures that the message is delivered to one or more consumers or subscribers to that queue or topic – there can be many producers and consumers | . Distributed actor frameworks . | actor model - programming model for concurrency in a single process. logic is encapsulated in an actor, and that sends async messages | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#modes-of-dataflow",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#modes-of-dataflow"
  },"261": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": ". | many services need to support rolling upgrades, where a new version of a service is gradually deployed to a few nodes at a time | rolling upgrades allow a new version of a service to be released without downtime (thus encouraging frequent small releases over rare big releases) and make deployments less risky – these properties are hugely important for evolvability | during rolling upgrades (or for various other reasons) we must assume that different nodes are running different versions of our application’s code – it is important that all data flowing around the system is encoded in a way that provides backward (new code can read old data) and forward (old code can read new data) compatibility | there are several data encoding formats . | programming language-specific encodings are restricted to a single programming language and often fail to provide forward and backward compatibility | textual formats like JSON, XML, and CSV are widespread, and their compatibility depends on how you use them – they have optional schema languages, which are sometimes helpful and sometimes a hindrance, and these formats are sometimes vague about datatypes, so you have to be careful with things like numbers and binary strings | binary schema-driven formats like Thrift, Protocol Buffers, and Avro allow compact, efficient encoding with clearly defined forward and backward compatible semantics – these schemas can be useful for documentation and code generation in statically typed languages | . | there are several modes of dataflow . | databases, where the process writing to the database encodes the data and the process reading from the database decodes it | RPC and REST APIs, where the client encodes a request, the server decodes the request and encodes a response, and the client finally decodes the response | asynchronous message passing (using message brokers or actors) where nodes communicate by sending each other messages that are encoded by the sender and decoded by the recipient | . | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-3",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-3"
  },"262": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 5: Replication",
    "content": ". | replication - keeping a copy of the same data on multiple machines that are connected via a network | you might need to replicate data to: . | reduce latency keep data geographically close to your users | increase availability - allow the system to continue working even if some of its parts have failed | increase throughput - scale out the number of machines that can serve read queries | . | all of the difficulty in replication lies in handling changes over time to replicated data | almost all distributed databases use one of three algorithms: . | single leader | multi-leader | leaderless | . | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-5-replication",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-5-replication"
  },"263": {
    "doc": "Designing Data Intensive Applications",
    "title": "Leaders and Followers",
    "content": ". | replica - each node that stores a copy of the database | every write to a database must be processed by every replica, otherwise the replica would no longer contain the same data | . Leader-based replication . | aka active/passive or master-slave | generally works like this: . | one replica is designated leader (aka master or primary) and writes are sent to this node | other replicas are known as followers (read replicas, slaves, secondaries, hot standbys) – when a leader writes new data, changes are sent to replicas via replication log or change stream, and writes are applied the same way they were initially received there are different definitions for hot, warm, and cold standbys which aren’t material to this section . | reads can go to leader or any followers | PostgreSQL (since 9.0), MySQL, Oracle Data Guard, SQL Server’s AlwaysOn Availability Groups, MongoDB, RethinkDB, Espresso, Kafka and RabbitMQ highly available queues all use leader-based replication | . | . Asynchronous vs. Synchronous . | replication to followers can either be . | asynchronous - writes don’t wait for replication to followers to report success to client/user | synchronous - writes replicate to all followers before reporting success | . | in sync models, one bad follower can halt the entirety of the write, so semi-synchronous method is employed where writes are synchronous to a single follower and all others are replicated asynchronously | often, leader-based is also fully asynchronous, so if leader fails any writes that weren’t replicated are lost | . Creating New Followers . | sometimes you need to create a new follower node, but copying files or locking the database isn’t desirable as this won’t reflect all changes and is slow | a more desirable process might: . | take a snapshot of leader database | copy snapshot to follower node | follower connects to leader and requests changes since snapshot – as long as the exact position in the log is known (PostgreSQL - log sequence number, or MySQL - binlog coordinates) | once backlog of changes are processed, the follower has ‘caught up’ | . | . Node Outages . | how do we achieve high availability with leader-based replication? . | follower failure: catch-up recovery - a follower knows exact place in log, so if network interruptions or failures happen, follower can connect to leader after resolution and catch up | leader failure: failover - one of followers needs to be promoted to new leader, which can happen manually or automatically . | steps needed to failover . | determine leader has failed - can happen for many reasons, and might be determined by timeout | choose new leader - typically, the follower with most up to date data | reconfigure system to use new leader - clients need to send write requests to new leader, and if old leader comes back on needs to be demoted to follower | . | some potential failover problems: . | if async is enabled, writes to original leader might cause problems when leader comes back, so these are typically discarded | two nodes might believe they are both leader - split brain | if storage systems outside the database need to be coordinated with the database contents (e.g. an incrementing key in a database, and a Redis cache using those keys – database goes down so some primary keys entries are written to a failover leader but aren’t propagated and need to be discarded, but those primary keys still exist in Redis cache, leading to the exposure of private data (database has 123 as user a, but Redis cache has 123 as user b)) | determining timeout to declare leader ‘dead’ might lead to false positives for longer running tasks | . | . | . | . Replication Methods . | several leader-based replication methods . | statement based - leader sends SQL statements to followers (INSERT, UPDATE, DELETE) . | difficult if there are non-deterministic functions (NOW()) or side effects (triggers, stored procedures, user-defined functions) | . | write ahead log shipping - we can use the append only sequence of records to replicate data, used in PostgreSQL and Oracle . | WAL contains very low level data (which bytes where changed in which disk blocks) closely coupling replication and storage engine | . | logical (row-based) log - store different log format for replication (logical) and for storage engine (physical) – logical log stores changes to database at granularity of rows . | easier to parse as its decoupled from storage engine | . | trigger-based - move replication to the application layer by using triggers or stored procedures within database . | useful if you need more flexibility, but difficult to maintain | . | . | . Replication Lag &amp; Types of Consistency . | read scaling architecture - many models need only single leader and many read replicas, so you can scale those out to take increased load | eventual consistency - if app reads from async follower, sometimes that data might be out of date – if you wait for all writes to complete all followers will eventually have up-to-date data | read-after-write consistency - when a user writes to a database, this guarantee is that if the user refreshes the page they will see their writes reflected, which might not happen if they write to one node then read from a follower that hasn’t been replicated to yet . | you might enforce reading from the leader when reading something a user modified, or using other criteria such as using timestamps of most recent write and serving from replicas that are at least that up to date, either as a logical timestamp (sequence of writes) or actual system clock | you might also need to provide cross-device read-after-write consistency | . | monotonic reads - guarantee that users won’t see things moving back in time because their queries were served by two followers that were progressively more stale . | lesser guarantee than strong consistency, but stronger than eventual consistency | . | consistent prefix reads - guarantees that if a sequence of writes happens in a certain order, anyone reading those writes would see them appear in same order – a problem of causality where one write precedes the write that seems to have caused it, like an answer before a question . | particular problem in partitioned/sharded databases | . | worth thinking about what would happen if replication lag increases to several minutes or several hours when thinking about what consistency you need to guarantee | . Multi-Leader Replication . | aka master-master or active/active | each node that processes a write must forward to all other nodes | some databases support by default, but most need external tools to handle (Tungsten Replication for MySQL, BDR for PostgreSQL, and GoldenGate for Oracle) | use cases for multi-leader replication . | multiple datacenters - rarely makes sense to use multi-leader in a single datacenter, but if you have multiple data centers, you can have a leader in each one, and each leader replicates their changes to other leaders in other datacenters | clients with offline operation - useful if you have an application that needs to continue to work even when offline (calendar apps, email apps) - data stored on local database acting as leader, and synced when internet is next available. CouchDB operates in this mode by default | collaborative editing - things like Google Docs allow many people to edit a doc at once, but each local copy is a leader that replicates to all other copies – you need to lock a doc before someone else can use it, but you can make the unit of change as small as a keystroke to limit the locks | . | . Handling Write Conflicts . | biggest problem with multi-leader is write conflicts can occur (two leaders make conflicting writes) | some methods to avoid write conflicts: | conflict avoidance - simplest way to deal with conflicts is to avoid them – you could make sure that all edits to a record go through the same leader | converging toward a consistent state - in multi-leader config, there is no defined ordering of writes . | all replication must ensure that data is eventually the same in all replicas, so one method is to resolve conflicts in a convergent way, or to ensure that all replicas must arrive at the same final value when all changes have been replicated | if timestamp is used, you might use last write wins (LWW) | . | custom conflict resolution logic - you might need to write application code to resolve conflicts . | on write - as soon as database system detects conflict, it calls conflict handler to deal | on read - all conflicting writes are stored, but next time the data is read, all conflicting writes are given to the application to resolve | . | other conflict resolution algorithms: . | conflict-free replicated datatypes - family of data structures (maps, sets, etc) that can automatically resolve conflicts in sensible ways | mergeable persistent data structures - explicit tracking of history similar to git version control | operational transformation - behind Google Docs and Etherpad | . | . Multi-Leader Replication Topologies . | replication topology describes communication path which writes are propagated from one node to another | all-to-all - every leader sends its writes to every other leader | star - one designated root node forwards writes to all other nodes (tree) | circular - each node receives writes from one node and forwards to another | . Leaderless Replication . | allows any node to accept writes | Amazon used for its in-house Dynamo system, and Riak, Cassandra, and Voldemort adopted it not to be confused with AWS’s DynamoDB . | in a leaderless configuration, failover doesn’t exist, so reads and writes are sent to multiple nodes, and up to date data is determined by version numbers | how does a node that was offline catch up? . | read repair - when client makes a read from several nodes in parallel, it can detect stale responses by version number | anti-entropy process - some datastores have a background process that looks for differences in data between replicas and updates the stale data | . | . Read and Write Quorum Consistency . | used to determine how many nodes would be required for a write to be successful | if there are n replicas, every write must be confirmed by w nodes to be considered successful, and we need to query r nodes for each read, so as long as r + w &gt; n we expect an up to date value when reading | . Limitations of Quorum Consistency . | even with w + r &gt; n, there are edge cases where stale values might be returned . | if sloppy quorum is used, w writes may end up on different nodes than r reads, so there is no guarantee of overlap | two concurrent writes, so it is unclear which write happened first – if winner is picked based on timestamp, writes might be lost to clock skew | write happens concurrent to read | write succeeds on some replicas and fails on others | unlucky with timing | . | monitoring staleness: . | for leader-based replication, you can see how far behind a leader the replicas are as a quantitative measurement, but that is not possible with leaderless because there is no required sequence of writes | . | . Sloppy Quorums and Hinted Handoffs . | in distributed leaderless architectures, network outages might knock off too many nodes to reach a quorum, so if a quorum can’t be reached, should we: . | sloppy quorums - accept writes anyway - when network connection is restored, any writes accepted on behalf of a down leader are sent to their respective home (hinted handoffs) – not a quorum at all but an assurance of durability | return errors for all requests | . | . Detecting Concurrent Writes . | writes can arrive in different orders on different nodes, and if each node overwrote the value for a key, the nodes would be permanently inconsistent | last write wins - you could discard concurrent writes, as long as there is a way to determine which write is more ‘recent’ . | only conflict resolution supported in Cassandra, optional in Riak | achieves goal of eventual convergence at cost of durability - if there are several concurrent writes only the last one will be successful despite all showing as success to user | . | “happens-before” relationship and concurrency - with two events, A &amp; B, either 1) A happened before B, B happened before A, or A &amp; B are concurrent | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#leaders-and-followers",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#leaders-and-followers"
  },"264": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": ". | Replication can serve several purposes: . | High Availability . | keeping the system running, even when on machine (or several machines, or an entire datacenter) goes down | . | Disconnected Operation . | Allowing an application to continue working when there is a network interruption | . | Latency . | Placing data geographically close to users, so that users can interact with it faster | . | Scalability . | Being able to handle a higher volume of reads than a single machine could handle by performing reads on replicas | . | . | Replication requires careful thinking about concurrency and all the things that could go wrong, and dealing with the consequences of those faults | at a minimum, need to deal with unavailable nodes and network interruptions | Three main approaches to replication . | Single-leader replication . | clients send all writes to a single node (leader) which streams data to other replicas (followers) – reads can be performed on any replica | . | Multi-leader replication . | clients send writes to one of several leader nodes and that leader node streams data to everything else | . | Leaderless replication . | clients send writes to several nodes in parallel in order to detect and correct nodes with stale data | . | . | single leader is popular because it is fairly easy to understand and there is no conflict resolution to worry about | multi-leader and leaderless can be more robust in the presence of faulty nodes and latency spikes but are harder to reason about and only provide weak consistency guarantees | replication can be synchronous or asynchronous – asynchronous can be fast when system is running smoothly, but failover is more difficult | some consistency models: . | read-after-write consistency - users should always see data that they submitted themselves | monotonic reads - after users have seen the data at one point in time, they shouldn’t later see the data fromm some earlier point in time | consistent prefix reads - users should see the data in a state that makes causal sense: for example, seeing a question and reply in the correct order | . | because writes can happen concurrently in multi-leader and leaderless, conflicts occur | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-4",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-4"
  },"265": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 6: Partitioning",
    "content": ". | for very large datasets or high query throughput, replication isn’t enough, we need to break up data into partitions (aka sharding) partition is shard in MongoDB, Elasticsearch and SolrCloud, region in HBase, tablet in Bigtable, vnode in Cassandra and Riak, vBucket in Couchbase . | each partition is like a small database on its own | main use case for partitioning is scalability – different partitions can be placed on different nodes in shared-nothing architecture | . Partitioning and Replication . | partitioning is normally combined with replication for fault tolerance, so copies of partitions are stored on multiple nodes | . Partitioning of Key-Value Data . | goal of partitioning is to spread data and query load evenly across nodes | skewed - if partition is unfair, meaning some nodes have more query load or data than others | a partition with a disproportionately high load is called a hot spot | you might assign values to nodes randomly, but this is disadvantageous if you want to read data since you’d need to guess what node data is on | . Partitioning by Key Range . | you might partition by a continuous range of keys, from a minimum to a maximum | range of keys might not be evenly spaced, so partition boundaries need to adapt to data . | partition boundaries might be chosen by an administrator or by the database itself | . | within each partition, keys can be kept in sorted order . | the key can treated as a concatenated index to fetch related records | . | we can use range to do efficient range queries | downside is that certain access patterns can lead to hot spots, e.g. using a timestamp as a key means all writes end up going to the same partition . | need to use something other than timestamp as the first element of the key | . | . Partitioning by Hash of Key . | because of the risk of skew and hot spots, many distributed datastores use a hash function to determine partition for a given key | doesn’t need to be cryptographically strong . | Cassandra and MongoDB use MD5 | Voldemort uses Fowler-Noll-Vo function | . | some programming language hash functions might generate a different hash for the same data in different processes | this can lead to consistent hashing, or partitions are chosen pseudo-randomly - better to avoid the term and call it hash partitioning (consistency is a loaded and ambiguous term) | this method means you can’t do efficient range queries | Cassandra reaches a compromise by using compound primary keys, which take the first part of a key for hashing, but additional fields can be used to sort data in Cassandra’s SSTables, which helps with concatenated queries (e.g. hash(user_id), timestamp would allow all updates for a particular user in a timespan) | . Skewed Workloads and Relieving Hot Spots . | extreme case where all requests still routed to same partition | currently, most data systems can’t compensate for this skewed workload, so application code needs to be written to accommodate | for example, you might add two digits to hot keys, then you must keep track of them to access later | . Partitioning &amp; Secondary Indexes . | secondary indexes are indispensable for relational databases, but they don’t map neatly to partitions | two main approaches to partitioning a database with secondary indexes: . | document-based partitioning | term-based-partitioning | . | . Partitioning Secondary Indexes by Document . | primary indexes are maintained (document ids) | each partition is completely separate, and indexes added are local to the partition | downsides are that there is no reason that all fields with a particular value would be in the same partition, so queries would need to be sent to all partitions, which might get expensive | scatter/gather - querying a partitioned database across all partitions using secondary index, then aggregated the results | MongoDB, Riak, Cassandra, Elasticsearch, SolrCloud, and VoltDB all use document-partitioned secondary indexes | . Partitioning Secondary Indexes by Term . | instead of a local index, we can have a global index, but that global index also needs to be partitioned across nodes | use either a hash of a term or the term itself to generate the index | has the benefit of making reads faster, but writes are slower and more complicated since many nodes might need to be accessed to write the index | . Rebalancing Partitions . | over time, the database changes, e.g.: . | query throughput increases, and you want to add CPU | dataset size increases and you want to add more RAM | machine fails, and other machines need to take over responsibilities | . | rebalancing - process of moving load from one load to another | after rebalancing, certain requirements should be met . | the load should be shared fairly between nodes in the cluster | while rebalancing is happening, the database should continue accepting reads and writes | no more data than necessary should be moved between nodes, to make rebalancing fast and minimize network and disk I/O load | . | . Strategies for Rebalancing . | don’t use modulo, since that encodes a specific number of nodes say, mod n means if you have n+1 nodes, all data needs to be shifted | . Fixed Number of Partitions . | practice of assigning many more partitions to each node, so any new node can ‘borrow’ partitions from each node until load is evenly spread | e.g. each node has 100 partitions, across 10 nodes, that is 1,000 partitions. if an 11th node is adding, that node can take ~9 partitions from each node | number of partitions is usually fixed when database is set up, making this less ideal if the size of the data set is variability (might grow much larger over time) | hard to achieve ‘just right’ partition amount | . Dynamic Partitioning . | fixed number of partitions wouldn’t work well with key range partitioned databases, so dynamic partitioning might be more effective | when a partition grows larger than a fixed size (HBase, default is 10GB), that partition is split and might be sent to separate nodes to balance the load | if partition shrinks, it might be combined with adjacent partition | can also be used for hash-partitioned data | . Partitioning Proportionally to Nodes . | have a fixed number of partitions per node, and those partitions grow larger with dataset size, but adding a node decreases size of partitions again | requires hash-based partitioning, as new node randomly takes data from other nodes, and if hash-based partitioning isn’t used, this would lead to unfair splits | . Automatic or Manual Rebalancing . | generally a good idea to have a human in the loop, as rebalancing is expensive and automation might be unpredictable | . Request Routing . | how does a client know which node to send a request to (who makes the routing decision)? | an example of a more general problem called service discovery | a few different approaches to the problem: . | allow clients to contact any node (e.g. via a round-robin loader balancer) – if that node contains the information, return it, otherwise forward the request to the correct node | send all requests to a routing tier first acting as a partition-aware load balancer | require that clients be aware of partitioning and assignment of partitions, so a client can connect directly to a node | . | many distributed data systems rely on a coordination service such as Zookeeper to keep track of this cluster metadata | Espresso uses Helix | HBase, SolrCloud, and Kafka use Zookeeper | MongoDB uses its own config server and mongos daemon as the routing tier | Cassandra and Riak use gossip protocol, putting more complexity into database nodes but doesn’t require external coordination service | DNS is sufficient for IP address lookup | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-6-partitioning",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-6-partitioning"
  },"266": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": ". | goal of partitioning is to spread the data and query load evenly across multiple machines, avoiding hot spots | this requires a partitioning scheme that is appropriate to the data, and rebalancing partitions when nodes are added to or removed from the cluster | two types of partitioning . | key range partitioning . | keys are sorted and a partition owns all the keys from some minimum up to some max. | sorting has the advantage that efficient range queries are possible, but there is risk of hot spots if application often access keys that are close together in the sorted order | . | hash partitioning . | where a has function is applied to each key, and a partition owns a range of hashes | destroys the ordering of keys making range queries inefficient, but may distribute load more evenly | when partitioning by hash it is common to create a fixed number of partitions in advance, to assign several partitions to each node, and to move entire partitions form one node to another when nodes are added or removed | . | . | hybrid approaches are also possible, e.g. using one part for the hash and the second part for the sort order | two types of secondary index partitions . | document-partitioned indexes (local indexes) . | secondary indexes stored in the same partition as the primary key and value | only a single partition needs to be updated on write, but read of secondary index requires scatter/gather across all partitions | . | term-partitioned indexes (global indexes) . | secondary index are partitioned separately using indexed values | entry in the secondary index may include records from all partitions of the primary key | when document is written, several partitions of the secondary index need to be updated, however a read can be served from a single partition | . | . | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-5",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-5"
  },"267": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 7: Transactions",
    "content": "What is a Transaction? . | many things can go wrong with modern data systems, and thinking around how to tolerate those faults is difficult | transactions are a way to group reads and writes into one unit of work that either succeeds (commits) or fails (aborts, or rollbacks) to simplify the programming model for applications accessing a database | safety guarantees - using transactions, applications are free to ignore certain potential error scenarios and concurrency issues because the database takes care of them | the idea of a transaction came out of IBM’s System R (1975), and modern transaction support is very similar still | . ACID . | term coined in 1983 by Theo Harder and Andreas Reuter to document fault-tolerance mechanisms of databases | ACID is ambiguous and depends on implementation | opposite is BASE (Basically Available, soft state, and eventual consistency), although this term was somewhat of a joke | . Atomicity . | all writes either succeed (commit) or don’t (rollback), so if a fault happens during a write there is no partial write state | abortability might be a better term not a principle of concurrency, as in some domains concurrency means that no threads could see a half-finished state . | . Consistency . | consistency is an overloaded term – might mean: replica consistency, consistent hashing, linearizability in the C in CAP theorem, or in the ACID context “being in a good state” | in ACID context, consistency means that your data doesn’t violate any invariants, or generally statements about your data that must be true, e.g. that no invoice dollar amounts are negative, that all accounts are balanced across all nodes, etc. | databases can’t typically guarantee invariants aren’t violated, so consistency in this context is an attribute of the application rather than the database | . Isolation . | concurrently executing transactions are isolated from each other | typically cast as serializability, or the idea that each transaction can pretend that it is the only transaction running, as if transactions are run serially (one after another) even if it was actually concurrently | in practice, serial isolation is rarely used because it has a performance penalty, so often, snapshot isolation is implemented | . Durability . | the promise that once a transaction has completed, data won’t be forgotten | data is fsync’d to nonvolatile storage (HDD or SSD), or written to write-ahead log, or in distributed systems, replicated to nodes | no such thing as perfect durability, since all nodes and backups could be destroyed | . Multi-object Writes . | atomicity and isolation should apply when multiple objects need to be updated in a transaction, e.g. one table is updated, then another object is incremented in another table (typically achieved by explicitly wrapping SQL as a transaction e.g., BEGIN TRANSACTION [...] COMMIT) | some use cases for multi-object atomicity and isolation . | foreign key updates | in a document data model, fields that need to be updated are within the same document, but if denormalized data is stored that require two or more documents to be updated, you need multi-object guarantees | databases with secondary indexes | . | . Single-object Writes . | databases and datastores almost universally aim to provide atomicity and isolation on the level of a single object on a single node | some provide more complex operations such as an increment operation (removing the need for a read, modify, write cycle) | also, some provide compare-and-set operations, which only allow a value to be changed if it has not been concurrently changed by someone else | . Handling Errors and Aborts . | the whole point of aborts are to allow safe retries, although certain ORM tools don’t allow them out of the box (Rail’s ActiveRecord and Django) | retries aren’t foolproof: . | network might fail upon alerting the client to a successful commit, | if the error is due to overload, | if there is a more permanent error, | if the transaction has side effects, or | if the client process fails while writing causing data loss | . | . Weak (Non-Serializable) Isolation Levels . | concurrency issues (race conditions) only come into play when two or more transactions are reading or modifying the same data | transaction isolation - databases trying to hide concurrency issues from application developers | serializable isolation is the highest level, but there is a performance cost, so databases mostly use weaker forms of isolation | . Read Committed . | makes two guarantees: . | no dirty reads - when reading from a database, you will only see data that has been committed | no dirty writes - when writing to a database you will only overwrite data that has been committed, typically achieved by delaying the second write until the first write’s transaction is committed or aborted | . | default setting in Oracle 11g, PostgreSQL, SQL Server 2012, MemSQL | most commonly, databases prevent dirty writes by implementing row locks | for dirty reads, locks for writes would be bad for operability – one long-running write might slow down many reads, so typically, databases will remember the old value during a write and give that to any read until the write is committed | . Snapshot Isolation and Repeatable Read . | non-repeatable read (read skew) - one in which data read twice inside the same transaction cannot be guaranteed to contain the same value. Depending on the isolation level, another transaction could have nipped in and updated the value between the two reads. | This is allowed in read committed isolation, but might not be tolerable for backups, analytics queries, or integrity checks | snapshot isolation - each transaction reads from a consistent snapshot of the database, or, a transaction sees all data that was committed to the database at the start of the transaction | readers never block writers, and writers never block readers | multi-version concurrency control (MVCC) - used to keep several versions of an object side by side | different implementations use different terms for snapshot isolation (Oracle - serializable, PostgreSQL and MySQL - repeatable read) – there is no agreement on what snapshot isolation/repeatable read is per SQL standard | . Lost Updates . | if two writes occur concurrently, the second write might complete and clobber the first, especially in a read-modify-write cycle | one way around this is atomic write operations, or something like | . | 1 . | UPDATE counters SET value = value + 1 WHERE key = 'foo'' . | . | you might also explicitly lock rows using SQL’s SELECT * FROM tbl WHERE value = 'abc' FOR UPDATE in a transaction | you could also automatically detect lost updates and abort a transaction (supported by PostgreSQL’s repeatable read, Oracle’s serializable, SQL Server’s snapshot isolation, but not by MySQL’s repeatable read) | another way is to do a compare-set operation (which might not fail if snapshot isolation is enabled) | . | 1 2 . | UPDATE wiki_pages SET content = 'new content' WHERE id = 1234 and content = 'old content'; . | . Write Skews and Phantoms . | write skew anomaly - two transactions (T1 and T2) concurrently read an overlapping data set (e.g. values V1 and V2), concurrently make disjoint updates (e.g. T1 updates V1, T2 updates V2), and finally concurrently commit, neither having seen the update performed by the other | phantom - where a write in one transaction changes the results of a search query in another transaction – often occurs when a check is executed for absence of rows matching a search condition and a write adds a row matching the same condition, so there is nothing to attach a lock onto with a SELECT FOR UPDATE query | . Imagine Alice and Bob are two on-call doctors dealing with the invariant that one doctor always needs to be on call. They both initiate a request for a day off at the same time: . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 . | ALICE BOB ┌─ BEGIN TRANSACTION ┌─ BEGIN TRANSACTION │ │ ├─ currently_on_call = ( ├─ currently_on_call = ( │ select count(*) from doctors │ select count(*) from doctors │ where on_call = true │ where on_call = true │ and shift_id = 1234 │ and shift_id = 1234 │ ) │ ) │ // now currently_on_call = 2 │ // now currently_on_call = 2 │ │ ├─ if (currently_on_call 2) { │ │ update doctors │ │ set on_call = false │ │ where name = 'Alice' │ │ and shift_id = 1234 ├─ if (currently_on_call &gt;= 2) { │ } │ update doctors │ │ set on_call = false └─ COMMIT TRANSACTION │ where name = 'Bob' │ and shift_id = 1234 │ } │ └─ COMMIT TRANSACTION . | . | one method around this is to materialize conflicts, or explicitly create objects for those search conditions so locks can be applied directly, although it can be hard and error-prone to materialize conflicts | . Serializability . | serializability is the strongest form of isolation because: . | isolation levels are hard to understand and variously implemented | application code might not clearly tell you what isolation level you need to run at | there are no good tools to detect race conditions because they are non-deterministic and subject to timing | . | three current methods to implement serializability: actual serialized executions, two-phase locking, and serializable snapshot isolation (SSI) | . Actual Serial Execution . | simplest way to avoid concurrency problems is to execute the queries serially | historically, this was difficult because a single-threaded loop for executing transactions wasn’t feasible: . | cost of RAM too high | OLTP transactions were disambiguated from analytic transactions | . | downsides of serialized execution: . | throughput limited to a single core CPU, which is difficult for high write throughput use cases | . | constraints of serial execution . | every transaction must be small and fast | active dataset must fit into memory | write throughput needs to be low enough to be handled by single CPU or partitioned without requiring cross-partition coordination | cross-partition transactions are possible but limited | . | . Stored Procedures . | a way of encapsulating interactive multi-statement transactions that are often required of today’s websites, or, the ability to complete multiple database queries (e.g., for an airline: query flights, book tickets, change seats, all within the same sesssion or as part of the same form submission) | stored procedure can execute very fast, provided all data is in memory | stored procedures can be difficult because: . | each database vendor has a language for stored procedures (although many modern database systems are allowing for general purpose programming languages to be used) | code running in a database is difficult to manage (debug, check in to version control, etc.) | . | . Partitioning . | if you can find a way of partitioning a dataset so that each transaction only needs to read and write within a single partition, each partition can have its own transaction thread | performance drops immensely when multiple partitions are used | . Two-Phase Locking (2PL) . | only widely used algorithm for serializability for ~30 years (up to 1970s) 2PL is not 2PC . | if anyone wants to write (modify or delete) an object, exclusive access is required, blocking both readers and writers with locks | this distinguishes it from snapshot isolation, where readers never block writers and writers never block readers, and this isolation protects against most race conditions | 2PL is serializability model used by MySQL (InnoDB) and SQL Server, and is repeatable read isolation in DB2 | each object has a lock, operating in either shared or exclusive mode . | reading an object requires getting lock in shared mode, and many transactions can hold the lock | once a transaction wants to write, it acquires the exclusive lock, and only one of those is every allowed to be held | you can upgrade a shared to an exclusive lock | must hold the lock until transaction commits or aborts, which is second part of two phase: first phase - transaction is executing / exclusive lock acquired, second phase - transaction ends / locks released | . | deadlock can occur when one transaction is waiting on another to finish | because of acquiring all those locks and 0 concurrency, performance is not great. also, deadlocks that require abort and retry are wasted work | in order to prevent phantoms, predicate locks need to be created – these locks are applied to objects that meet certain conditions. | predicate locks do not perform well, so index-range locks (aka next key locking are needed, which are a more generalizable way to create predicate locks (instead of creating a predicate lock on a room 123 between 12 and 1, a predicate lock could be added to lock all bookings for room 123) | . Serializable Snapshot Isolation (SSI) . | fairly new, first described in 2008 | two types of concurrency control: . | pessimistic the assumption is that if anything might go wrong, its better to wait until the situation is safe again before doing anything, e.g., acquiring exclusive locks like mutual exclusions (mutex) which are used to protect data structures in multi-threaded programming . | optimistic - instead of blocking, transactions continue anyway, in the hope that things turn out all right, and if a transaction breaks an isolation then it will be aborted | . | based on snapshot isolation – all transactions read from a consistent snapshot of the database | the idea is to limit the rate of aborts, which significantly affects performance of SSI | . Chapter Summary . | Transactions are an abstraction layer that allows an application to pretend that certain concurrency problems and certain kinds of hardware and software faults don’t exist. Many errors reduced to simple transaction abort, and the application can just retry | transactions probably won’t help applications with simple access patterns (read or write a single record) | without transactions: . | various error scenarios (processes crashing, network interruptions, power outages, disk full, unexpected concurrency, etc.) mean data can become inconsistent e.g., denormalized data can go out of sync with source data | it becomes very difficult to reason about the effects that complex interacting accesses can have on the database | . | several widely used methods of concurrency control: read commited, snapshot isolation (sometimes called repeatable read) and serializable | examples of race conditions . | dirty reads - one client reads another client’s writes before they have been committed. read committed and stronger prevent dirty reads | dirty writes - one client overwrites the data that another client has written but not yet committed. almost all transaction implementations prevent dirty writes | read skew (nonrepeatable reads) - a client sees different parts of the database at different times. most commonly prevented by snapshot isolation, which allows a transaction to read from a consistent snapshot at one point of time, which is typically implemented with multi-version concurrency control (MVCC) | lost updates - two clients concurrently perform a read-modiy-write cycle. One overwrites the other’s write without incorporating changes, so data is lost. some implementations of snapshot isolation prevent this, while others require a manual lock (SELECT [...] FOR UPDATE) | write skew - a transaction reads something, makes a decision based on the value it saw, and writes the decision to the database. by the time the write is made, the premise of the decision is no longer true. only prevented by serializable isolation | phantom reads - a transaction reads the objects that match some search condition and another client makes a write that affects the results of that search. snapshot isolation prevents straightforward phantom reads, but phantoms in the context of write skew require special treatment, such as index-range locks | . | weak isolation protects against some of these race conditions, but the application developer might need to handle others manually. only full prevention is serializability, which takes three forms: . | literally executing transactions in serial order - if you can make each transaction very fast to execute, and the transaction throughput is low enough to process on a single CPU core, this is simple and effective | two-phase locking - for decades this has been the standard way of implementing serializability, but many apps avoid using it because of its performance characterisitics | serializable snapshot isolation (SSI) - a fairly new algorithm that avoids most of the downsides of previous approaches. uses an optimistic approach, allowing transactions to proceed without blocking. when a transaction wants to commit, it is checked, and it is aborted if the execution was not serializable. | . | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-7-transactions",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-7-transactions"
  },"268": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 8: The Trouble with Distributed Systems",
    "content": "Faults and Partial Failures . Writing a program on a single computer, things typically work or they don’t. When the hardware is working, the same operation should always produce the same output (deterministic). Computers are deliberately designed for total system failure when an internal fault occurs rather than producing the wrong result, because the wrong result is hard to debug. If we are writing software to run on several computers, things are completely different. In distributed systems, there may be parts of the system that are broken in some unpredictable way, resulting in a partial failure. These partial failures tend to be non-deterministic and difficult to reason about. Cloud Computing and Supercomputing . There are two spectrums on how to build large-scale computer systems: . | high-performance computer (HPC) - supercomputers with thousands of CPUs, used for computationally intensive scientific computing tasks . | cloud computing - not well defined, but typically associated with multi-tenant datacenters, commodity computers, elastic/on-demand resource allocation, and metered billing . | . These philosophies handle faults differently. One approach for supercomputers is if there is any fault, to fail the entire system. | Supercomputers | Cloud Computer | . | batch jobs can be started and stopped fairly easily | many internet applications are online, and any service unavailability is unacceptable | . | built from specialized hardware and communicate through remote direct memory access (RDMA) so faults are infrequent | due to economies of scale can be provided at lower cost but has higher failure rates | . | use specialized network topologies yielding higher performance | often communicate through IP and Ethernet arranged in Clos topologies that provide high bisection bandwith | . | assume all their nodes are close | nodes might be geographically distributed | . If we want to make distributed systems work, we must accept the possibility of partial failure and build fault tolerance mechanisms, i.e., to build reliable systems from unreliable components. Unreliable Networks . Many distributed systems are shared-nothing systems, i.e., a bunch of machines connected by a network without the ability to access each other’s memory or disk. This has become the dominant way to build systems because: . | comparatively cheap | requires no special hardware | makes use of commoditized cloud computing services | achieves high reliability through redundancy across multiple geographically distributed datacenters | . The internet and internal networks are asynchronous packed networks, meaning one node can send a message (a packet) to another node, but no guarantees when it will arrive or if it will arrive at all. If you send a request to another node and don’t receive a response, it is impossible to tell why . Network Faults in Practice . Network faults (network partitions or netsplits) can be surprisingly common, e.g., . | EC2 has frequent transient network glitches | sharks could bite undersea cables | software upgrade for a switch could trigger a network topology reconfig | . If software is put in an unanticipated situation, it might do arbitrarily unexpected things. Handling faults doesn’t always mean tolerating them; you might just raise the error. Detecting Faults . Many systems need to automatically detect nodes: . | load balancer needs to stop sending requests (take out of rotation) | in single leader replication, leader failover | . Some methods of detecting a failure might be: . | if you send requests to a node that is running but no process is listening, the OS will close or refuse TCP connections wtih a RST or FIN packet | if the node’s OS is still running, a script can notify other nodes about crash | you might be able to query the network switches themselves to detect hardware failure | router might see that an IP address is unavailable and send an ICMP Destination Unreachable packet. | . Timeouts and Unbounded Delays . How long should the timeout be? A long timeout means a long wait to see if node is dead, and a short timeout might incorrectly declare nodes dead for longer running queries. Prematurely declaring a node dead is problematic, as it might just be operating slowly under load. Declaring the node dead might cause a cascading failure as the system can’t cope with increased load and fewer resources. Asynchronous networks have unbounded delays, or, there is no upper limit on time it takes for packet to arrive. Network Congestion and Queueing . Variability in packet delays most often due to queueing. | If several nodes send packets simultaneously, the network switch queues them, and on a busy network, the queue might fill up (network congestion). | If all CPU cores are busy, the OS queues up the request. | TCP performs flow control (aka congestion avoidance or backpressure) to limit is own rate of sending to avoid over-burdening a network link or receiving node | . Choosing timeouts is trial and error, and the balance is between failure detection delay and risk of premature timeouts. Systems that continually measure repsonse times and variability (jitter) are better than manually tuning. TCP vs UDP . Latency sensitive applications (such as videoconferencing and VOIP) use UDP, which doesn’t perform flow control or resend lost packets. UDP is good in situations where delayed data is worthless. Synchronous vs. Asychronous Networks . A telephone network estabilishes a circuit, we say is synchronous even as the data passes through several routers as it does not suffer from queing. The maximum end-to-end latency of the network is fixed (bounded delay). A circuit is a fixed amount of reserved bandwidth which nobody else can use while the circuit is established, whereas packets of a TCP connection opportunistically use whatever network bandwidth is available. Using circuits for bursty data transfers wastes network capacity and makes transfer unnecessary slow. By contrast, TCP dinamycally adapts the rate of data transfer to the available network capacity. We have to assume that network congestion, queueing, and unbounded delays will happen. Consequently, there’s no “correct” value for timeouts, they need to be determined experimentally. Unreliable Clocks . Time is tricky – sending messages is not instantaneous, and because of delays in networks, it is difficult to determine order things happened. Also, each machine has its own clock, which is typically a hardware device: a quartz crystal oscillator, which may run faster or slower than other clocks. One way around this is to synchronize time, e.g. as used in Network Time Protocol (NTP). | time-of-day clocks - returns date and time according to some calendar (wall-clock time), and usually synced with NTP, which means if it is running faster than the server it might appear to jump back in time, meaning it isn’t suitable for elapsed time measurements. | monotonic clocks - good for measuring duration, as it is always guaranteed to move forward. The value of the monotonic clock is arbitrary (it might be time since computer turned on), making it impossible to compare monotonic clock values from two computers. | . Clock Synchronization and Accuracy . Quartz clocks in computers might drift (Google assumes clock drift of 17 seconds for a clock that is synchronized to NTP once a day). Also, a clock that is too different might refuse to sync. Leap seconds result in time dilation – best way to deal is to smear, or spread out the difference over a whole day. Relying on Synchronized Clocks . Incorrect clocks often go unnoticed, so if clock drift would affect your processes, you must carefully monitor and declare dead any resources where the clock drifts too far afield. Timestamps for Ordering Events . It is tempting, but dangerous to rely on clocks for ordering of events across multiple nodes. This usually imply that last write wins (LWW), often used in both multi-leader replication and leaderless databases like Cassandra and Riak, and data-loss may happen. The definition of “recent” also depends on local time-of-day clock, which may well be incorrect. Logical clocks, based on counters instead of oscillating quartz crystal, are safer alternative for ordering events. Logical clocks do not measure time of the day or elapsed time, only relative ordering of events. This contrasts with time-of-the-day and monotic clocks (also known as physical clocks). Clock Readings Have a Confidence Interval . It doesn’t make sense to think of a clock reading as a point in time, it is more like a range of times, within a confidence internval: for example, 95% confident that the time now is between 10.3 and 10.5. The most common implementation of snapshot isolation requires a monotonically increasing transaction ID. Google’s Spanner implements snapshot isolation across datacenters by using clock’s confidence interval. If you have two confidence internvals where . | 1 2 . | A = [A earliest, A latest] B = [B earliest, B latest] . | . And those two intervals do not overlap (A earliest &lt; A latest &lt; B earliest &lt; B latest), then B definetively happened after A. Spanner deliberately waits for the length of the confidence interval before commiting a read-write transaction, so their confidence intervals do not overlap. Spanner needs to keep the clock uncertainty as small as possible, that’s why Google deploys a GPS receiver or atomic clock in each datacenter. Process Pauses . One method of determining leader in a leader-based system is for the leader to get a lease, and renew it periodically. This process might be flawed for several reasons: . | garbage collection might stop processing while garbage is cleaned(stop-the-world) | virtual machines can be suspended and resumed and this pause can last for an aribtrary length of time | execution might be suspended when user suspends their session (closing laptop lid) | when OS switches to another thread or hypervisor to another machine, threads can be paused (steal time) | thread paused for disk access | memory access resulting in page fault (thrashing, or spending most of its time swapping pages into and out of memory) | unix process can be paused via SIGSTOP | . Fairly good tools for making things thread-safe: mutexes, semaphores, atomic counters, lock-free data structures, blocking queues, etc. But these tools don’t translate to dsitributed system because there is no shared memory. Response Time Guarantees . There are systems that require software to respond before a specific deadline (real-time operating system, or RTOS). Library functions must document their worst-case execution times; dynamic memory allocation may be restricted or disallowed and enormous amount of testing and measurement must be done. Limiting the Impact of Garbage Collection . Garbage collection could be treated like brief planned outages. If the runtime can warn the application that a node soon requires a GC pause, the application can stop sending new requests to that node and perform GC while no requests are in progress. A variant of this idea is to use the garbage collector only for short-lived objects and to restart the process periodically. For example, Instagram turned off Python’s garbage collection entirely to be more performant. Knowledge and Truth in Distributed Systems . In a distributed system, we can state the assumptions we are making about the behavior (system model) of a system. The Truth is Defined by the Majority . Many distributed systems rely on quorums, or majority votes, to determine what the truth is, e.g., whether a node is dead. There can only be one majority at a time. Fencing Tokens . We need to ensure that a node that is under a false belief of being “the chosen one” cannot disrupt the rest of the system . fencing token - a monotonically increasing token that a client needs to include to a write to a data system, which should prevent undetected lease expiry. Byzantine Faults . byzantine fault - is a condition of a computer system, particularly distributed computing systems, where components may fail and there is imperfect information on whether a component has failed. Byzantine General Problem . In its simplest form, the generals must decide only whether to attack or retreat. Some generals may prefer to attack, while others prefer to retreat. The important thing is that every general agree on a common decision, for a halfhearted attack by a few generals would become a rout, and would be worse than either a coordinated attack or a coordinated retreat. The problem is complicated by the presence of treacherous generals who may not only cast a vote for a suboptimal strategy, they may do so selectively. For instance, if nine generals are voting, four of whom support attacking while four others are in favor of retreat, the ninth general may send a vote of retreat to those generals in favor of retreat, and a vote of attack to the rest. Those who received a retreat vote from the ninth general will retreat, while the rest will attack (which may not go well for the attackers). The problem is complicated further by the generals being physically separated and having to send their votes via messengers who may fail to deliver votes or may forge false votes. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-8-the-trouble-with-distributed-systems",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-8-the-trouble-with-distributed-systems"
  },"269": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": ". | Whenever you try to send a packet over the network, it may be lost or arbitrarily delayed. Likewise, the reply may be lost or delayed, so if you don’t get a reply,you have no idea whether the message got through. | A node’s clock may be significantly out of sync with other nodes (despite your best efforts to set up NTP), it may suddenly jump forward or back in time, and relying on it is dangerous because you most likely don’t have a good measure ofyour clock’s error interval. | A process may pause for a substantial amount of time at any point in its execu‐tion (perhaps due to a stop-the-world garbage collector), be declared dead byother nodes, and then come back to life again without realizing that it waspaused. | . The fact that such partial failures can occur is the defining characteristic of distributed systems. Whenever software tries to do anything involving other nodes,there is the possibility that it may occasionally fail, or randomly go slow, or not respond at all (and eventually time out). In distributed systems, we try to build tolerance of partial failures into software, so that the system as a whole may continue functioning even when some of its constituent parts are broken. To tolerate faults, the first step is to detect them, but even that is hard. Most systems don’t have an accurate mechanism of detecting whether a node has failed, so most distributed algorithms rely on timeouts to determine whether a remote node is still available. However, timeouts can’t distinguish between network and node failures,and variable network delay sometimes causes a node to be falsely suspected of crash‐ing. Moreover, sometimes a node can be in a degraded state: for example, a Gigabit network interface could suddenly drop to 1 Kb/s throughput due to a driver bug.Such a node that is “limping” but not dead can be even more difficult to deal with than a cleanly failed node. Once a fault is detected, making a system tolerate it is not easy either: there is no global variable, no shared memory, no common knowledge or any other kind of shared state between the machines. Nodes can’t even agree on what time it is, let alone on anything more profound. The only way information can flow from one node to another is by sending it over the unreliable network. Major decisions cannot be safely made by a single node, so we require protocols that enlist help from other nodes and try to get a quorum to agree. If you’re used to writing software in the idealized mathematical perfection of a single computer, where the same operation always deterministically returns the same result,then moving to the messy physical reality of distributed systems can be a bit of a shock. Conversely, distributed systems engineers will often regard a problem as trivial if it can be solved on a single computer, and indeed a single computer can do a lot nowadays. If you can avoid opening Pandora’s box and simply keep things on a single machine, it is generally worth doing so. However, as discussed in the introduction to Part II, scalability is not the only reason for wanting to use a distributed system. Fault tolerance and low latency (by placing data geographically close to users) are equally important goals, and those things can‐not be achieved with a single node. Whether the unreliability of networks, clocks, and processes is an inevitable law of nature. We saw that it isn’t: it is possible to give hard real-time response guarantees and bounded delays in net‐works, but doing so is very expensive and results in lower utilization of hardware resources. Most non-safety-critical systems choose cheap and unreliable over expensive and reliable. Also supercomputers, which assume reliable components and thus have to be stopped and restarted entirely when a component does fail. By contrast,distributed systems can run forever without being interrupted at the service level,because all faults and maintenance can be handled at the node level—at least in theory. (In practice, if a bad configuration change is rolled out to all nodes, that will still bring a distributed system to its knees.) . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-7",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-7"
  },"270": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 9: Consistency and Consensus",
    "content": "consensus - An important abstraction in distributed systems which means getting the nodes to all agree on something. This can be a tricky problem in the presence of network faults and process failures. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-9-consistency-and-consensus",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-9-consistency-and-consensus"
  },"271": {
    "doc": "Designing Data Intensive Applications",
    "title": "Consistency Guarantees",
    "content": "When you look at two database nodes at the same time, you might see different data because write requests arrive to nodes at different times. Most databases provide eventual consistency, or the idea that if you stop writing and wait an unspecified amount of time, all reads will return the same value. This might also be called convergence. Transactions are not the same as distributed consistency models: transaction isolation is primarily about avoiding race conditions due to concurrently executing transactions, whereas distributed consistency is mostly about coordinating the state of replicats in the face of delays and faults. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#consistency-guarantees",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#consistency-guarantees"
  },"272": {
    "doc": "Designing Data Intensive Applications",
    "title": "Linearizability",
    "content": "linearizability (aka atomic consistency, strong consistency, immediate consistency, external consistency) - A recency guarantee that a system appears as if there is only one copy of the data even if there are many, and all operations are atomic. What Makes a System Linearizable? . In linearizable systems there must be some point in time at which the value for a register (a single object, as in a key:value, a row, a document) must atomically switch from old value to new, and if one read returns the new value, all subsequent reads must return the new value. three operations: . | read(x) =&gt; v read from register x, return value v | write(x, v) =&gt; r client requests to set register x to v and returns response r | cas(x, vold, vnew) =&gt; r an atomic compare-and-set operation. If the value of the register x equals v_old, it is atomically set to v_new. If x != v_old the registers is unchanged and it returns an error | . serializability - is an isolation property of transactions where every transaction may read or write multiple objects, and guarantees that transactions behave as if they were executed in some serial order . linearizability - a recency guarantee on reads and writes of a register (single object), so it doesn’t prevent problems such as write skew . strict serializability (aka strong one-copy serializability) - database provides both linearizability and serializability . Relying on Linearizability . Some systems require linearizability: . | locking and leader election - To ensure that there is indeed only one leader, a lock is used. It must be linearizable: all nodes must agree which nodes owns the lock; otherwise its useless. Apache Zookeeper and etcd are often used for distributed locks and leader election. | constraints and uniqueness guarantees - in order to enforce uniqueness, system needs to be linearizable | cross-channel timing dependencies - if there are multiple communication channels for messages and data to travel, there might be a race condition between those two channels (think message queue and file system writes) | . Implementing Linearizable Systems . Simplest approach would be to only have a single copy of the data, but that system wouldn’t tolerate faults. The most common approach to making a system fault-tolerant is to use replication. single-leader replication (potentially linearizable) - if you make reads from the leader or synchronously updated followers, they have the potential to be linearizable, unless using snapshot isolation or due to bugs . consensus algorithms (linearizable) - bear a resemblance to single-leader, but prevent split brain and stale replicas . multi-leader replication (not linearizable) - concurrently process writes on multiple nodes and asynchronously replicate . leaderless replication (probably not linearizable) - last write wins based on time of day clocks and sloppy quorums prevent linearizability . The Cost of Linearizability . The CAP Theorem . In the presence of network partitions (faults/interruptions), your application can either be available (but might serve nonlinearizable/stale reads) or consistent (linearizable but would send errors instead of stale data). Applications that don’t need to be linearizable have a higher tolerance for consistency and availability in the presence of network partitions. Defined by Eric Brewer in 2000 as a rule of thumb, the definitions of high availability (fault tolerance) can be misleading, and CAP theorem is best avoided, although it has been historically influential and led to explosion in alternate data storage models (NoSQL). Linearizability and Network Delays . Even RAM on a modern multi-core CPU is not linearizable. The reason for dropping linearizability is performance, not fault-tolerance. Response time for read and write requests is at least proportional to the uncertainty of network delays in the network, so a faster algorithm for linearizability doesn’t exist, but weaker consistency models can be much faster. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#linearizability",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#linearizability"
  },"273": {
    "doc": "Designing Data Intensive Applications",
    "title": "Ordering Guarantees",
    "content": "Ordering is a very important concept, e.g., main purpose of leader is to determine order of writes in replication log, serializability is ensuring writes in some sequential order, and use of timestamps is an attempt to introduce order. Ordering and Causality . Order helps preserve causality. If a system obeys the ordering imposed by causality, it is causally consistent. The causal order is not a total order . A total order allows any two elements to be compared (e.g., natural numbers 2&lt;3). Math sets (e.g., {a, b}, {c, d}) are incomparable, or partially ordered. In linearizable systems, we have total order of operations based on timing, but causality defines partial order, as two events are incomparable if they are concurrent. Linearizability is stronger than causal consistency . Linearizability implies causality, but many systems that seem to require linearizability only need causal consistency. Causal consistency is the strongest consistency model that does not slow down due to network delays and remains available during network delays. In order to determine the causal ordering, the database needs to know which version of the data was read by the application. The version number from the prior operation is passed back to the database on a write. We can create sequence numbers in a total order that is consistent with causality. With a single-leader replication, the leader can simply increment a counter for each operation, and thus assign a monotonically increasing sequence number to each operation in the replication log. If there is not a single leader (multi-leader or leaderless database): . Each node can generate its own independent set of sequence numbers. One node can generate only odd numbers and the other only even numbers. Attach a timestamp from a time-of-day clock. Preallocate blocks of sequence numbers. The only problem is that the sequence numbers they generate are not consistent with causality. They do not correctly capture ordering of operations across different nodes. There is simple method for generating sequence numbers that is consistent with causality: Lamport timestamps. Each node has a unique identifier, and each node keeps a counter of the number of operations it has processed. The lamport timestamp is then simply a pair of (counter, node ID). It provides total order, as if you have two timestamps one with a greater counter value is the greater timestamp. If the counter values are the same, the one with greater node ID is the greater timestamp. Every node and every client keeps track of the maximum counter value it has seen so far, and includes that maximum on every request. When a node receives a request of response with a maximum counter value greater than its own counter value, it inmediately increases its own counter to that maximum. As long as the maximum counter value is carried along with every operation, this scheme ensure that the ordering from the lamport timestamp is consistent with causality. Total order of oepration only emerges after you have collected all of the operations. Total Order Broadcast . total order broadcast - the problem of how to handle total order of operations in distributed systems where the throughput is more than a single leader can handle, or failover needs to happen. Total order broadcast is usually described as a protocol for exchanging messages between two nodes, and it requires that two safety properties always be satisfied: . | reliable delivery - no message is lost: if a message is delivered to one node it is deliverd to all nodes | totally ordered delivery - messages are delivered to every node in the same order | . state machine replication - if every message represents a write to the database, and every replica processes the same writes in the same order then all replicas witll remain consistent with each other. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#ordering-guarantees",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#ordering-guarantees"
  },"274": {
    "doc": "Designing Data Intensive Applications",
    "title": "Distributed Transactions and Consensus",
    "content": "Generally, the goal of consensus is to get several nodes to agree to something. Some examples where nodes need to agree: . | leader election - deciding which node is the leader in single-leader replication schemes | atomic commit - in database that supports transactions across several nodes or parititons, a transaction might fail on some nodes and not others | . FLP Result - maintains that there is no algorithm that is always able to reach a consensus if there is a risk that a node might crash, but consensus is solvable if allowed to use timeouts. Atomic Commit and Two-Phase Commit (2PC) . In a single node database, it is a single device, the controller of a particular disk drive, that makes a commit atomic. For multiple nodes, you can’t send the commit request to everyone and hope that things succeed – some might fail, causing nodes to become inconsistent. two-phase commit is the algorithm for achieving atomic transactions across multiple nodes. coordinator (aka transaction manager) queries participants (database nodes) with a prepare request. All nodes need to reply that they are ready to commit. If any participant says no, the commit fails. The process: . | application requests a globally unique transaction ID from the coordinator | application begins a single node transaction | when the application is ready to commit, the coordinator sends prepare requests (with transaction id) | participants ensure they can commit | when coordinator has received all responses, it makes a decision | once coordinator’s decision is written to disk, the commit or abort is sent to all participants – if any participants time out, the coordinator must try forever until success. | . coordinator failure . If the coordinator fails before sending the prepare requests, then the transaction is aborted. But if it fails after committing but before sending the confirmation, participants are in doubt or uncertain, and the coordinator must recover for the 2PC to work. three-phase commit . A two-phase commit is called a blocking atomic commit protocol because it might get stuck on coordinator. A nonblocking atomic commit requires a perfect failure detector, aka a reliable mechanism to detect whether a node has crashed or not. Distributed Transactions in Practice . Some implementations of 2PC carry heavy performance penalty (MySQL reported to be 10 times slower than single-node transactions) . There are two different types of distributed transactions: . | database-internal distributed transactions, where transaction is internal to nodes of a database all running the same software, and these can work very well | heterogeneous distributed transactions, where participants are two or more technlogies – these are much less performant | . exactly-once message processing . Message brokers leverage this atomic commit to ensure that a message is only delivered once, and any failures are aborted. Thus we can ensure a message is effectively processed only once. XA transactions . X/Open XA (Extended Architecture) is a standard for implementing two-phase commit across heterogeneous technologies. It is a C API. XA assumes that application uses a network driver or client library to communicate with downstream consumers, and leverages that to ensure atomic commits. Commits/aborts are saved to the local disk where the 2PC is coordinated, so if that server dies, it needs to be restarted if participants are in doubt. holding locks when in doubt . The reason we can’t ignore participants in doubt is because of locking. Databases typically take a row level exclusive lock on any row they update, and won’t release until the transaciton commits or aborts, and depending on the database other transactions may be blocked from reading. recovering from coordinator failure . Typically, coordinators resume and clean up any in doubt participants, but sometimes, there are orphaned in doubt participants because the coordinator didn’t resume cleanly. Only way to clean up is for the administrator to manually clean up. limitations of distributed transactions . Coordinators themselves are like a database and represent a single point of failure, and many coordinator implementations aren’t highly available by default. Many applications are stateless (as preferred by HTTP), but coordinators are typically implemented in the application code and thus change that calculus. XA needs to be compatible with many data systems and is thus a lowest common denominator incapable of dealing with specialized problems like deadlocks. Distributed transactions have a tendency of amplifying failure. Fault-Tolerant Consensus . Consensus can be framed like one or more node proposes values, and the consensus algorithm decides on values. For uniform consensus, you need: . | uniform agreement - no two nodes decide differently | integrity - no node decides twice | validity - nodes can only decide on values proposed | termination - every node that doesn’t crash immediately decides on values | . The best-known fault-tolerant consensus algorithms (Viewstamped Replication, Paxos, Raft, and Zab), agree on a sequence of events instead of the uniform consensus above, and are thus total broadcast algorithms. Total order broadcast requires messages to be delivered exactly once, in the same order, to all nodes. So total order broadcast is equivalent to repeated rounds of consensus: . | Due to agreement property, all nodes decide to deliver the same messages in the same order. | Due to integrity, messages are not duplicated. | Due to validity, messages are not corrupted. | Due to termination, messages are not lost. | . limitations of consensus . The process by which nodes vote on proposals before they are decided is a kind of synchronous replication, which is often less than ideal. Many consensus algorithms assume a fixed set of nodes to participate in voting so unless you have dynamic membership or can’t add nodes without changing the algorithm. Consensus systems rely on timeouts to detect failed nodes, but in systems with high latency (geopgraphically distributed systems) nodes falsely think leader has failed. Consensus algorithms are also sensitive to network delays, where leaders bounce from leader to dead frequently. Membership and Coordination Services . Zookeeper and etcd are described as “distributed key-value stores” or “coordination and configuration services”. They are rarely consumed directly, but HBase, Hadoop YARN, OpenStack Nova, and Kafka rely on them in the background. Zookeeper based on Google’s Chubby lock service, and implements the following features which makes it suited for distributed coordination: . | linearizable atomic operations | total ordering of operations | failure detection | change notifications | . Zookeeper, etcd, and Consul are used for service discovery, to find out which IP address you need to connect to to reach a particular service, but DNS is also typically used for this purpose. These services also can be used as membership services, which determines which node is alive and which isn’t. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#distributed-transactions-and-consensus",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#distributed-transactions-and-consensus"
  },"275": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": "Linearizability is a popular consistency model – its goal is to make replicated data appear as if there is only a single copy, and to make all operations on it atomic. This makes databases work like a variable in a single-threaded application, which makes it slow, especially in environments with large network delays. Causality is a weaker consistency model than linearizability that just needs to respect cause and effect ordering, like a version history timeline with branching and merging. Causal consistency does not have coordination overhead of linearizability and is less sensitive to network problems. With causal consistency, there might still be problems with concurrent writes and uniqueness, so consensus might be required. Consensus requires all nodes to agree, and that agreement is irrevocable. There are many problems that can be reduced to consensus: . | linearizable compare-and-set registers - the register needs to atomically decide whether to set its value based on whether its current value equals the parameter given in the operation | atomic transaction commit - a database must decide whetehr to commit or abort a distributed transaction | total order broadcast - the messaging system must decide on the order in which to deliver messages | locks and leases - when several clients try to get lease/lock, the lock decides which one successfully acquired it | membership/coordination service - given a failure detector (timeouts) the system must decide which nodes are alive and which are dead because their session timed out | uniqueness constraint - constraint must decide which write to allow and which should fail constraint violation | . In a single-leader database or a single node, these are easy. All power is in that single leader or single node. If leader fails, there are three ways to handle that problem: . | wait for the leader to recover | manually fail over by choosing a new leader node | use an algorithm to automatically choose a new leader | . In a single-leader node, you don’t need consensus on every write, but you do need it to choose a new leader. Tools like Zookeeper provide “outsourced” consensus, failure detection, and membership services. It is hard to use but easier than writing your own. Leaderless and multi-leader do not need global consensus. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-8",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-8"
  },"276": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 10: Batch Processing",
    "content": "Three types of systems: . | services (online systems) - a service waits for a request, and then sends back a response. usually, response time and availability are highest concern | batch processing systems (offline systems) - batch processing job takes a fixed set of a large amount of data, runs a job to process it, and produces output data. these are typically scheduled, and throughput is highest concern. | stream processing (near-real-time systems) - between a batch and a service. like a batch processor, it takes inputs and creates outputs, but does not operate on a fixed set of data but rather responds to events. this allows stream processing to have lower latency than batch processing. | . Batch processing has existed for a while – the Holerith machines made for the 1890 US census used a similar idea. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-10-batch-processing",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-10-batch-processing"
  },"277": {
    "doc": "Designing Data Intensive Applications",
    "title": "Batch Processing with Unix Tools",
    "content": "We can build a unix pipeline to process log files . | 1 2 3 4 5 6 . | cat /var/log/nginx/access.log | # read the log file awk '{print $7}' | # split each line into fields by whitespace and output the seventh field sort | # alphabetically sort uniq -c | # filters repeated lines, and the -c is for a counter sort -r -n | # sorts by number at the beginning (-c from above) then returns in reverse order -r head -n 5 | # outputs the first five lines (-n 5) and discards the rest . | . Many data analyses can be performed with a combination of awk, sed, grep, sort, uniq, and xargs. Choosing whether to sort in memory or spill over to disk is a matter of the size of your data set. The GNU sort functionality has the ability to spill over to disk for larger than memory datasets. The Unix Philosophy . Chaining commands together like connecting pipes together to achieve a goal via composition. Described by Doug McIlroy: . | Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new “features”. | Expect the output of every program to become the input to another, as yet unknown, program. Don’t clutter output with extraneous information. Avoid stringently columnar or binary input formats. Don’t insist on interactive input. | Design and build software, even operating systems, to be tried early, ideally within weeks. Don’t hesitate to throw away the clumsy parts and rebuild them. | Use tools in preference to unskilled help to lighten a programming task, even if you have to detour to build the tools and expect to throw some of them out after you’ve finished using them. | . There is a direct line to Agile and DevOps – automation, rapid prototyping, incremental iteration, being friendly to experimentation, and breaking down large projects into manageable chunks. A uniform interface . When you assume that any programs output could become any programs input, all programs need to use the same input/output interface. In Unix, that interface is a file/file descriptor (Unix - everything is a file). A file is just an ordered sequence of bytes, and many things can be represented via that interface. By convention, many (but not all) treat a sequence of bytes as ASCII text. The unix approach works best if a program simply uses stdin and stdout. This allows a shell user to wire up the input and output in whatever way they want; the program doesn’t know or care where the input is coming from and where the output is going to. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#batch-processing-with-unix-tools",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#batch-processing-with-unix-tools"
  },"278": {
    "doc": "Designing Data Intensive Applications",
    "title": "MapReduce and Distributed Filesystems",
    "content": "Like Unix tools, MapReduce normally doesn’t modify input and doesn’t have side effects other than producing output. Instead of stdin and stdout, MapReduce reads and writes on a distributed filesystem. In Hadoop’s version of MapReduce, the distributed file system is called Haddop Distributed File System (HDFS). HDFS is based on a shared-nothing architecture, in contrast to Network Attached Storage (NAS) or Storage Area Network (SAN) architectures. Shared disk storage is implemented via a centralized hardware, whereas distributed systems does not require special hardware and communicates via network. A daemon is runnign on each machine, and a central server called a NameNode keeps track of what is written where. File blocks are replicated on several machines. MapReduce jobs look like the Unix example above: . | read input and break up into records | call mapper to extrace key-value pairs | sort all key-value pairs by key | call the reducer function to iterate over those key-values | . | mapper - called once per record and it extracts one or many key-value pairs from a record. it does not retain state. | reducer - given all the values belonging to the same key and iterates over that collection (for aggregations, say) | . MapReduce allows you to parallelize acros many machines. You can write mappers and reducers in conventional programming languages. For Hadoop, its Java. For MongoDB and CouchDB, its Javascript. MapReduce tries to run each mapper on machine that holds the data, or, putting the computation near the data, which saves expensive network latency and increases locality. MapReduce Workflows . Range of problems that can be solved by a single map job is limited, so often MapReduce jobs are chained together in workflows. Unlike Unix, which uses in-memory buffers to pass between commands, workflows persist to the filesystem (materializing intermediary state). There are then dependencies between job executions, so workflow schedulers for Hadoop, like Oozie, Azkaban, Luigi, Airflow, and Pinball, have been developed. Also, higher-level tools for Hadoop, like Pig, Hive, Cascading Crunch, and FlumeJava set up workflows of MapReduce. Reduce-Side Joins and Grouping . joins and sort merges . Many datasets have an association with another record (foreign key in relational, document reference in document, edge in graph), and a join is needed if some code needs to access both record and its reference, and in a database you would use an index to quickly locate records. MapReduce has no concept of index as such. MapReduce jobs scan the entire contents of the files (a database would call this a full table scan, and this is very expensive), but MapReduce typically would be calculating aggregates across the full data set (like an analytic query), so this full scan is reasonable. For example, you might have clickstream data with just a user id, but you want to pull date of birth as well, and that only exists in a user database. You want to keep computation local to one machine to achieve good throughput for batch processing, so making random access queries for each record is not performant. One approach would be to pull the user database into a set of files and put it on the HDFS. Then, the output can be sort-merged to be in a single place. MapReduce has separated the physical network communication aspects (getting the data to the right machine) fropm the application logic (processing the data once you have it). By handling network, it also insulates application code from handling partial failures; MapReduce transparently retries failed tasks. group by . Another pattern of bringing data together is grouping (GROUP BY in SQL), e.g., counting the number of records in a group, adding up the records in a particular field, or picking the top n records given a ranking function. Grouping looks very similar to joining in process, as it relies on the sorting of identical keys. handling skew . Sometimes, there might be extremely large grouped objects (e.g., a social network where one user has millions of followers). These hot keys lead to skew, or imbalanced work loads (different than read/write skew race conditions). Apache Pig uses a skewed join, and Crunch uses sharded join to handle these workflows. Map-Side Join . Previous examples put join logic in reducer, but another method is to put join logic in mapper. Reduce-side has the advantage that you don’t need to make assumptions about input data, but downside is all the sorting, copying, and merging can be expensive. If you can make assumptions about the input data, map-side are faster. They don’t have a reducer; they take one input and write one output onto the filesystem. broadcast hash joins . If you need to join a large dataset to a small dataset, you could load the entire small dataset into memory and use it as a hash map. Pig (replicated joins), Hive (MapJoin), Cascading, and Crunch all support this, as does Impala’s data warehouse. partitioned hash joins . If inputs to the map-side join are partitioned in the same way, then you can apply the hash join approach to each partition independently . The Output of Batch Workflows . Google’s original use of MapReduce was to build indexes for its search engine. Even today, MapReduce is a good workflow for building search indexes for Lucene/Solr. Creating full-text indexes by scanning all documents is a good use case, and since indexes are read-only, the output is immutable. The mappers partition the set of documents as needed, each reducer builds the index for its partition, and the index files are written to the distributed filesystem. It pararellises very well. Machine learning systems such as clasifiers and recommendation systems are a common use for batch processing. key-value stores as batch process output . The output of those batch jobs is often some kind of database. So, how does the output from the batch process get back into a database? . Writing from the batch job directly to the database server is a bad idea: . | Making a network request for every single record is magnitude slower than the normal throughput of a batch task. | Mappers or reducers concurrently write to the same output database and it can be easily overwhelmed. | You have to worry about the results from partially completed jobs being visible to other systems. | . A much better solution is to build a brand new database inside the batch job an write it as files to the job’s output directory, so it can be loaded in bulk into servers that handle read-only queries. Various key-value stores support building database files in MapReduce including Voldemort, Terrapin, ElephantDB and HBase bulk loading. philosophy of batch process outputs . Batch processing adopts the Unix philosophy: input is left unchanged, any previous output is overwritten, there are no other side effects, and this makes them performant and easy to maintain. | if you introduce a software bug, you can roll back to a previous version easily | feature development can proceed more quickly (minimizing irreversibility) | automatic retries that will make batch processes more tolerant to transient issues | same set of files can be used as inputs for various jobs | separate the logic from the wiring | . Comparing Hadoop to Distributed Databases . Ideas of MapReduce had already been seen in massively parallel processing databases (MPP) before, but instead of focusing on parallel execution of analytic queries on a cluster of machines, MapReduce allows for something much more like an OS that can execute arbitrary programs. diversity of storage . Databases require you to structure you according to a particular model, while files on a distributed filesystem are just a sequence of bytes. Often, data is just dumped to a distributed file system without knowing what might be done. Although we might think it desirable to carefully structure data to ensure data quality (as in databases), sometimes making the data available is the most useful (see data warehouses and joins across previously disparate pieces of data). The interpretation of the data becomes the consumers problem (schema on read). This approach is the called the sushi principle (raw is better). diversity of processing models . MPP databases, because their entire stack is integrated, can be optimized for their particular use case, and SQL queries as a widely used declarative language can be effectively leveraged by business analysts (and their data viz tools, like Tableau). Not all processing can be sensibly expressed in SQL, however. MapReduce allows you to build a SQL engine on top of the data (e.g., Hive), but the functionality extends far beyond just that. MapReduce and SQL are just two processing models built on top of Hadoop, there can be many others. The Hadoop ecosystem includes random-access OLTP databases like HBase, MPP databases like Impala, and neither use MapReduce. designing for frequent faults . If a node crashes while a query is executing, most MPP databases abort the entire query. MPP databases also prefer to keep as much data as possible in memory. MapReduce can tolerate the failure of a map or reduce task without it affecting the job. It is also very eager to write data to disk, partly for fault tolerance, and partly because the dataset might not fit in memory anyway. MapReduce is more appropriate for larger jobs. At Google, a MapReduce task that runs for an hour has an approximately 5% risk of being terminated to make space for higher-priority process.This is why MapReduce is designed to tolerate frequent unexpected task termination. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#mapreduce-and-distributed-filesystems",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#mapreduce-and-distributed-filesystems"
  },"279": {
    "doc": "Designing Data Intensive Applications",
    "title": "Beyond MapReduce",
    "content": "Materialization of Intermediary State . If the output of one job is just the input to another job, this is needlessly persisting intermediary state, or materialization (to eagerly compute the results of some operation and write it out rather than computing it on demand when requested.) . Unix, by comparison, streams data from pipe to pipe instead of materializing intermediary state. Downsides of materializing state: . | MapReduce jobs can only start when all tasks in preceding job have completed, which means you are subject to straggler tasks | mappers are often redundant, just reading in the same file that was written by a reducer | storing intermediary state on a distributed file system means it’ll be stored many times, which is often overkill | . dataflow engines . Execution engines Spark, Tez, and Flink try and fix these problems. You string together operators, or custom functions to perform operations that don’t have to be alternating map and reduce functions. fault tolerance . Persisting intermediary state allows MapReduce to be tolerant to faults, allowing you to resume from particular failures. Other engines don’t persist state to HDFS so they need to implement different methods for ensuring durability. Spark uses the resilient distributed dataset (RDD) abstraction to track ancestry of data, while Flink checkpoints operator state. It is important to have deterministic operators, or else recomputing would cause cascading faults down the stream of consumers. Graphs and Iterative Processing . It’s interesting to look at graphs in batch processing context, where the goal is to perform some kind of offline processing or analysis on an entire graph. This need often arises in machine learning applications such as recommednation engines, or in ranking systems. “repeating until done” cannot be expressed in plain MapReduce as it runs in a single pass over the data and some extra trickery is necessary. An optimisation for batch processing graphs, the bulk synchronous parallel (BSP) has become popular. It is implemented by Apache Giraph, Spark’s GraphX API, and Flink’s Gelly API (Pregel model, as Google Pregel paper popularised it). One vertex can “send a message” to another vertex, and typically those messages are sent along the edges in a graph. The difference from MapReduce is that a vertex remembers its state in memory from one iteration to the next. The fact that vertices can only communicate by message passing helps improve the performance of Pregel jobs, since messages can be batched. Fault tolerance is achieved by periodically checkpointing the state of all vertices at the end of an interation. The framework may partition the graph in arbitrary ways. Graph algorithms often have a lot of cross-machine communication overhead, and the intermediate state is often bigger than the original graph. If your graph can fit into memory on a single computer, it’s quite likely that a single-machine algorithm will outperform a distributed batch process. If the graph is too big to fit on a single machine, a distributed approach such as Pregel is unavoidable. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#beyond-mapreduce",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#beyond-mapreduce"
  },"280": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": "Design philosophy of Unix (inputs are immutable, outputs are intended to become the input to another (as yet unknown) program, and complex problems are solved by composing small tools that “do one thing well”) informs MapReduce and more recent dataflow engines. Uniform interface in Unix is files and pipes, and in MapReduce, it is the distributed file system. There are two problems distributed batch processing needs to solve: . | partitioning - mappers are partitioned according to input file blocks, and output is repartitioned, sorted, and merged into configurable amount of reducer partitions. | fault tolerance - MapReduce frequently writes to disk, which makes it easier to resume failed tasks, but later dataflow engines perform less materialization of intermediate state and keep more in memory. | . Examples of join algorithms for MapReduce: . | sort-merge joins - each of the inputs being joined foes through a mapper that extracts join key. by partitioning, sorting, and merging, all records with the same key end up going to the same call of the reducer. the function can then output the joined records. | broadcast hash joins - one of the two join inputs is small, so it is not partitioned and it can be entirely loaded into a hash table. Thus, you can start a mapper for each partition of the large join input, load the hash table for the small input into each mapper, and then scan over the large input one record at a time, querying the hash table for each record. | partitioned hash joins - if the two join inputs are partitioned in the same way (using the same key, same hash function, same number of partitions), then the hash table approach can be used independently for each partition. | . Distributed batch processing engines have restricted programming model: callback functions are stateless and have no externally visible side effects, which allows the framework to hide difficult problems of distributed systems behind the abstraction; tasks can be retried safely, output of failed tasks can be discarded. Code doesn’t need to worry about implementing fault-tolerance mechanisms, and these semantics are much stronger than in online services. The distinguishing feature of batch processing is that it reads some input data and produces output data without modifying the input data. The output is derived from input. Also, the input data is bounded; it has a known, fixed size, and the job knows when it is done. This is contrasted to stream processing, which is unbounded. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-9",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-9"
  },"281": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 11: Stream Processing",
    "content": "A “stream” typically means data that is made avaialable incrementally over time: stdin and stdout in Unix, lazy lists, filesystem APIs (like Java’s FileInputStream), TCP connections, etc. event streams are mechanisms of data management, the unbounded, incrementally processed counterpart to batch data. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-11-stream-processing",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-11-stream-processing"
  },"282": {
    "doc": "Designing Data Intensive Applications",
    "title": "Transmitting Event Streams",
    "content": "Instead of files for batch processing, event streams process events, or small, self-contained, immutable objects (might be text, or JSON, or a binary string) containing details of something that happened at some point in time, typically packaged with some sort of timestamp, e.g., an action a user took. An event is generated once by a producer (aka publisher or sender), and processed by multiple consumers (aka subscribers or recipients), and related records are grouped together in a stream or topic. Instead of polling the consumers for new events (which gets expensive), consumers are notified when new events occur. Messaging Systems . A messaging system might be used; producers send messages to this service and then consumers are notified. This is referred to as a publish/subscribe model. | what happens if the producers send messages faster than the producers can process them? . | the system can drop messages | the system can buffer messages in a queue – what happens as the queue grows is up to the system (written to disk, crash, etc.) | the system can apply backpressure (flow control), blocking the producer from sending more messages | . | what happens if nodes crash or temporarily go offline? . | durability might be required (replication to disk), but if you can afford to lose messages you might have higher throughput and lower latency | . | . direct messaging from producers to consumers . Some data systems don’t use a message system: . | UDP multicast for low latency applications (financial data) | Brokerless messaging libraries like ZeroMQ and nanomsg, over TCP or IP multicast | StatsD and Brubeck use UDP | webhooks (consumer exposes a service over the network and producers make a direct HTTP or RPC request upon an event) | . message broker . You can also send messages through a message broker, which acts like a database optimized for handling message streams. Consumers are asynchronous; a producer sends a message and the message broker only returns a message when the message is queued, not consumed. Message brokers are like databases, and can even implement 2PC through XA or JTA, but they are different from databases: . | databases keep data until it is explicitly deleted whereas message brokers typically delete messages after successful delivery | message brokers assume their workload is fairly small, but if a substantial number of messages need to buffer, each individual message takes longer to process and the throughput may degrade | databases offer secondary indexes while message brokers allow consumers to subscribe to a subset of messages based on a pattern | databases support arbitrary queries but message brokers do not | . multiple consumers . When multiple consumers read messages, there are two main patterns: . | load balancing - each message is delivered to one consumer to process | fan-out - each message is delivered to all consumers | . acknowledgments and redelivery . Consumers may crash at any time, so message brokers use acknowledgments where a client must explicitly tell the broker when it has finished processing a message and the broker will remove it from the queue. When combined with load balancing, this redelivery feature might not preserve the ordering of messages. Partitioned Logs . With databases and filesystems, everything that is written to the database or the file is expected to be permenantly recorded, but with messages and message brokers, the act of receiving a message is destructive if the acknowledgment causes the message to be deleted from the queue. Log-based message brokers are a hybrid between the two paradigms. A log is an append-only sequence of records on disk, so a message broker can be implemented where a producer appends records to a log, and a consumer reads from that log. To achieve higher throughput than a single disk can offer, the log can be partitioned, and within each partition, the broker assigns a monotonically increasing sequence number (offset), so messages within the partition are totally ordered, but not so across partitions. Apache Kafka, Amazon Kinesis Streams, and Twitter’s DistributedLog are log-based message brokers. This is contrasted to the JMS/AMQP style message broker system (e.g., RabbitMQ). The log-based approach trivially supports fan-out, since any consumer could subscribe to the log, but load balancing is a little different (typically attained by assigning a partition to a particular consumer). This has the downsides that the number of nodes consuming a topic can be at most the number of log partitions, and if a single message is slow all other messages are blocked (head of line blocking). The offset makes it easy to tell which records have been processed, and this offset works very similarly to the log sequence number from single-leader replication (if a follower becomes disconected, the log sequence number tells it where to begin catching up when it reconnects). The message broker behaves like a leader database, and the consumer a follower. buffer disk usage . Eventually, the log will run out of disk space, so older logs segments need to be removed by implementing a bounded-size buffer that discards old messages when it gets full (circular buffer or ring buffer). E.g., the average hdd is 6 TB, and the average write is 150 MB/s, which means it would take ~11 hours to fill the disk. If a consumer falls so far behind that the messages are no longer on disk, those messages will be lost, but you can monitor a consumer and raise an alert if they fall too far behind. You can also add consumers for different purposes without worrying about affecting throughput, as consumers are only reading from the log. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#transmitting-event-streams",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#transmitting-event-streams"
  },"283": {
    "doc": "Designing Data Intensive Applications",
    "title": "Databases and Streams",
    "content": "An event is a record of a thing happening, and that thing might be a write to a database, meaning that streams and databases are fundamentally similar. For example, a replication log is a stream of database write events. The followers follow that stream to ensure their copy is up to date with the producer. Keeping Systems in Sync . There is no single system that can satisfy all data storage, querying, and processing needs, but the sprawl of services need to be kept in sync. Sometimes, batch processes are used to keep different systems in sync (data warehouses). Another method is to use dual writes where application code explicitly writes to each data system when data changes. With dual writes there are race conditions that might happen to cause systems to be permenantly out of sync with each other, and you need concurrency mechanisms to detect what would otherwise be a silent failure. In a single-leader system, the state machine replication approach (if every follower processes events in the same order as the leader, than every replica will end up in the same final state) works, but with disparate systems there might be many leader-followers. Ideally we’d be able to make the database the leader, then everything else the follower (search index, cache, etc.) . Change Data Capture . change data capture (CDC) is the process of observing all data changes written to the system of record database and extracting them in a form that can be replicated to other derived data systems. All changes made to the system of record database are reflected in the derived data systems. You could implement CDC with database triggers, but these are slow and brittle. LinkedIn’s Database, Facebook’s Wormhole, and Yahoo’s Sherpa use this idea at a large scale. Bottled Water implements CDC for PostgreSQL using an API that decodes the write-ahead log, Maxwell and Debezium do something similar for MySQL with the binlog, Mongoriver reads the MongoDB oplog, and GoldenGate provides similar facilities for Oracle. If you have a log of all changes you could recreate the entire database, but this might take too long and take up too much space, so its best to work off a snapshot. Every time you add a new derived data system you’d need to go through the snapshot process, but log compaction helps. If you store every update with a primary key, and the most recent update replaces the previous, you can scan the entire log and just pull out most recent values for a key. Log compaction is supported by Apache Kafka. Databases are beginning to support CDC as a first-class interface. RethinkDB allows queries to subscribe to notifications when the results of a query change. Firebase and CouchDB provide synchronization, and VoltDB allows transactions to continuously export data from a database as a stream. Kafka Connect tries to integrate CDC tools for many database systems. Event Sourcing . CDC is similar to domain-driven design’s (DDD) idea of event sourcing. CDC uses the database in a mutable way, updating and deleting records as needed, but event sourcing, the application logic is built on the basis of immutable events that are written to an event log, and updates and deletes are discouraged. Event sourcing is powerful for data modelling: user’s actions are immutable events, instead of recording the effect of those actions on a mutable database. This makes updating applications easier and helps debugging, as well as limits application bugs. For example, the event “student canceled their course enrolment” clearly expresses intent of a single action in a neutral way, while side effects “one entry was deleted from the enrolments table, one cancellation was added to the student feedback table” embed a lot of assumptions about how the data is going to be used. If a new event is added, say, “next person in queue is added to class”, event sourcing makes it easier to chain the behavior to the current event. Since events are typically modelled at a higher level, later events typically don’t overwrite previous events, so log compaction is not possible in the same way. commands and events . When a request from a user first arrives, it is a command, and when it is successful it becomes an event. When an event is generated, it becomes a fact. State, Streams, and Immutability . The changelog represents the evolution of state over time. If you consider the log of events to be the system of record, and any mutable state as being derived from it, it becomes easier to reason about the flow of data through a system. Immutability in databases can be seen in accounting in an append-only ledger – if there is a mistake, data isn’t erased, but a compensating action (e.g., a refund) is added. This is important for auditability. If you separate mutable state from immutable events, you can derive several different read-oriented representations of the same log of events. command query responsibility segregation (CQRS) - separating the form in which the data is written from the form in which the data is read. There is a fallacy that data must be written in the same form in which it is read, e.g., it is entirely reasonable to denormalize data that is being read. The biggest downside to event sourcing and change data capture is that consumers of the event log are asynchronous, so reads after write consistency might not be guaranteed. You might need to implement synchronous, atomic commits to read consumers. On the flipside, concurrency control is simplified by a single event log, as multi-object writes become less prevalent. If the event log and the application state are partitioned the same way, you don’t need concurrency control, as there is just a single threaded log consumer. Use cases for immutable data depend on the data set. If you have data that mostly grows, then it is easier to be immutable, but if your dataset is frequently updates and deletes, the immutable event log would grow prohibitively large. Sometimes you might need to permenantly delete data, not just tombstone it. Dataomic calls this excision, and the VCS Fossil calls this shunning. Deleting data is very hard. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#databases-and-streams",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#databases-and-streams"
  },"284": {
    "doc": "Designing Data Intensive Applications",
    "title": "Processing Streams",
    "content": "What can you do once you’ve set up a stream? . | take the data in the events and write it to a database, cache, search index, etc, from where it can be queried by other clients | you can push the events to users, like email or push notifications | you can process input streams to produce output streams | . A piece of code that processes streams is an operator or a job. Because streams are unbounded and never end, sorting doesn’t make sense, and fault-tolerance mechanisms need to change as jobs can’t be cleanly retried. Uses of Stream Processing . complex event processing (CEP) is an approach for analyzing event streams, and is geared for pattern matching, allowing you to specify rules to search for certain patterns of events in a stream. CEP systems use a high-level declarative language (like SQL or a GUI) to describe a pattern of events, and when it is detected, a complex event is created with details of the event. Reverses the standard data model - queries are long lived and data is transient. stream analytics slightly different from CEP and geared towards aggregations and statistical metrics over a large number of events, e.g., measuring the rate of some type of event, or calculating the rolling average over some time period. These often use probablistic algorithms such as Bloom filters for set membership, HyperLogLog for cardinality estimation, and various percentile estimation algos. Many stream processing framworks are designed with analytics in mind: Apache Storm, Spark Streaming, Flink, Concord, Samza, and Kafka Streams. materialized views caches, search indexes, and data warehouses can be thought of as materialized views on the original log . search on streams - you can create a query and run a stream through this query (similar to CEP). You can get speed increases by indexing the query as well. Reasoning About Time . In a batch process, the time at which the process is run has nothing to do with the time at which the events actually occurred. Many stream processing frameworks use the local system clock on the processing machine (processing time) to determine windowing. It is a simple approach that breaks down if there is any significant processing lag. Confusing event time and processing time leads to bad data. Processing time may be unreliable as the stream processor may queue events, restart, etc. It’s better to take into account the original event time to count rates. You can never be sure when you have received all the events. You can time out and declare a window ready after you have not seen any new events for a while, but it could still happen that some events are delayed due a network interruption. You need to be able to handle such stranggler events that arrive after the window has already been declared complete. You can ignore the stranggler events, tracking the number of dropped events as a metric. Publish a correction, an updated value for the window with stranglers included. You may also need to retrat the previous output. To adjust for incofrrect device clocks, one approach is to log three timestamps: . | The time at which the event occurred, according to the device clock | The time at which the event was sent to the server, according to the device clock | The time at which the event was received by the server, according to the server clock. | You can estimate the offset between the device clock and the server clock, then apply that offset to the event timestamp, and thus estimate the true time at which the event actually ocurred. | . Several types of windows are in common use: . | Tumbling window: Fixed length. If you have a 1-minute tumbling window, all events between 10:03:00 and 10:03:59 will be grouped in one window, next window would be 10:04:00-10:04:59 | Hopping window: Fixed length, but allows windows to overlap in order to provide some smoothing. If you have a 5-minute window with a hop size of 1 minute, it would contain the events between 10:03:00 and 10:07:59, next window would cover 10:04:00-10:08:59 | Sliding window: Events that occur within some interval of each other. For example, a 5-minute sliding window would cover 10:03:39 and 10:08:12 because they are less than 4 minutes apart. | Session window: No fixed duration. All events for the same user, the window ends when the user has been inactive for some time (30 minutes). Common in website analytics | . Stream Joins . Same use cases for joining data in streams as there is in batch processing, but the fact that streams are unbounded makes joins more difficult. | stream-stream join (window join): say you need to bring together clickstream data (e.g., search and click action). a stream processor needs to maintain state, e.g., all click data for the last hour, and if there is a matching click event after a search or not. | stream-table join (stream enrichment): if we need to add in additional data otherwise missing from an event stream. similar to a hash join, where a local copy of a database is kept in memory. since streams are long-lived, you could use change data capture to keep that in memory or on disk index up to date with updates to the source of record data. | table-table join (materialized view maintenance): stream needs to maintain a join of two disparate tables for the stream to access | . time dependence of joins . If state changes over time, and you join with some state, what point in time do you use for the join? If the ordering of events is undetermined, the join becomes non-deterministic, which in data warehousing is called slowly changing dimension (SDC) and might be addressed by using a unique identifier for a particular version of the joined data. Fault Tolerance . Batch processes can be retried, but what about streams? exactly once semantics mean that a record appears to be processed effectively once. microbatching and checkpointing . microbatching - breaking the stream into small blocks and treating each block like a mini batch. There is scheduling and coordination overhead. checkpointing - used be Apache Flink, generates rolling checkpoints and stores them to durable storage . In order to give the appearance of exactly-once processing, need to ensure that all outputs and side effects of processing an event take place only if processing is successful. idempotence . you might also rely on idempotence, or, if you perform an operation multiple times, it has the same effect as if you performed it only once. even if an operation isn’t idempotent by default, you can likely make it so by keeping metadata. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#processing-streams",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#processing-streams"
  },"285": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter Summary",
    "content": "Streaming is very similar to batch processing, but done continuously on unbounded streams rather than fixed-size input. Message brokers and event logs serve as the streaming equivalent of a filesystem. Two types of message brokers: . | AMQP/JMS-style message broker - broker assigns individual messages to consumers, consumers acknowledge messages, then messages are deleted from the broker. this style is useful when exact order of messages doesn’t matter, and you don’t need to return to anything that was already read in the past | log-based message broker - broker assigns all messages in a partition to the same consumer node, always delivers messages in the same order. parallelism is achieved through partitioning, and consumers track progress by checkpointing the offest of the last message they have processed. broker retains messages on disk, so you can jump back to old messages. | . log-based approach is similar to replication logs for database storage. streams might come from user activity, events, sensors providing periodic readings, and data feeds – we can also think of writes to a database like a stream, and log compaction allows the database to keep a full copy of the contents of a database. When we represent databases as streams, we can start to integrate data systems: caches, search indexes, and analytics systems are derived data systems from the system of record, the database. There are several purposes of stream processing: . | complex event processing - searching for event patterns | stream analytics - computing windowed aggregation | materialized views - keeping derived data systems up to date | . Time is difficult to reason about in streams because of a difference in processing time and event timestamps, and the problem of dealing with straggler events that arrive after you thought your window was complete. There are at least 3 types of joins that may appear in stream processes: . | stream-stream joins | stream-table joins | table-table joins | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-10",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-summary-10"
  },"286": {
    "doc": "Designing Data Intensive Applications",
    "title": "Chapter 12: The Future of Data Systems",
    "content": " ",
    "url": "/notes/tech_books/designing-data-intensive-applications#chapter-12-the-future-of-data-systems",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#chapter-12-the-future-of-data-systems"
  },"287": {
    "doc": "Designing Data Intensive Applications",
    "title": "Data Integration",
    "content": "For every problem, there might be several solutions. Even if you understand usage patterns, data is used in different ways, and you end up having to cobble together several different pieces of software. Combining Specialized Tools by Deriving Data . reasoning about dataflows . When copies of the same data need to be stored in several storage systems, you need to be very clear about inputs and outputs. Where is data written first, what is derived from what? . Imagine a system that uses writes to a database to then use change data capture to create an index. If the index is derived solely from database writes, you can be sure the index is derived solely from system of record, as writing to the database is the only way to supply new inputs. But if you can update the database also through the index, you have problems of concurrent writes, and no system of record. Funnelling all inputs through a single system is an application of state machine replication. derived data vs distributed transactions . Distributed transactions decide on an ordering of writes by using locks for mutual exclusion, while CDC and event sourcing (derived data) use a log for ordering. Distributed transactions use atomic commit to ensure exactly once semantics, while log-based systems are based on deterministic retry and idempotence. Biggest difference between the two approaches are that transaction systems provide linearizability which provide useful consistency guarantees if needed (read your own writes). In the absence of widespread support for a good distributed transaction protocol (XA has poor fault tolerance and performance characteristics), log-based derived data is the most promising approach for integrating different data systems. limits of total ordering . However, as systems are scaled towards bigger and more coplex worloads, limitiations emerge: . | Constructing a totally ordered log requires all events to pass through a single leader node that decides on the ordering, and you need to partition if the load is too large, making ordering ambiguous | An undefined ordering of events that originate on multiple datacenters. | When two events originate in different services, there is no defined order for those events. | Some applications maintain client-side state. Clients and servers are very likely to see events in different orders. | . Deciding on a total order of events is known as total order broadcast, which is equivalent to consensus. It is still an open research problem to design consensus algorithms that can scale beyond the throughput of a single node. ordering events to capture causality . If there is no causal link between events, no need for total order since writes can happen concurrently, or objects can be updated per key on a partition. Batch and Stream Processing . The goal of data integration is that data ends up in the right form in the right places. The outputs of batch and stream processes are derived datasets, e.g., search indexes, materialized views, recommendations to show users, aggregate metrics, etc. Main difference is that stream processing operates on unbounded datasets. Batch processing has functional flavor: deterministic, pure functions whose output depends only on the input and no side effects other than explicit outputs, inputs as immutable and outputs as append-only. Stream processing extends operators to allow managed, fault-tolerant state. reprocessing data for application evolution . Reprocessing allows for the evolution of applications, as it is possible to restructure a dataset based on a completely different model. Derived views allow gradual evolution, and gradual migration allows every stage to be easily reversible. lambda architecture . Combines batch and stream processing. The core idea is that incoming data should be recorded by appending immutable events to an always-growing dataset, and from these events, read-optimized views are derived, or running two systems in parallel. The stream processor consumes the events and produces a quick approximate update to the view, then the batch processor later consumes the same events and produces the corrected version of the derived view. The downsides: . | maintaining both batch and stream logic is significant extra effort | since stream and batch produce separate outputs, they need to be merged to respond to user requests | reprocessing the entire dataset is expensive, so the batch processor runs on incremental updates, which might run into time problems (straggler events, etc) | . ",
    "url": "/notes/tech_books/designing-data-intensive-applications#data-integration",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#data-integration"
  },"288": {
    "doc": "Designing Data Intensive Applications",
    "title": "Unbundling Databases",
    "content": "Batch and stream processors are like elaborate implementations of triggers, stored procedures, and materialised view maintenance routines. The derived data systems they maintain are like different index types. There are two avenues by which different storage and processing tools can nevertheless be composed into a cohesive system: . | Federated databases unifying reads: unifying reads. It is possible to provide a unified query interface to a wide variety of underlying storate engines and processing methods, this is known as federated database or polystore. An example is PostgreSQL’s foreign data wrapper. | Unbundled databases unifying writes: unifying writes. When we compose several storage systems, we need to ensure that all data changes end up in all the right places, even in the face of faults, it is like unbundling a database’s index-maintenance features in a way that can synchronise writes across disparate technologies. | . unifying writes to several storage systems in sync is the harder engineering problem. Synchronising writes requires distributed transactions across heterogeneous storage systems which may be the wrong solution. An asynchronous event log with idempotent writes is a much more robust and practical approach. The big advantage is loose coupling between various components: . | Asynchronous event streams make the system as a whole more robust to outages or performance degradation of individual components. | Unbundling data systems allows different software components and services to be developed, improved and maintained independently from each other by different teams. | . If there is a single technology that does everything you need, you’re most likely best off simply using that product rather than trying to reimplement it yourself from lower-level components. The advantages of unbundling and composition only come into the picture when there is no single piece of software that satisfies all your requirements. separation of application code and state . It makes sense to have some parts of a system that specialize in durable data storage, and other parts that specialize in running application code. The two can interact while still remaining independent. The trend has been to keep stateless application logic separate from state management (databases): not putting application logic in the database and not putting persistent state in the application. Dataflow, interplay between state changes and application code Instead of treating the database as a passive variable that is manipulated by the application, application code responds to state changes in one place by triggering state changes in another place. stream processors and services . A customer is purchasing an item that is priced in one currency but paid in another currency. In order to perform the currency conversion, you need to know the current exchange rate. This could be implemented in two ways: . | Microservices approach, the code that processes the purchase would probably wuery an exchange-rate service or a database in order to obtain the current rate for a particular currency. | Dataflow approach, the code that processes purchases would subscribe to a stream of exchange rate updates ahead of time, and record the current rate in a local database whenever it changes. When it comes to processing the purchase, it only needs to query the local database. | . The dataflow is not only faster, but it is also more robust to the failure of another service. Observing Derived State . Break the data flow into two paths: write path and the read path. Write path is eagerly evaluated (as it comes in), and read path is lazily evaluated (as it is needed). materialized views and caching . A full-text search index is a good example: the write path updates the index, and the read path searches the index for keywords. If you don’t have an index, a search query would have to scan over all documents, which is very expensive. No index means less work on the write path (no index to update), but a lot more work on the read path. Another option would be to precompute the search results for only a fixed set of the most common queries. The uncommon queries can still be served from the inxed. This is what we call a cache although it could also be called a materialised view. read are events too . It is also possible to represent read requests as streams of events, and send both the read events and write events through a stream processor; the processor responds to read events by emiting the result of the read to an output stream. It would allow you to reconstruct what the user saw before they made a particular decision. Enables better tracking of casual dependencies. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#unbundling-databases",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#unbundling-databases"
  },"289": {
    "doc": "Designing Data Intensive Applications",
    "title": "Aiming for Correctness",
    "content": "If your application can tolerate occasionally corrupting or losing data in unpredictable ways, life is a lot simpler. If you need stronger assurances of correctness, the serializability and atomic commit are established approaches. While traditional transaction approach is not going away, there are some ways of thinking about correctness in the context of dataflow architectures. the end-to-end argument for databases . Bugs occur, and people make mistakes. Favor immutable and append-only data, because it is easier to recover from such mistakes. We’ve seen the idea of exactly-once (or effectively-once) semantics. If something goes wrong while processing a message, you can either give up or try again. If you try again, there is the risk that it actually succeeded the first time, the message ends up being processed twice. Exactly-once means arranging the computation such that the final effect is the same as if no faults had occurred. One of the most effective approaches is to make the operation idempotent, to ensure that it has the same effect, no matter whether it is executed once or multiple times. Idempotence requires some effort and care: you may need to maintain some additional metadata (operation IDs), and ensure fencing when failing over from one node to another. Two-phase commit unfortunately is not sufficient to ensure that the transaction will only be executed once. operation identifiers . You need to consider end-to-end flow of the request. You can generate a unique identifier for an operation (such as a UUID) and include it as a hidden form field in the client application, or calculate a hash of all the relevant form fields to derive the operation ID. If the web browser submits the POST request twice, the two requests will have the same operation ID. You can then pass that operation ID all the way through to the database and check that you only ever execute one operation with a given ID. You can then save those requests to be processed, uniquely identified by the operation ID. Is not enough to prevent a user from submitting a duplicate request if the first one times out. Solving the problem requires an end-to-end solution: a transaction indentifier that is passed all the way from the end-user client to the database. Low-level reliability mechanisms such as those in TCP, work quite well, and so the remaining higher-level faults occur fairly rarely. Transactions have long been seen as a good abstraction, they are useful but not enough. It is worth exploring F=fault-tolerance abstractions that make it easy to provide application-specific end-to-end correctness properties, but also maintain good performance and good operational characteristics. ",
    "url": "/notes/tech_books/designing-data-intensive-applications#aiming-for-correctness",
    
    "relUrl": "/notes/tech_books/designing-data-intensive-applications#aiming-for-correctness"
  },"290": {
    "doc": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "title": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "content": "Eric Evans, 2003 . | Ubiquitous Language . | Knowledge Crunching | Modelling Documents and Diagrams | . | Model-Driven Design | Modelling Building Blocks . | Layered Architecture | Smart UI (Anti-Pattern) | Entities (Reference Objects) | Value Objects | Services | Modules (Packages) | Aggregates | Factories | Repositories | . | Supple Design . | Intention-Revealing Interfaces | Side-Effect-Free Functions | Assertions | Conceptual Contours | Standalone Classes | . | Context . | Bounded Context | Continuous Integration | Context Map | Relationships Between Bounded Contexts . | Shared Kernel | Customer/Supplier Dev Teams | Conformist | Anti-Corruption Layer | Separate Ways | Open Host Service | Published Language | . | . | Distillation . | Core Domain | Generic Subdomains | Domain Vision Statement | Highlighted Core | Cohesive Mechanisms | Segregated Core | Declarative Style | . | Large-Scale Structures . | Evolving Order | System Metaphor | Responsibility Layers | Knowledge Level | Pluggable Component Framework | . | Six Essentials for Strategic Design Decision Making (492) | . ",
    "url": "/notes/tech_books/domain-driven-design",
    
    "relUrl": "/notes/tech_books/domain-driven-design"
  },"291": {
    "doc": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "title": "Ubiquitous Language",
    "content": ". | a common language that is more robust than lowest common denominator | made up of names of classes, prominent operations | supplemented with terms from high-level organizing principles and names of patterns identified by team | should be used to describe not just artifacts but tasks and functionality | when language is fractured between technical members and subject matter experts (speaking two different nomenclatures), project faces serious problems . | translation is required between the two, and this blunts communication and requires significant knowledge crunching | . | holds all the parts together | should be a dynamic and evolving language based on knowledge crunching | If sophisticated domain experts don’t understand the model, there is something wrong with the model | . Knowledge Crunching . | take a torrent of info and probe for relevant trickly | continuously try one organizing principle after another until one fits | process of distillation – move away from waterfall where all knowledge defined up front (knowledge trickles in one direction but never accumulates) | without input from domain experts, knowledge is anemic and naive | When we set out to write software, we never know enough | all projects leak knowledge, so hard-earned knowledge needs to be expressed in a usable (and durable) form to protect against when the oral tradition is interrupted (and knowledge is lost) | . Modelling Documents and Diagrams . | the model is not the diagram – the diagrams and documents purpose is to help communicate and explain the model | UML documents miss two important things 1) the meaning of the objects it represents &amp; 2) what the objects are meant to do | using UML as an implementation language is missing the point, because you will still need something to communicate the uncluttered model (the model isn’t just the code) | greatest value of a design document is to: . | explain the concepts of the model | help navigate the detail of the code | give insight into the model’s intended style of use | . | . ",
    "url": "/notes/tech_books/domain-driven-design#ubiquitous-language",
    
    "relUrl": "/notes/tech_books/domain-driven-design#ubiquitous-language"
  },"292": {
    "doc": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "title": "Model-Driven Design",
    "content": ". | tightly relating the code to an underlying model gives the code meaning and makes the model relevant | need to relate the design to the domain model – key is not to divide analysis and design as two separate models – they both serve to create and refine the same model | one approach: . | design portion of software to reflect the domain model so mapping is obvious, then build upon that | . | code is an expression of the model, and changes to the code require changes to the model | this sort of development really only makes sense for object-oriented programming (based on modelling paradigm) where you can slavishly tie model to implementation | revealing the model to the user (e.g., bookmarks as files rather than obscuring the model via abstraction) gives the user more access to the potential of the software and yields consistent, predictable behavior | need hands-on modellers – people who write code should feel responsible to update model. needs to be that feedback | . ",
    "url": "/notes/tech_books/domain-driven-design#model-driven-design",
    
    "relUrl": "/notes/tech_books/domain-driven-design#model-driven-design"
  },"293": {
    "doc": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "title": "Modelling Building Blocks",
    "content": "Layered Architecture . | business logic and UI and infra can become intertwined, making changes to anything (for example, an update to a widget in the UI) require large changes and be difficult to reason about | essential principle is that any element of a layer depends only on other elements in the same layer or on elements of the layers “beneath” it, and communication upwards must pass through some indirect method | need to partition complex program into layers | each layer is cohesive and depends only on layers below | then, concentrate all code that pertaints to domain model and isolate from the UI, application, and infrastructure code | domain objects can then worry solely about expressing the domain model, which allows a model to evolve and be rich and clear enough to capture essential business knowledge | also important to judiciously apply frameworks, as they can be heavyweight and obscure the domain model | . Smart UI (Anti-Pattern) . | sometimes, a simple project doesn’t require all the overhead of domain-driven design, which is costly, takes a while to onboard new team members, time consuming, etc. | can use the Smart UI pattern (which is an anti-pattern generally) . | put all business logic into the user interface | chop application into small functions and implement as separate user interfaces | automate as much of the UI building as possible | . | downsides are: 1) integrations are difficult (except through the db), 2) no reuse of behavior or abstractions 3) rapid prototyping and iteration eventually reach a natural limit 4) complexity buries you quickly | . Entities (Reference Objects) . | an object defined by its identity, not just its attributes | has continuity through a lifecycle and distinctions independent of attributes that are important to the app’s user | need to keep a means of distinguishing each object via its identity that is guaranteed to return unique result to that object and be immutable | most basic responsibility of an ENTITY is to establish continuity so that behavior can be clear and predictable | . Value Objects . | an object that represents a descriptive aspect of the domain with no conceptual identiy | objects that describe things | transient, immutable pieces of data without identity, but could give information about an ENTITY | e.g., a Customer could be an ENTITY but that Customer’s name is a VALUE OBJECT | if a value object must be shared between objects, it must be immutable. otherwise, it should not be shared | . Services . | an operation that is offered as an interface that stands alone in the model, without encapsulating state | tends to be named for an activity, a verb, not a noun | a SERVICE should still have a defined responsibility | a good SERVICE has three characteristics: . | the operation relates to a domain concept that is not a natural part of an ENTITY or VALUE OBJECT | the interface is defined in terms of other elements of the domain model | the operation is stateless | . | most SERVICES are purely technical and belong in infra layer | . Modules (Packages) . | cognitive overload is the primary motivation for modularity | low coupling (decreases cost of understanding modules place) between modules and high cohesion (reduces scale of complexity within single module to manageable) within them | give MODULES names that become part of the UBIQUITOUS LANGUAGE | MODULES also tend to follow distribution model (e.g., code that is intended to run on the same server can be part of the same MODULE) | . Life cycle of a Domain Object . Aggregates . | a cluster of associated objects that we treat as a unit for the purpose of data changes | the root of an aggregate is the only member of the AGGREGATE that outside objects are allowed to hold references to | it is difficult to guarantee consistency of changes to objects in a model with complex associations | invariants need to be maintained that apply to closely related groups of objects, not just discrete objects | cautious locking schemes cause multiple useers to interfere pointlessly with each other to make the system almost unusable | . | cluster ENTITIES and VALUE OBJECTS into AGGREGATES and define boundaries around each | choose one ENTITY to be root, and control access for everything inside via the root (external objects can only hold reference to the root) | transient references to internal members can be passed out only for single operation | because root controls access, it will be aware of changes to internals | you can then enforce invariants for anything within the AGGREGATE | . Factories . | instantiating objects can be ungainly, and when client needs to do it itself, it breaches encapsulation and overly couples the client to the implementation of the created object | encapsulates knowledge required to create a complex object or AGGREGATE | shift responsibility for creating objects to a separate object that might have no responsibility itself in the domain | create a FACTORY to build something whose details you want to hide | that said, sometimes a simple constructor is all you need (e.g., client cares about implementation like in the STRATEGY pattern) | key parts of FACTORY: each operation is atomic, and the FACTORY will be coupled to its arguments | can also use FACTORY to reconstitute objects – need to make sure tracking ID is the same, and any invariant violation is handled appropriately | . Repositories . | client needs a way to acquire references to pre-existing domain objects | REPOSITORY provides a global access method to domain objects (querying, persisting, updating, etc.) – delegate all storage and access | without REPOSITORY pattern, devs might take shortcuts e.g., direct database queries, which, while faster, break encapsulation and sprawl logic | reconstitution - restoring instance from stored data | Evans recommends 1) abstracting type, 2) taking advantage of decoupling data access from the client, and 3) leave transaction control to the client | REPOSITORY similar to FACTORY – the former finds old objects, the latter makes new objects | Evans also recommends against “find or create” functionality because usually the distinction between new object and existing object is important in the domain, and a framework that transparently combines them might muddy the waters | . ",
    "url": "/notes/tech_books/domain-driven-design#modelling-building-blocks",
    
    "relUrl": "/notes/tech_books/domain-driven-design#modelling-building-blocks"
  },"294": {
    "doc": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "title": "Supple Design",
    "content": "Intention-Revealing Interfaces . | if you need to be aware of implementation of component to use it, you lose value of encapsulation | name classes and operations to describe effect and purpose without means to which they do what they promise | names should conform to ubiquitous language | use test-driven development by writing test for behavior before implementing | . Side-Effect-Free Functions . | side effect - any change in the state of the system that will affect future operations | command - method that result in modification to observable state | need to limit so developers can make changes without needing to understand full cascading effects | place logic of program into functions that return results with no observable side effects | segregate commands into simple operations that do not return domain information | . Assertions . | can be used to state post-conditions of operations and invariants of class AGGREGATES | most OO languages don’t directly support, but good unit tests can make up gap | . Conceptual Contours . | without boundaries between elements of a model, functionality gets duplicated, and meaning is hard to understand | conversely, too fine-grained of boundaries make objects lose all meaning (half a uranium atom isn’t uranium) | decompose design elements into cohesive units | observe axes of change to identify CONCEPTUAL CONTOURS | . Standalone Classes . | adding dependencies to a module increases difficulties in understanding drastically | implicit is much more difficult than explicit concepts | low coupling is fundamental to object design | if you can, eliminate all other concepts from the class, so it can be studied and understood alone | . Closure of Operations (p 268) Domain-Specific Languages (p 272) . Generating a running program from a declaration of model properties is a kind of Holy Grail of MODEL-DRIVEN DESIGN (271) . | Strategy (AKA Policy) (p 311) | Composite (p 315) | . ",
    "url": "/notes/tech_books/domain-driven-design#supple-design",
    
    "relUrl": "/notes/tech_books/domain-driven-design#supple-design"
  },"295": {
    "doc": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "title": "Context",
    "content": "Bounded Context . | always multiple models on any large project, but when you combine code from distinct models, things are buggy and hard to understand | need to explicitly define context within which a model applies | boundaries defined via –&gt; teams organization, usage within parts of app, physical manifestations (code bases, database schemas, infra) | delimits applicability of particular model so there is a clear and shared understanding of what has to be consistent | bounded contexts are not modules | duplicate concepts - two model elements that represent the same thing | false cognates - the same term applied to two different things (similar to polysemes) | . Continuous Integration . | general tendency for a model to fragment, to lose valuable coherency and integration | all work within context is being merged and made consistent frequently enough that splinters are caught and corrected quickly | for code, requires: . | step-by-step, reproducible merge/build technique | automated test suites | rules that set some reasonably small upper limit on lifetime of unintegrated changes | . | for conceptual integration, requires: . | constant exercise of the ubiquitous language | . | . Context Map . | the act of defining each model in a project’s BOUNDED CONTEXT, | including points of contact between models and any explicit translation between models or shared info | after you make context map, you might see changes to org of teams or design you want to change | important to test points of contact between bounded contexts | . Relationships Between Bounded Contexts . Shared Kernel . | subset of domain two teams agree to share | useful for when teams are moving quickly and don’t want to spend time on translation or integration of models | . Customer/Supplier Dev Teams . | establish clear customer/supplier relationship between teams, where downstream plays customer | jointly develop automated acceptances tests as part of upstreams continuous integration, freeing them to make changes that won’t affect downstream team | customer’s needs are paramount | . Conformist . | when two models are incompatible, downstream can choose to adopt upstream, esp. if code quality is decent and compatibility relatively high already | simplifies integration, but prevents downstream from designing and innovating on their domain | . Anti-Corruption Layer . | when two systems absolutely can’t integrate, you can create an isolating layer between the two | ADAPTER or FACADE pattern, essentially | . Separate Ways . | integration is always expensive and sometimes benefit is small | you can declare a bounded context to have no connection with others at all | . Open Host Service . | when a subsystem needs many integrations, design a protocol | anyone can use, and expand and extend to handle new requirements | . Published Language . | use a well-documented shared language that can express necessary domain language (e.g., XML and DTD) | . ",
    "url": "/notes/tech_books/domain-driven-design#context",
    
    "relUrl": "/notes/tech_books/domain-driven-design#context"
  },"296": {
    "doc": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "title": "Distillation",
    "content": ". | the process of separating the components of a mixture to extract the essence in a form that makes it more valuable and useful, e.g., a model is a distillation of knowledge | . Core Domain . | a system that is hard to understand is hard to change | not all parts of design are refined equally, and priorities need to be set | need to boil model down, make the CORE DOMAIN small, bringing most valuable and specialized concepts into sharp relief | also need to apply top talent – investment in non-CORE needs to be justified | CORE DOMAIN is what you do in house | . Generic Subdomains . | some parts of model add complexity without specialized knowledge, muddying the CORE DOMAIN | need to identify cohesive subdomains that are not motivation for project, and factor out these to separate modules | consider buying off-shelf, don’t put best devs on these – little domain knowledge to be gained | . Off-the-Shelf Solution pros: . | less code, less maintenance, code is mature cons: | still need to evaluate and understand | might be over-engineered | might be difficult to integrate | . Published Design or Model pros: . | more mature than homegrown and reflects many people’s insight | instant, high-quality docs cons: | might not quite fit needs or is over-engineered | . Outsourced Implementation pros: . | keeps core team free | can do dev without permanently enlarging team | forces interface-oriented design cons: | still requires time | significant overhead in transferring ownership back | code quality can vary | . In-House Implementation pros: . | easy integration | get what you want and nothing extra | temporary contractors can be assigned cons: | ongoing maintenance and training | easy to underestimate time and cost of developing packages | . Domain Vision Statement . | short description (one page) of CORE DOMAIN and value it will bring | write early and revise as you go | gives team shared direction | . Highlighted Core . | write a distillation document that describes the CORE domain and primary interactions among CORE elements | useful as a process tool | . Cohesive Mechanisms . | encapsulate mechanisms into separate light framework | frees the model to talk about the what and delegate the how to the cohesive mechanisms | motivated by same desire as generic subdomain, to unburden the CORE DOMAIN | a model proposes, a mechanism disposes | . Segregated Core . | similar to generic subdomains, but from the other direction | MM Note: not sure I understand the difference between segregated core and generic subdomain? These all seem pedantic distinctions to remove extraneous chaff from the core | . Declarative Style . | declare! | . ",
    "url": "/notes/tech_books/domain-driven-design#distillation",
    
    "relUrl": "/notes/tech_books/domain-driven-design#distillation"
  },"297": {
    "doc": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "title": "Large-Scale Structures",
    "content": "Evolving Order . | need to find balance between design free-for-alls and too much design up front, which takes power out of the hands of the developer | have your structures evolve with the application – don’t overconstrain | ill-fitting structure is worse than none | less is more | . System Metaphor . | a loose easily understood large-scale structure that is harmonious with the object paradigm | however, a persuasive metaphor introduces risk that design will take on aspects of the metaphor that were not desirable | need to continuously re-assess metaphor, and drop if necessary – there to serve communication and understanding | . Responsibility Layers . | give coherence to model by assigning responsibilities to larger segments of structures | organize along axes of change, make sure that domain object, aggregate, and module fit neatly within on layer | responsibilities should tell a story of the high-level purpose and design of system | some good layers based on: . | storytelling | conceptual dependency | conceptual contours | . | example: | . Knowledge Level . | a group of objects that describe how another group of objects should behave | used to describe and constrain the structure and behavior of the basic model | . Pluggable Component Framework . | distill abstract core of interfaces and interactions and build framework that allows diverse implementations of those interfaces to be freely substituted | . Three basic principles of strategic design: . | context | distillation | large-scale structures | . ",
    "url": "/notes/tech_books/domain-driven-design#large-scale-structures",
    
    "relUrl": "/notes/tech_books/domain-driven-design#large-scale-structures"
  },"298": {
    "doc": "Domain Driven Design: Tackling Complexity in the Heart of Software",
    "title": "Six Essentials for Strategic Design Decision Making (492)",
    "content": ". | decisions must reach the entire team | the decision process must absorb feedback | the plan must allow for evolution | architecture teams must not siphon off all the best and brightest | strategic design requires minimalism and humility | objects are specialists; developers are generalists | . ",
    "url": "/notes/tech_books/domain-driven-design#six-essentials-for-strategic-design-decision-making-492",
    
    "relUrl": "/notes/tech_books/domain-driven-design#six-essentials-for-strategic-design-decision-making-492"
  },"299": {
    "doc": "Effortless: Make It Easier To Do What Matters Most",
    "title": "Effortless: Make It Easier To Do What Matters Most",
    "content": "| : EFFORTLESS STATE :|| |   | . | Effortless State | The Effortless State is an experience many of us have had when we are physically rested, emotionally unburdened, and mentally energized. You are completely aware, alert, present, attentive, and focused on what’s important in this moment. You are able to focus on what matters most with ease. | . | INVERT | &lt;ul&gt;&lt;li&gt;Instead of asking, “Why is this so hard?,” invert the question by asking, “What if this could be easy?”&lt;/li&gt;&lt;li&gt;Challenge the assumption that the “right” way is, inevitably, the harder one.&lt;/li&gt;&lt;li&gt;Make the impossible possible by finding an indirect approach.&lt;/li&gt;&lt;li&gt;When faced with work that feels overwhelming, ask, “How am I making this harder than it needs to be?”&lt;/li&gt;&lt;/ul&gt; | . | ENJOY | &lt;ul&gt;&lt;li&gt;Pair the most essential activities with the most enjoyable ones.&lt;/li&gt;&lt;li&gt;Accept that work and play can co-exist.&lt;/li&gt;&lt;li&gt;Turn tedious tasks into meaningful rituals.&lt;/li&gt;&lt;li&gt;Allow laughter and fun to lighten more of your moments.&lt;/li&gt;&lt;/ul&gt; | . | RELEASE | &lt;ul&gt;&lt;li&gt;Let go of emotional burdens you don’t need to keep carrying.&lt;/li&gt;&lt;li&gt;Remember: When you focus on what you lack, you lose what you have. When you focus on what you have, you get what you lack.&lt;/li&gt;&lt;li&gt;Use this habit recipe: “Each time I complain I will say something I am thankful for.”&lt;/li&gt;&lt;li&gt;Relieve a grudge of its duties by asking, “What job have I hired this grudge to do?”&lt;/li&gt;&lt;/ul&gt; | . | REST | &lt;ul&gt;&lt;li&gt;Discover the art of doing nothing.&lt;/li&gt;&lt;li&gt;Do not do more today than you can completely recover from by tomorrow.&lt;/li&gt;&lt;li&gt;Break down essential work into three sessions of no more than ninety minutes each.&lt;/li&gt;&lt;li&gt;Take an effortless nap.&lt;/li&gt;&lt;/ul&gt; | . | NOTICE | &lt;ul&gt;&lt;li&gt;Achieve a state of heightened awareness by harnessing the power of presence.&lt;/li&gt;&lt;li&gt;Train your brain to focus on the important and ignore the irrelevant.&lt;/li&gt;&lt;li&gt;To see others more clearly, set aside your opinions, advice, and judgment, and put their truth above your own.&lt;/li&gt;&lt;li&gt;Clear the clutter in your physical environment before clearing the clutter in your mind.&lt;/li&gt;&lt;/ul&gt; | . | : EFFORTLESS ACTION :|| |   | . | Effortless Action | Effortless Action means accomplishing more by trying less. You stop procrastinating and take the first obvious step. You arrive at the point of completion without overthinking. You make progress by pacing yourself rather than powering through. You overachieve without overexerting. | . | DEFINE | &lt;ul&gt;&lt;li&gt;To get started on an essential project, first define what “done” looks like.&lt;/li&gt; &lt;li&gt;Establish clear conditions for completion, get there, then stop.&lt;/li&gt; &lt;li&gt;Take sixty seconds to focus on your desired outcome.&lt;/li&gt; &lt;li&gt;Write a “Done for the Day” list. Limit it to items that would constitute meaningful progress.&lt;/li&gt;&lt;/ul&gt; | . | START | &lt;ul&gt;Make the first action the most obvious one. Break the first obvious action down into the tiniest, concrete step. Then name it. Gain maximum learning from minimal viable effort. Start with a ten-minute microburst of focused activity to boost motivation and energy. | . | SIMPLIFY | &lt;ul&gt;&lt;li&gt;To simplify the process, don’t simplify the steps: simply remove them.&lt;/li&gt;&lt;li&gt;Recognize that not everything requires you to go the extra mile.&lt;/li&gt;&lt;li&gt;Maximize the steps not taken.&lt;/li&gt;&lt;li&gt;Measure progress in the tiniest of increments.&lt;/li&gt;&lt;/ul&gt; | . | PROGRESS | &lt;ul&gt;&lt;li&gt;When you start a project, start with rubbish.&lt;/li&gt;&lt;li&gt;Adopt a “zero-draft” approach and just put some words, any words, on the page.&lt;/li&gt;&lt;li&gt;Fail cheaply: make learning-sized mistakes.&lt;/li&gt;&lt;li&gt;Protect your progress from the harsh critic in your head.&lt;/li&gt;&lt;/ul&gt; | . | PACE | &lt;ul&gt;&lt;li&gt;Set an effortless pace: slow is smooth, smooth is fast.&lt;/li&gt;&lt;li&gt;Reject the false economy of “powering through.”&lt;/li&gt;&lt;li&gt;Create the right range: I will never do less than X, never more than Y.&lt;/li&gt;&lt;li&gt;Recognize that not all progress is created equal.&lt;/li&gt;&lt;/ul&gt; | . | : EFFORTLESS RESULTS :|| |   | . | Effortless Results | You’ve continued to cultivate your Effortless State. You’ve started to take Effortless Action with clarity of objective, tiny, obvious first steps, and a consistent pace. You are achieving the results you want, more easily. But now you want those results to continue to flow to you, again and again, with as little additional effort as possible. You are ready to achieve Effortless Results. | . | LEARN | &lt;ul&gt;&lt;li&gt;Learn principles, not just facts and methods.&lt;/li&gt; &lt;li&gt;Understand first principles deeply and then apply them again and again.&lt;/li&gt; &lt;li&gt;Stand on the shoulders of giants and leverage the best of what they know.&lt;/li&gt; &lt;li&gt;Develop unique knowledge, and it will open the door to perpetual opportunity.&lt;/li&gt;&lt;/ul&gt; | . | LIFT | &lt;ul&gt;&lt;li&gt;Use teaching as a lever to harness the strength of ten.&lt;/li&gt; &lt;li&gt;Achieve far-reaching impact by teaching others to teach.&lt;/li&gt; &lt;li&gt;Live what you teach, and notice how much you learn.&lt;/li&gt; &lt;li&gt;Tell stories that are easily understood and repeated.&lt;/li&gt;&lt;/ul&gt; | . | AUTOMATE | &lt;ul&gt;&lt;li&gt;Free up space in your brain by automating as many essential tasks as possible.&lt;/li&gt; &lt;li&gt;Use checklists to get it right every time, without having to rely on memory.&lt;/li&gt; &lt;li&gt;Seek single choices that eliminate future decisions.&lt;/li&gt; &lt;li&gt;Take the high-tech path for the essential and the low-tech path for the nonessential.&lt;/li&gt;&lt;/ul&gt; | . | TRUST | &lt;ul&gt;&lt;li&gt;Leverage trust as the engine oil of frictionless and high-functioning teams.&lt;/li&gt; &lt;li&gt;Make the right hire once, and it will continue to produce results again and again.&lt;/li&gt; &lt;li&gt;Follow the Three I’s Rule: hire people with integrity, intelligence, and initiative.&lt;/li&gt; &lt;li&gt;Design high-trust agreements to clarify results, roles, rules, resources, and rewards.&lt;/li&gt;&lt;/ul&gt; | . | PREVENT | &lt;ul&gt;&lt;li&gt;Don’t just manage the problem. Solve it before it happens.&lt;/li&gt; &lt;li&gt;Seek simple actions today that can prevent complications tomorrow.&lt;/li&gt; &lt;li&gt;Invest two minutes of effort once to end recurring frustrations.&lt;/li&gt; &lt;li&gt;Catch mistakes before they happen; measure twice, so you only have to cut once.&lt;/li&gt;&lt;/ul&gt; | . ",
    "url": "/notes/business_books/effortless",
    
    "relUrl": "/notes/business_books/effortless"
  },"300": {
    "doc": "Effortless: Make It Easier To Do What Matters Most",
    "title": "Two Key Takeaways",
    "content": ". | Instead of asking why something is hard, ask why can’t it be easy – invert the question. First devised by Carl Jacobi, who said, man muss immer umkehren, which translates to “One must invert, always invert.” | Need to resist the puritanical idea that effort is equated with value – not everything worthwhile is hard, and not everything easy is valueless. Start from first principles, state the problem clearly, and work towards the lightest lift you can to solve the problem. More effort spent on solving a problem doesn’t drive more value. | . ",
    "url": "/notes/business_books/effortless#two-key-takeaways",
    
    "relUrl": "/notes/business_books/effortless#two-key-takeaways"
  },"301": {
    "doc": "Effortless: Make It Easier To Do What Matters Most",
    "title": "Brief Thoughts",
    "content": "Rating: 5/10 . Your mileage may vary depending on how similar you think achieving hard business outcomes is to free throw shooting. McKeown moves adjectivally from his first book, from Essentialism to Effortless (one could imagine the -ness was dropped in some editing room with a hard-and-fast rule dictating that single word titles can’t exceed 3 syllables or 3 s_es). McKeown outlines three stages of achieving this effortlessness, from effortless state to effortless actions to effortless results. There is some valuable, although commonsensical, advice (get enough sleep, be an active listener) interspersed with some Fletcherism (essential work broken down to three sessions of no more than 90 minutes, don’t do more today than you can recover from today, clear physical clutter to clear mental clutter). McKeown also claims to leverage cognitive research to validate his theories, and while there are passing references to things like perceptual load theory or the cognitive ease principle, this book is not about the research. It’s a fast read and if nothing else is valuable for the idea of inverting hard problems to ask what they would look like if they were easy. That, and we should all be taking more _effortless naps. ",
    "url": "/notes/business_books/effortless#brief-thoughts",
    
    "relUrl": "/notes/business_books/effortless#brief-thoughts"
  },"302": {
    "doc": "My Favorite Quotes",
    "title": "My Favorite Quotes",
    "content": "If a thing be ordained to another as to its end, its last end cannot consist in the preservation of its being. Hence a captain does not intend as a last end, the preservation of the ship entrusted to him, since a ship is ordained to something else as its end, viz. to navigation.(Often quoted as: If the highest aim of a captain was the preserve his ship, he would keep it in port forever.) . | St. Thomas Aquinas, Summa Theologica (1265–1274) | . […] the source of everything respectable in man either as an intellectual or as a moral being, namely, that his errors are corrigible. He is capable of rectifying his mistakes, by discussion and experience. Not by experience alone. There must be discussion, to show how experience is to be interpreted. | John Stuart Mills, On Liberty, 1859 | . When the facts change, I change my mind. | John Maynard Keynes | . Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure. | Mel Conway, How Do Committees Invent?, 1968 | . Children have never been very good at listening to their elders, but they have never failed to imitate them. | James Baldwin | . In theory there is no difference between theory and practice. In practice there is. | Sometimes attributed to Albert Einstein, but more likely to be Benjamin Brewster | . Only mediocre people are always at their best. | Somerset Maugham | . Knuth has shown us here how to program intelligibly, but not wisely. I buy the discipline. I do not buy the result. He has fashioned a sort of industrial-strength Fabergé egg—intricate, wonderfully worked, refined beyond all ordinary desires, a museum piece from the start. | McIlroy writing about an overwrought solution Donald Knuth implemented. | . “There are a thousand hacking at the branches of evil to one who is striking at the root.” . | Henry David Thoreau | . Everyone can be taught to sculpt: Michelangelo would have had to be taught how not to. So it is with the great programmers . | Alan Perlis | . Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. | Donald Knuth | . Any sufficiently advanced technology is indistinguishable from magic. | Arthur C. Clarke | . I apologize for such a long letter - I didn’t have time to write a short one. | Mark Twain | . Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. | Antoine de Saint-Exupéry | . ",
    "url": "/notes/quotes/favorite-quotes",
    
    "relUrl": "/notes/quotes/favorite-quotes"
  },"303": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Fundamentals of Data Engineering",
    "content": ". | 1: Data Engineering Described . | Evolution of Data Engineer | Data Engineering Skills | Data Maturity | Business Responsibilities | Stakeholders | . | 2: The Data Engineering Lifecycle . | Generation | Storage | Ingestion | Transformation | Serving . | Analytics . | Business Intelligence | Operational Analytics | Embedded Analytics | Machine Learning | Reverse ETL | . | . | Data Engineering Undercurrents . | Security | Data Management . | Data Governance | Discoverability | Metadata | Data Accountability | Data Quality | Data Modelling and Design | Data Lineage | Data Integration and Interoperability | Data Lifecycle Management | Ethics and Privacy | . | DataOps . | Automation | Observability and Monitoring | Incident Response | . | Data Architecture | Orchestration | Software Engineering | . | . | 3: Designing Good Data Architecture . | Enterprise Architecture | Data Architecture | Principles of Good Data Architecture . | AWS Well-Architected Framework | Google Cloud’s Five Principles for Cloud-Native Architecture | Fundamentals of Data Engineering Principles | . | Major Architecture Concepts | Types of Data Architecture . | Data Warehouse | Data Lake | Data Lakehouse | The Modern Data Stack | Lambda Architecture | Kappa Architecture | Dataflow Model | IoT architecture | Data Mesh | . | . | 4: Choosing Technologies Across the Data Engineering Lifecycle . | Team Size and Capabilities | Speed to Market | Interoperability | Cost Optimization and Business Value . | Total Cost of Ownership | Total Opportunity Cost of Ownership | FinOps | . | Today versus the future: immutable versus transitory technologies | Location . | cloud | on-prem | hybrid cloud | multicloud | . | Build versus buy . | Open Source Software (OSS) | . | Monolith versus modular | Serverless versus servers | Optimization, performance, and the benchmark wars | . | 5: Data Generation in Source Systems . | Source Systems - Main Ideas . | Files and Unstructured Data | APIs | Application Databases (OLTP Systems) | Online Analytical Processing System (OLAP) | Change Data Capture (CDC) | Logs | Messages and Streams | . | Types of Time | Types of Databases . | relational database management system | non-relational (nosql) | key-value stores | document stores | wide column | graph database | search | time series | . | APIs . | REST | GraphQL | webhooks | rpc and grpc | . | . | 6: Storage | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering"
  },"304": {
    "doc": "Fundamentals of Data Engineering",
    "title": "1: Data Engineering Described",
    "content": "what is data engineering? . Data engineering is the development, implementation, and maintenance of systems and processes that take in raw data and produce high-quality, consistent information,that supports downstream use cases, such as analysis and machine learning. Data engineering is the intersection of security, data management, DataOps, data architecture, orchestration, and software engineering. A data engineer manages the data engineering lifecycle, beginning with getting data from source systems and ending with serving data for use cases, such as analysis or machine learning. ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#1-data-engineering-described",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#1-data-engineering-described"
  },"305": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Evolution of Data Engineer",
    "content": ". | has it’s roots in the business data warehouse (coined by Bill Inmon in 1989 but predates this to the 70s) | IBM creates SQL in the 90s | massively parallel processing (MPP) databases expanded the utility of data crunching | in early 2000s, powerhouse tech companies emerge (Google, Yahoo, Amazon, etc) | these companies begin working on big data and creating open source utilities (like Yahoo and Hadoop or Google and MapReduce) to handle | big data engineers evolved to use these big data tools | eventually, big data began to lose steam because of simplification (big data tools are tricky to work with and require specialization) | with advent of cloud, that brought about decentralized, modularized, managed, and highly abstracted tools and generalized big data engineer to just data engineer | . | data engineering straddles the divide between getting data and getting value from data | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#evolution-of-data-engineer",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#evolution-of-data-engineer"
  },"306": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Data Engineering Skills",
    "content": ". | skill set of a data engineer encompasses the “undercurrents” of data engineering: security, data management, DataOps, data architecture, and software engineering | the data engineer juggles a lot of complex moving parts and must constantly optimize along the axes of cost, agility, scalability, simplicity, reuse, and interoperability | data engineer typically doesn’t build ML models, create reports or dashboards, perform data analysis, build key performance indicators (KPIs), or develop software applications | data engineer must understand both data and technology, know best practice around data management, be aware of various options for tools, their interplay and tradeoff | requires good understanding of software engineering, DataOps, and data architecture | must understand requirements of data consumers | languages: SQL, python, JVM (Java, Scala, Groovy), bash/powershell | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#data-engineering-skills",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#data-engineering-skills"
  },"307": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Data Maturity",
    "content": ". | Data maturity is the progression toward higher data utilization, capabilities, and integration across the organization . | starting with data | . | fuzzy, loosely defined (or no) goals with data | adoption and utilization low | data team is small | data engineer’s goal is to move fast, get traction, and add value . | scaling with data | . | moved away from ad-hoc data requests to formal data practices | challenge is creating scalable data architecture and planning for a future where company is data-driven | data engineer moves from generalist to specialist . | leading with data | . | company is data-driven | automated pipelines allow people in company to self-serve analytics and ML | introducing new data sources is seamless | . | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#data-maturity",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#data-maturity"
  },"308": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Business Responsibilities",
    "content": ". | Know how to communicate with nontechnical and technical people | Understand how to scope and gather business and product requirements | Understand the cultural foundations of Agile, DevOps, and DataOps | Control costs | Learn continuously | . type A data engineers . | A for abstraction | avoids heavy lifting | keeps data architecture abstract and straightforward | use off-the-shelf products | . type B data engineers . | B for build | build data tools and systems that scale and leverage company’s core competency and competitive advantage | more often found at more data mature orgs | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#business-responsibilities",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#business-responsibilities"
  },"309": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Stakeholders",
    "content": "upstream stakeholders . | data architects | software engineers | DevOps engineers and site-reliability engineers | . downstream stakeholders . | data scientists | data analysts | machine learning engineers and AI researchers | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#stakeholders",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#stakeholders"
  },"310": {
    "doc": "Fundamentals of Data Engineering",
    "title": "2: The Data Engineering Lifecycle",
    "content": ". | comprises stages that turn raw data ingredients into a useful end product, ready for consumption by analysts, data scientists, ML engineers, and other | -the full data lifecycle encompasses data across its entire lifespan, the data engineering lifecycle focuses on the stages a data engineer controls | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#2-the-data-engineering-lifecycle",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#2-the-data-engineering-lifecycle"
  },"311": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Generation",
    "content": ". | generated from a source system - origin of data | data engineer needs working understanding of way source systems work, generate data, frequency, velocity, and variety of data | also need open line of communication with source system owners | understand limitations of source system | challenging nuance - schema (defines hierarchical organization of data) . | schemaless (on read) - enforced in applicaiton | fixed schema (on write) - enforced in database | . | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#generation",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#generation"
  },"312": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Storage",
    "content": ". | data architecture leverages several storage solutions, and most don’t function purely as storage (mixing in transformation or query semantics/serving) | temperature of data - how frequently it is accessed . | hot - most frequent, many times a day | lukewarm - every so often | cold - seldom, appropriate to store in archival system | . | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#storage",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#storage"
  },"313": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Ingestion",
    "content": ". | source systems and ingestion represent most significant bottleneck of data engineering lifecycle | understand use cases for data that is being ingested | destination of data? | what frequency, volume, format? | batch vs streaming – batch is bounded input, streaming is continuous, microbatch is a hybrid with really small batches | streaming is much more complicated and should be adopted only after identifying business use case that justifies the trade-offs from batch | push data ingestion - a source system writes data out to a target, whether a database, object store, or filesystem | pull data ingestion - data is retrieved from the source system | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#ingestion",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#ingestion"
  },"314": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Transformation",
    "content": ". | data needs to be changed from original form into something useful for downstream use cases | basic transformations map data into correct types (changing ingested string data into numeric and date types, for example), putting records into standard formats, and removing bad ones. Later stages of transformation may transform the data schema and apply normalization. Downstream, apply large-scale aggregation for reporting or featurize data for ML processes | without proper transform, data will sit inert | data featurization for ML intends to extract and enhance data features useful for training ML models | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#transformation",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#transformation"
  },"315": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Serving",
    "content": ". | get value from data | Data has value when it’s used for practical purposes. Data that is not consumed or queried is simply inert | . Analytics . Business Intelligence . | BI marshals collected data to describe a business’s past and current state | logic-on-read approach - data is stored in a clean but fairly raw form, with minimal postprocessing business logic | as company grows in data maturity, move from ad-hoc to self-service analytics | . Operational Analytics . | focuses on fine-grained details of operations | . Embedded Analytics . | different from operational as they are customer-facing | likely increased request rate for reports, access control is significantly more complicated and important | . Machine Learning . | responsibilities of data engineers overlap significantly in analytics and ML, and the boundaries between data engineering, ML engineering, and analytics engineering can be fuzzy | be careful not to prematurely dive into ML without appropriate data engineering foundations | . Reverse ETL . | takes processed data from the output side of the data engineering lifecycle and feeds it back into source systems | increasingly important as business rely on SaaS and external platforms, might want to push specific metrics to a CRM system, (e.g., Google Ads) | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#serving",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#serving"
  },"316": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Data Engineering Undercurrents",
    "content": "Security . | principle of least privilege - giving a user or system access to only the essential data and resources to perform an intended function | people and org structure are always biggest security vulnerabilities | create a culture of security that permeates the org | also about timing – give access only for duration necessary to perform work | data engineers must be competent security administrators, as security falls in their domain - understand security best practices for the cloud and on prem . | user and identity access management (IAM) roles, policies, groups, network security, password policies, and encryption, etc. | . | . Data Management . Data management is the development, execution, and supervision of plans, policies, programs, and practices that deliver, control, protect, and enhance the value of data and information assets throughout their lifecycle. | Data Management Body of Knoweldge (DMBOK) | . Data Governance . | engages people, processes, and technologies to maximize data value across an organization while protecting data with appropriate security controls | . Discoverability . | end users have quick and reliable access to data they need to do their jobs | end users should know where the data comes from, how it relates to other data, and what data means | . Metadata . | data about data | either autogenerated or human generated – metadata collection is often manual and error prone | technology can assist with collection and remove some errors (data catalogs, data-lineage tracking systems, metadata management tools) | . types of metadata . | type | description | examples | . | business metadata | way data is used in business | business and data definitions, data rules and logic, how and where data is used, and data owners | . | technical metadata | describes the data created and used by systems across the engineering lifecycle | data model, schema, data lineage, field mappings, pipeline workflows | . | pipeline metadata | provides details of workflow schedule | schedule, system and data dependencies, configs, connection details | . | data-lineage metadata | tracks origin and changes to data, and dependencies over time | audit of data trails | . | schema metadata | describes the structure of data stored in a system such as a database, a data warehouse, a data lake, or a filesystem | schemas | . | operational metadata | describes the operational results of various systems | statistics about processes, job IDs, application runtime logs, data used in a process, and error logs | . | reference metadata | data used to classify other data | lookup data | . Data Accountability . | assigning an individual to govern a portion of data – managing data is tough if no one is accountable for the data in question | . Data Quality . | optimization of data toward the desired state – what you get compared to what you expect | should conform to expectations in business metadata | accuracy - Is the collected data factually correct? Are there duplicate values? Are the numeric values accurate? | completeness - Are the records complete? Do all required fields contain valid values? | timeliness - Are records available in a timely fashion? | . Data Modelling and Design . | process of converting data into a usable form | want to avoid the write once, read never (WORN) access pattern or data swamp | . Data Lineage . | recording the audit trail of data through its lifecycle, tracking both systems that process data and upstream data that it depends on | data observability driven developement (dodd) | . Data Integration and Interoperability . | process of integrating data across tools and processes | . Data Lifecycle Management . | how long you retain data | considerations: . | cost of retaining indefinitely | privacy with things like GDPR and CCPA | . | . Ethics and Privacy . | data engineers need to mask personally identifiable information (PII) and other sensitive info | bias can be identified and tracked | . DataOps . | maps the best practices of Agile methodology, DevOps, and statistical process control (SPC) to data | increases release and quality of data products | set of cultural habits | . DataOps is a collection of technical practices, workflows, cultural norms, and architectural patterns that enable: . | Rapid innovation and experimentation delivering new insights to customers with increasing velocity | Extremely high data quality and very low error rates | Collaboration across complex arrays of people, technology, and environments | Clear measurement, monitoring, and transparency of results | . Automation . | enables reliability and consistency and allows faster deployments | change management (environment, code, and data version control), continuous integration/continuous deployment (CI/CD), and configuration as code | DataOps Manifesto | . Observability and Monitoring . | critical to get ahead of any problems you might experience | . Incident Response . | using the automation and observability capabilities mentioned previously to rapidly identify root causes of an incident and resolve it as reliably and quickly as possible | data engineers should proactively find issues before business reports them | . Data Architecture . | A data architecture reflects the current and future state of data systems that support an organization’s long-term data needs and strategy | . Orchestration . | the process of coordinating many jobs to run as quickly and efficiently as possible on a scheduled cadence | new tools like Airflow, Dagster, Prefect allow for infra as code | . Software Engineering . | central skill for data engineers | core data processing code | development of open source frameworks | streaming complications | infra as code (IaC) | pipelines as code | general-purpose problem solving | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#data-engineering-undercurrents",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#data-engineering-undercurrents"
  },"317": {
    "doc": "Fundamentals of Data Engineering",
    "title": "3: Designing Good Data Architecture",
    "content": " ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#3-designing-good-data-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#3-designing-good-data-architecture"
  },"318": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Enterprise Architecture",
    "content": ". | data architecture is part of enterprise architecture | technical solutions exist to support business goals | architects . | identify problems in current state (poor data quality, scalability limits, money-losing lines of business), | define desired future states (agile data-quality improvement, scalable cloud data solutions, improved business processes), and | realize initiatives through execution of small, concrete steps | . | . The Open Group Architecture Framework (TOGAF) definition . The term “enterprise” in the context of “enterprise architecture” can denote an entire enterprise—encompassing all of its information and technology services, processes, and infrastructure—or a specific domain within the enterprise. In both cases, the architecture crosses multiple systems, and multiple functional groups within the enterprise. Gartner’s definition . Enterprise architecture (EA) is a discipline for proactively and holistically leading enterprise responses to disruptive forces by identifying and analyzing the execution of change toward desired business vision and outcomes. EA delivers value by presenting business and IT leaders with signature-ready recommendations for adjusting policies and projects to achieve targeted business outcomes that capitalize on relevant business disruptions. Enterprise Architecture Book of Knowledge (EABOK) definition . Enterprise Architecture (EA) is an organizational model; an abstract representation of an Enterprise that aligns strategy, operations, and technology to create a roadmap for success. Fundamentals of Data Engineering definition . Enterprise architecture is the design of systems to support change in the enterprise, achieved by flexible and reversible decisions reached through careful evaluation of trade-offs. ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#enterprise-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#enterprise-architecture"
  },"319": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Data Architecture",
    "content": "TOGAF definition . A description of the structure and interaction of the enterprise’s major types and sources of data, logical data assets, physical data assets, and data management resources. DAMA definition . Identifying the data needs of the enterprise (regardless of structure) and designing and maintaining the master blueprints to meet those needs. Using master blueprints to guide data integration, control data assets, and align data investments with business strategy. Fundamentals of Data Engineering definition . Data architecture is the design of systems to support the evolving data needs of an enterprise, achieved by flexible and reversible decisions reached through a careful evaluation of trade-offs. “Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.” . | Grady Brooch | . | good data architecture is flexible and easily maintainable, and it’s a living, breathing thing | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#data-architecture-1",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#data-architecture-1"
  },"320": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Principles of Good Data Architecture",
    "content": "AWS Well-Architected Framework . | operational excellence | security | reliability | performance efficiency | cost optimization | sustainability | . Google Cloud’s Five Principles for Cloud-Native Architecture . | design for automation | be smart with state | favor managed services | practice defense in depth | always be architecting | . Fundamentals of Data Engineering Principles . | Choose components wisely . | rely on common components already in use rather than reinventing the wheel | common components must support robust permission and security to enable sharing of assets among teams | . | Plan for Failure . | Everything fails, all the time | availability - The percentage of time an IT service or component is in an operable state | reliability - The system’s probability of meeting defined standards in performing its intended function during a specified interval | recovery time objective - The maximum acceptable time for a service or system outage | recovery point objective - the acceptable state after recovery | . | Architect for Scalability . | scalable systems need to scale up to handle significant amounts of data | also need to scale down to reduce costs | can scale to zero to turn off when not in use | . | Architecture is Leadership . | Strong leadership skills combined with high technical competence are rare and extremely valuable In many ways, the most important activity of Architectus Oryzus is to mentor the development team, to raise their level so they can take on more complex issues.mImproving the development team’s ability gives an architect much greater leverage than being the sole decision-maker and thus running the risk of being an architectural bottleneck. | . | Always Be Architecting . | deep knowledge of the baseline architecture (current state), develop a target architecture, and map out a sequencing plan to determine priorities and the order of architecture changes | . | Build Loosely Coupled Systems . | system broken into many small components | These systems interface with other services through abstraction layers, such as a messaging bus or an API. These abstraction layers hide and protect internal details of the service, such as a database backend or internal classes and method calls. | As a consequence of property 2, internal changes to a system component don’t require changes in other parts. Details of code updates are hidden behind stable APIs. Each piece can evolve and improve separately. | As a consequence of property 3, there is no waterfall, global release cycle for the whole system. Instead, each component is updated separately as changes and improvements are made. | loosely coupled teams and technical systems allow for more efficient work | . | Make Reversible Decisions . | one way doors – a door you can’t walk back out of | two way doors – a door you can leave the same way you came in | . | Prioritize Security . | hardened-perimeter: a strong firewall prevents intrusion, but security controls are lax within the perimeter | zero trust: no trust within or without the firewall | . | Embrace FinOps FinOps is an evolving cloud financial management discipline and cultural practice that enables organizations to get maximum business value by helping engineering, finance,technology, and business teams to collaborate on data-driven spending decisions. | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#principles-of-good-data-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#principles-of-good-data-architecture"
  },"321": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Major Architecture Concepts",
    "content": ". | domain - the real-world subject area for which you’re architecting | service - a set of functionality whose goal is to accomplish a task | scalability - allows us to increase capacity of system to improve performance and handle demand | elasticity - ability of scalable system to scale dynamically | availability - percentage of time an IT service or component is in operable state | reliability - system’s probability of meeting defined standards in performing its intended function during a specified interval | horizontal scaling - add more machines to satisfy load and resource requirements | vertical scaling - increase resources (CPU, disk, memory, I/O) to satisfy load requirements | tightly coupled services - extremely centralized dependencies and workflows – every part of a domain and service is vitally dependent upon every other domain and service | loosely coupled services - decentralized domains and services that do not have strict dependence on each other | single tier - your database and application are tightly coupled, residing on a single server | multitier - (also known as n-tier) architecture is composed of separate layers: data, application, business logic, presentation, etc. a three tier architecture consists of data, application logic, and presentation tiers | shared nothing architecture - a single node handles each request, meaning other nodes do not share resources such as memory, disk, or CPU with this node or with each other | shared disk architecture - share the same disk and memory accessible by all nodes | technical coupling - architectural tiers | domain coupling - the way domains are coupled together | monolith - a single codebase running on a single machine that provides both the application logic and user interface | microservices - comprises separate, decentralized, and loosely coupled services | brownfield projects often involve refactoring and reorganizing an existing architecture and are constrained by the choices of the present and past | greenfield projects - allows you to pioneer a fresh start, unconstrained by the history or legacy of a prior architecture | strangler pattern - new systems slowly and incrementally replace a legacy architecture’s components – allows for surgical approach of deprecating one piece of system at a time, and for flexible and reversible decisions | event-driven architecture events that are broadly defined as something that happened, typically a change in the state of something, consisting of event production, routing, and consumption | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#major-architecture-concepts",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#major-architecture-concepts"
  },"322": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Types of Data Architecture",
    "content": "Data Warehouse . | A data warehouse is a central data hub used for reporting and analysis. Data in a data warehouse is typically highly formatted and structured for analytics use cases. It’s among the oldest and most well-established data architectures. | The organizational data warehouse architecture organizes data associated with certain business team structures and processes. The technical data warehouse architecture reflects the technical nature of the data warehouse, such as MPP | . two main characteristics . | Separates online analytical processing (OLAP) from production databases (online trans‐ action processing) | centralizes and organizes data | . | Extract, Load, Transform (ELT) - data gets moved more or less directly from production systems into a staging area in the data warehouse | cloud data warehouse – things like Redshift, Google BigQuery and Snowflake (the latter two separate compute and storage pricing) | data mart - a more refined subset of a warehouse designed to serve analytics and reporting, focused on a single suborganization, department, or line of business . | makes data more easily accessible to analysts and report developers | provide an additional stage of transformation beyond that provided by initial ETL or ELT | . | . Data Lake . | all data dumped in a central location | led to dumping ground of data – data swamp, dark data, write once, read never (WORN) | first generation of data lakes have largely gone out of style | . Data Lakehouse . | The lakehouse incorporates the controls, data management, and data structures found in a data warehouse while still housing data in object storage and supporting a variety of query and transformation engines. In particular, the data lakehouse supports atomicity, consistency, isolation, and durability (ACID) transactions | . The Modern Data Stack . main objective of the modern data stack is to use cloud-based, plug-and-play, easy-to-use, off-the-shelf components to create a modular and cost-effective data architecture. These components include data pipelines, storage, transformation, data management/governance, monitoring, visualization, and exploration. Key outcomes of the modern data stack are self-service (analytics and pipelines), agile data management, and using open source tools or simple proprietary tools with clear pricing structures. Lambda Architecture . In a Lambda architecture you have systems operating independently of each other—batch, streaming, and serving. The source system is ideally immutable and append-only, sending data to two destinations for processing: stream and batch. Kappa Architecture . | response to shortcomings of Lambda architecture | Jay Kreps proposed a system where stream-processing platform is the backbone of all data handling | hasn’t been widely adopted despite introduced in 2014 – difficult to execute on and complicated to maintain | . Dataflow Model . The core idea in the Dataflow model is to view all data as events, as the aggregation is performed over various types of windows. Ongoing real-time event streams are unbounded data. Data batches are simply bounded event streams, and the boundaries provide a natural window. “batch is a special case of streaming” . IoT architecture . | data generated from devices (things) and sent to a destination | devices - physical hardware connected to the internet and collect data and transmit to downstream destination | iot gateway - hub for connecting devices and securely routing devices to appropriate destinations on the internet | . Data Mesh . | see notes on Data Mesh | response to sprawling, monolithic data platforms | four key components . | Domain-oriented decentralized data ownership and architecture | Data as a product | Self-serve data infrastructure as a platform | Federated computational governance | . | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#types-of-data-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#types-of-data-architecture"
  },"323": {
    "doc": "Fundamentals of Data Engineering",
    "title": "4: Choosing Technologies Across the Data Engineering Lifecycle",
    "content": "Architecture is strategic; tools are tactical […] Architecture is the high-level design, roadmap, and blueprint of data systems that satisfy the strategic aims for the business. Architecture is the what, why, and when. Tools are used to make the architecture a reality; tools are the how. ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#4-choosing-technologies-across-the-data-engineering-lifecycle",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#4-choosing-technologies-across-the-data-engineering-lifecycle"
  },"324": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Team Size and Capabilities",
    "content": ". | There is a continuum of simple to complex technologies, and a team’s size roughly determines the amount of bandwidth your team can dedicate to complex solutions. | take inventory of team’s skills, and use that to drive tool selection | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#team-size-and-capabilities",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#team-size-and-capabilities"
  },"325": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Speed to Market",
    "content": ". | choosing the right technologies that help you deliver features and data faster while maintaining high-quality standards and security | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#speed-to-market",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#speed-to-market"
  },"326": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Interoperability",
    "content": ". | describes how various tech or systems interact, connect, exchange data, etc. | need to be aware of how simple it is to connect systems | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#interoperability",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#interoperability"
  },"327": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Cost Optimization and Business Value",
    "content": ". | budget and time and finite, and cost is major constraint in choosing the right arch | . Total Cost of Ownership . | Total cost of ownership (TCO) is the total estimated cost of an initiative, including the direct and indirect costs of products and services utilized. | direct costs - directly attributed to an initiative (salaries, AWS bill, etc.) | indirect costs (overhead) - independent of the initiative, must be paid regardless | capital expenses (capex) - require up-front investment, need to be paid today | operational expenses (opex) - opposite of capex and gradual, over time | . Total Opportunity Cost of Ownership . | total opportunity cost of ownership (toco) - cost of lost opportunities incur in choosing a tech, arch, or process | . FinOps . If it seems that FinOps is about saving money, then think again. FinOps is about making money. Cloud spend can drive more revenue, signal customer base growth, enable more product and feature release velocity, or even help shut down a data center. ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#cost-optimization-and-business-value",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#cost-optimization-and-business-value"
  },"328": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Today versus the future: immutable versus transitory technologies",
    "content": ". | immutable tech - components that underpin cloud or languages or paradigms that have stood the test of time, eg. block storage, networking, servers, SQL, bash | transitory tech - things that come and go, eg. Javascript front-end language | should evaluate tools every two years, find the immutable tech and use that as base | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#today-versus-the-future-immutable-versus-transitory-technologies",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#today-versus-the-future-immutable-versus-transitory-technologies"
  },"329": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Location",
    "content": "cloud . | much more flexible than on-prem, but you need to ensure compute optimization because pricing model is different than heavy upfront on-prem model | The key to finding value in the cloud is understanding and optimizing the cloud pricing model | Data gravity is real: once data lands in a cloud, the cost to extract it and migrate processes can be very high. | . on-prem . | often default for companies, but less elastic and flexible than cloud | . hybrid cloud . | both on-premise and in the cloud, depending on workload | . multicloud . | deploying to multiple public clouds to take advantage of the best services across several clouds | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#location",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#location"
  },"330": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Build versus buy",
    "content": ". | argument for building is end to end control over solution and aren’t at the mercy of a vendor or open source community | argument for buying is resource constraints and expertise | should invest in building and customizing when doing so provides a competitive advantage for your business | . Open Source Software (OSS) . | software distribution model where software and underlying code base made available for general use under specific licensing terms | Community-managed OSS - vibrant use base and strong community. Need to assess mindshare, maturity, troubleshooting, project management, team, developer relations and community management, contributing, roadmap, self-hosting and maintenance, and giving back to the community to assess | Commercial OSS - vendor will offer core of services for free and enhancements or managed services for a fee. Need to assess value, delivery model, support, releases and bug fixes, sales cycle and pricing, company finances, logos vs. revenue, and community support in choosing | Proprietary Walled Gardens - two examples: independent companies and cloud-platform offerings – need to assess interoperability, mindshare and market share, documentation and support, pricing, and longevity | . There’s excellent value in upskilling your existing data team to build sophisticated systems on managed platforms rather than babysitting on-premises servers. ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#build-versus-buy",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#build-versus-buy"
  },"331": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Monolith versus modular",
    "content": ". | monolith . | pros: easier to reason about, costs lower cognitive burden and context switching. | cons: brittle, user-induced problems occur, multi-tenancy is a problem, and switching to a new system is painful | . | modular . | pros: is easier to swap components to take advantage of fast moving landscape, limits team’s complexity and size | cons: more to reason about, interoperability can be harder | . | . While monoliths are attractive because of ease of understanding and reduced complexity, this comes at a high cost. The cost is the potential loss of flexibility, opportunity cost, and high-friction development cycles. ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#monolith-versus-modular",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#monolith-versus-modular"
  },"332": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Serverless versus servers",
    "content": ". | Expect servers to fail Server failure will happen. Avoid using a “special snowflake” server that is overly customized and brittle, as this introduces a glaring vulnerability in your architec‐ ture. Instead, treat servers as ephemeral resources that you can create as needed and then delete. If your application requires specific code to be installed on the server, use a boot script or build an image. Deploy code to the server through a CI/CD pipeline. | Use clusters and autoscaling Take advantage of the cloud’s ability to grow and shrink compute resources on demand. As your application increases its usage, cluster your application servers, and use autoscaling capabilities to automatically horizontally scale your application as demand grows. | Treat your infrastructure as code Automation doesn’t apply to just servers and should extend to your infrastructure whenever possible. Deploy your infrastructure (servers or otherwise) using deployment managers such as Terraform, AWS CloudFormation, and Google Cloud Deployment Manager. | Use containers For more sophisticated or heavy-duty workloads with complex installed depen‐ dencies, consider using containers on either a single server or Kubernetes. | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#serverless-versus-servers",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#serverless-versus-servers"
  },"333": {
    "doc": "Fundamentals of Data Engineering",
    "title": "Optimization, performance, and the benchmark wars",
    "content": ". | do your homework before relying on vendor benchmarks to choose | Dewitt clause - forbids the publication of database benchmarks that the database vendor has not sanctioned | . Always approach technology the same way as architecture: assess trade-offs and aim for reversible decisions. ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#optimization-performance-and-the-benchmark-wars",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#optimization-performance-and-the-benchmark-wars"
  },"334": {
    "doc": "Fundamentals of Data Engineering",
    "title": "5: Data Generation in Source Systems",
    "content": ". | Analog data – occurs in real world, eg vocal speech, sign language, writing on paper, or playing an instrument creation | Digital data – created by converting analog data to digital or native to a system | . Source Systems - Main Ideas . Files and Unstructured Data . | files are universal medium of exchange | structured (Excel, CSV), semistructured (JSON, XML, CSV), or unstructured (TXT, CSV) | . APIs . | application programming interface - standard way of exchanging data between systems | . Application Databases (OLTP Systems) . | online transaction processing (OLTP) system— a database that reads and writes individual data records at a high rate | supports low latency and high concurrency | ACID - atomicity,consistency, isolation, durability. Consistency means that any database read will return the last written version of the retrieved item. Isolation entails that if two updates are in flight concurrently for the same thing, the end database state will be consistent with the sequential execution of these updates in the order they were submitted. Durability indicates that committed data will never be lost, even in the event of power loss. | running analytics on these machines works but is not scalable | . Online Analytical Processing System (OLAP) . | OLAP to refer to any database system that supports high-scale interactive analytics queries | . Change Data Capture (CDC) . | Change data capture (CDC) is a method for extracting each change event (insert, update, delete) that occurs in a database | used to replicate between databases in real time | . Logs . | captures information about events that occur in systems | should capture who (human, system, service associated with event), what (the event and related metadata) and when (timestamp) | logs can be binary, semi-structured (eg JSON) or plain text / unstructured | . Messages and Streams . | message - raw data communicated across two or more systems | stream - append-only log of event records | . Types of Time . | always include timestamps for each phase through which an event travels | ingestion time - when an event is ingested from source system into a message queue, cache, memory, etc. | processing time - how long the data took to process, measured in seconds, minutes, hours | . Types of Databases . relational database management system . | RDBMS - data is stored in a table of relations (rows) and each row contains multiple fields (columns) | rows are typically stored as contiguous sequence of bytes on disk | tables indexed by primary key - unique field for each row – indexing strategy is closely related to layout of table on disk | tables can have foreign key - fields iwth values connected with the values of PKs of other tables, facilitating joins and allowing for complex schemas | normalization - strategy for ensuring that data in records in not duplicated in multiple places | typically ACID compliant | . non-relational (nosql) . | not only sql - abandons relational paradigm | far too many different types of nosql to cover in one section | . key-value stores . | non-relational database that retrieves records using a key that uniquely identifies each record | similar to hash map / dictionary | good for caching data | also help applications that require high-durability persistence | . document stores . | specialized key-value store | document is a nested object (like JSON) | doesn’t support joins | generally not ACID compliant | . wide column . | optimized for storing massive amounts of data with high transaction rates and extremely low latency | don’t support complex queries | helpful for ad tech, IoT, real-time personalization apps | . graph database . | explicitly store in mathematical graph structure (as a series of nodes and edges) | Neo4j | good fit when you want to analyze connectivity between elements | . search . | nonrelational database used to search data’s complex and straightforward semantic and structural characteristics | ideal for text search and log analysis | . time series . | values organized by time | eg. stock prices, logs, etc. | . APIs . REST . | REST stands for representational state transfer. This set of practices and philosophies for building HTTP web APIs was laid out by Roy Fielding in 2000 in a PhD dissertation | key principles are that interactions are stateless – there is no notion of a session or context | if a REST call changes a systems state, these changes are global | . However, low-level plumbing tasks still consume many resources. At virtually any large company, data engineers will need to deal with the problem of writing and maintaining custom code to pull data from APIs, which requires understanding the structure of the data as provided, developing appropriate data-extraction code, and determining a suitable data synchronization strategy. GraphQL . | facebook query language for applicaiton data and an alternative to generic REST APIs | built around JSON and allows for more expressive queries than REST | . webhooks . | simple event-based data-transmission pattern | when an event happens, it triggers a call to an HTTP endpoint hosted by data consumer | . rpc and grpc . | remote procedure call (rpc) used in distributed computing – allows you to run a procedure on a remote system | gRPC developed by google to utilize HTTP/2 | . ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#5-data-generation-in-source-systems",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#5-data-generation-in-source-systems"
  },"335": {
    "doc": "Fundamentals of Data Engineering",
    "title": "6: Storage",
    "content": " ",
    "url": "/notes/tech_books/fundamentals-of-data-engineering#6-storage",
    
    "relUrl": "/notes/tech_books/fundamentals-of-data-engineering#6-storage"
  },"336": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "The Fundamentals of Software Architecture: An Engineering Approach",
    "content": ". | Defining Software Architecture | Expectations of an Architect | Laws of Software Architecture | Thinking Like an Architect | Modularity . | Cohesion | Coupling | Connascence | . | Architecture Characteristics . | Operational Architecture Characteristics | Structural Architecture Characteristics | Cross-Cutting Architecture Characteristics | . | Measuring and Governing Architecture Characteristics . | Architectural Quanta | . | Components . | Partitioning | . | Architecture Styles . | Fundamental Patterns . | Big Ball of Mud | Unitary Architecture | Client/Server | . | Distributed Computing | Layered Architecture Style | Pipeline Architecture Style | Microkernel Architecture Style | Service-Based Architecture Style | Event-Driven Architecture Style | Space-Based Architecture | Orchestration-Driven Service-Oriented Architecture | Microservices Architecture | . | Architecture Decisions . | Decision Anti-Patterns | Architecture Decision Records | Assessing Risk | Presenting Architecture | . | Assessment Questions | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture"
  },"337": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Defining Software Architecture",
    "content": ". | the structure of the system . | refers to the type of architecture style (or styles) the system is implemented in (such as microservices, layered, or microkernel) | . | architecture characteristics . | The architecture characteristics define the success criteria of a system, which is generally orthogonal to the functionality of the system | . | architecture decisions . | define the rules for how a system should be constructed | . | design principles . | A design principle differs from an architecture decision in that a design principle is a guideline rather than a hard-and-fast rule | . | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#defining-software-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#defining-software-architecture"
  },"338": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Expectations of an Architect",
    "content": ". | make architecture decisions . | An architect is expected to dene the architecture decisions and design principles used to guide technology decisions within the team, the department, or across the enterprise. | . | continually analyze the architecture . | An architect is expected to continually analyze the architecture and current technology environment and then recommend solutions for improvement. | . | keep current with the latest trends . | An architect is expected to keep current with the latest technology and industry trends. | . | ensure compliance with decisions . | An architect is expected to ensure compliance with architecture decisions and design principles. | . | diverse exposure and experience . | An architect is expected to have exposure to multiple and diverse technologies, frameworks, platforms, and environments. | . | have business domain knowledge . | An architect is expected to have a certain level of business domain expertise. | . | possess interpersonal skills . | An architect is expected to possess exceptional interpersonal skills, including teamwork, facilitation, and leadership. | . | understand and navigate politics . | An architect is expected to understand the political climate of the enterprise and be able to navigate the politics. | . | . | useful to separate software development process from engineering practices | process - how teams are formed and managed, how meetings are conducted, and workflow organization; it refers to the mechanics of how people organize and interact | engineering practices - process-agnostic practices that have illustrated, repeatable benefit | architectural fitness functions: an objective integrity assessment of some architectural characteristic(s) | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#expectations-of-an-architect",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#expectations-of-an-architect"
  },"339": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Laws of Software Architecture",
    "content": ". | Everything in software architecture is a trade-off . | If an architect thinks they have discovered something that isn’t a trade-off, more likely they just haven’t identified the trade-off yet | . | Why is more important than how | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#laws-of-software-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#laws-of-software-architecture"
  },"340": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Thinking Like an Architect",
    "content": ". | understand the difference between architecture and design, and understand how to collaborate with dev teams to make architecture work | have a wide breadth of technical knowledge while still maintaining a certain level of technical depth – see solutions and possibilities others do not . | breadth is more important than depth | frozen caveman anti-pattern – someone who always reverts back to their pet irrational concern for every architecture | . | understanding, analyzing, and reconciling trade-offs between various solutions and technologies | understanding the importance of business drivers and how they translate to architectural concerns | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#thinking-like-an-architect",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#thinking-like-an-architect"
  },"341": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Modularity",
    "content": "modularity - a logical grouping of related code, which could be a group of classes in an object-oriented language or functions in a structured or functional language, e.g., package in Java, namespace in .NET . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#modularity",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#modularity"
  },"342": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Cohesion",
    "content": "Cohesion refers to what extent the parts of a module should be contained within the same module – less precise than coupling . From best to worst cohesion . | functional cohesion - every part of the module is related to the other, and the module contains everything essential to function | sequential cohesion - two modules interact, where one outputs data that becomes the input for the other | communicational cohesion - two modules form a communication chain, where each operates on info and/or contributes to some output | procedural cohesion - two modules must execute code in a particular order | temporal cohesion - modules are related based on timing dependencies | logical cohesion - data within modules is related logically but not functionally | coincidental cohesion - elements in a module are not related other than being in the same source file | . | the Chidamber and Kemerer Object- oriented metrics suite is a well-known suite of metrics to test cohesion (and coupling) like cyclomatic complexity | Chidamber and Kemerer Lack of Cohesion in Methods (LCOM) – The sum of sets of methods not shared via sharing fields | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#cohesion",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#cohesion"
  },"343": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Coupling",
    "content": "afferent coupling - measures the number of incoming connections to a code artifact (component, class, function, etc) . efferent coupling - measures number of outgoing connections to a code artifact . abstractness - ratio of abstract artifacts (abstract classes, interfaces, etc) to concrete artifacts (implementation) . instability - ratio of efferent coupling to the sum of both efferent and afferent coupling – determines volatility of code base; an unstable codebase breaks more easily when changed . distance from the main sequence $D = |A + I - 1|$ . | A = abstractness and I = instability | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#coupling",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#coupling"
  },"344": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Connascence",
    "content": "Two components are connascent if a change in one would require the other to be modified in order to maintain the overall correctness of the system – recasting efferent and afferent coupling for object-oriented language (those measures of coupling predate OOP) . Static Connascence . | source-code-level coupling . | Connascence of Name (CoN)Multiple components must agree on the name of an entity. | Connascence of Type (CoT) Multiple components must agree on the type of an entity. | Connascence of Meaning (CoM) or Connascence of Convention (CoC) Multiple components must agree on the meaning of particular values. | Connascence of Position (CoP) Multiple components must agree on the order of values. | Connascence of Algorithm (CoA) Multiple components must agree on a particular algorithm. | . Dynamic Connascence . | calls executed at runtime . | Connascence of Execution (CoE) The order of execution of multiple components is important | Connascence of Timing (CoT) The timing of execution of multiple components is important | Connascence of Values (CoV) Occurs when several values rely on one another and must change together | Connascence of Identity (CoI) Multiple components must reference the same entity | . Properties of Connascence . strength . | the ease with which a developer can refactor that type of coupling | refactor towards better types of connascence | prefer static to dynamic, as its easier for static code analysis | . locality . | how proximal modules are to each other in code base | must consider strength and locality together | . degree . | the size of its impact – does it affect a few classes or many? | . guide for using connascence to improve system modularity . | Minimize overall connascence by breaking the system into encapsulated elements | Minimize any remaining connascence that crosses encapsulation boundaries | Maximize the connascence within encapsulation boundaries | . Rule of Degree: convert strong forms of connascence into weaker forms of connascence Rule of Locality: as the distance between software elements increases, use weaker forms of connascence . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#connascence",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#connascence"
  },"345": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Architecture Characteristics",
    "content": "meets three criteria: . | Specifies a non-domain design consideration - operational and design criteria for success; how to implement requirements and why choices were made | Influences some structural aspect of the design | Is critical or important to application success - choose the fewest architecture characteristics rather than the most possible . | explicit architecture characteristics appear in requirements, where implicit ones need to be identified and extracted | architect able to translate domain concerns to identify the right architectural characteristics | anti-pattern of creating a generic architecture that tries to solve too much and solves nothing | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#architecture-characteristics",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#architecture-characteristics"
  },"346": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Operational Architecture Characteristics",
    "content": "| characteristic | description | . | Availability | How long the system will need to be available (if 24/7, steps need to be in place to allow the system to be up and running quickly in case of any failure). | . | Continuity | Disaster recover ability | . | Performance | Includes stress testing, peak analysis, analysis of the frequency of functions used, capacity required, and response times. Performance acceptance sometimes requires an exercise of its own, taking months to complete. | . | Recoverability | Business continuity requirements (e.g., in case of a disaster, how quickly is the system required to be online again?). This will affect the backup strategy and requirements for duplicated hardware. | . | Reliability/safety | Assess if the system needs to be fail-safe, or if it is mission critical in a way that affects lives. If it fails, will it cost the company large sums of money? | . | Robustness | Ability to handle error and boundary conditions while running if the internet connection goes down or if there’s a power outage or hardware failure. | . | Scalability | Ability for the system to perform and operate as the number of users or requests increases. | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#operational-architecture-characteristics",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#operational-architecture-characteristics"
  },"347": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Structural Architecture Characteristics",
    "content": "| characteristic | description | . | Configurability | Ability for the end users to easily change aspects of the software’s configuration (through usable interfaces). | . | Extensibility | How important it is to plug new pieces of functionality in. | . | Installability | Ease of system installation on all necessary platforms. | . | Leverageability/reuse | Ability to leverage common components across multiple products. | . | Localization | Support for multiple languages on entry/query screens in data fields; on reports, multibyte character requirements and units of measure or currencies. | . | Maintainability | How easy it is to apply changes and enhance the system? | . | Portability | Does the system need to run on more than one platform? (For example, does the frontend need to run against Oracle as well as SAP DB? | . | Supportability | What level of technical support is needed by the application? What level of logging and other facilities are required to debug errors in the system? | . | Upgradeability | Ability to easily/quickly upgrade from a previous version of this application/solution to a newer version on servers and clients. | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#structural-architecture-characteristics",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#structural-architecture-characteristics"
  },"348": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Cross-Cutting Architecture Characteristics",
    "content": "| characteristic | description | . | Accessibility | Access to all your users, including those with disabilities like colorblindness or hearing loss. | . | Archivability | Will the data need to be archived or deleted after a period of time? (For example, customer accounts are to be deleted after three months or marked as obsolete and archived to a secondary database for future access.) | . | Authentication | Security requirements to ensure users are who they say they are. | . | Authorization | Security requirements to ensure users can access only certain functions within the application (by use case, subsystem, webpage, business rule, field level, etc.). | . | Legal | What legislative constraints is the system operating in (data protection, Sarbanes Oxley, GDPR, etc.)? What reservation rights does the company require? Any regulations regarding the way the application is to be built or deployed? | . | Privacy | Ability to hide transactions from internal company employees (encrypted transactions so even DBAs and network architects cannot see them). | . | Security | Does the data need to be encrypted in the database? Encrypted for network communication between internal systems? What type of authentication needs to be in place for remote user access? | . | Supportability | What level of technical support is needed by the application? What level of logging and other facilities are required to debug errors in the system? | . | Usability/achievability | Level of training required for users to achieve their goals with the application/solution. Usability requirements need to be treated as seriously as any other architectural issue. | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#cross-cutting-architecture-characteristics",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#cross-cutting-architecture-characteristics"
  },"349": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Measuring and Governing Architecture Characteristics",
    "content": "problems with definitions of architectural characteristics: . | they aren’t easily measured or observed | definitions vary wildly | too composite | . need to agree on objective definition of these architecture characteristics . | operational measures, like performance, or request time | structural measures, like cyclomatic complexity (cyclocamatic complexity = edges - nodes + 2) | process measures, like testability or deployability | . architecture fitness functions - any mechanism that provides an objective integrity assessment of some architecture characteristic or combination of architecture characteristics . | cyclic dependencies – how many modules import other modules; code reviews help, but a fitness function as part of continuous integration is better | distance from the main sequence – again, best as fitness function test as part of continuous integration – metrics tools like JDepend or ArchUnit (Java) NetArchTest (.NET) for fitness testing | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#measuring-and-governing-architecture-characteristics",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#measuring-and-governing-architecture-characteristics"
  },"350": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Architectural Quanta",
    "content": ". | An independently deployable artifact with high functional cohesion and synchronous connascence | derived from physics term quantum, which is minimum amount of any physical entity involved in an interaction | . independently deployable - includes all necessary components to function independently from other parts of the architecture high functional cohesion - how well the contained code is unified – a quantum does something purposeful synchronous connascence - synchronous calls within an application context or between distributed services that form the quantum . bounded context - from domain-driven design – everything related to the domain is visible internally but opaque to other bounded contexts – each entity works best within a localized context . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#architectural-quanta",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#architectural-quanta"
  },"351": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Components",
    "content": ". | component - the physical manifestation of a module (jar in Java, dll in .NET, gem in ruby, etc) | Components form the fundamental modular building block in architecture, making them a critical consideration for architects – top-level partitioning is important concern | component is often the lowest level of a software system an architect interacts with directly (outside of code quality metrics) | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#components",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#components"
  },"352": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Partitioning",
    "content": ". | domain partitioning - breaking the architecture into domains or workflows | technical partitioning - breaking the architecture into technical capabilities (presentation, business rules, services, etc) | . Architecture Exposition Cycle . | identify initial components - what partitioning to use, what components, etc. | assign requirements to components - align to see how well they fit | analyze roles and responsibilities - allows architect to align component and domain granularity | analyze architecture characteristics - think about how these characteristics impact component division and granularity | restructure components - based on feedback, continuously iterate with developers | . Identifying Components . | actor/actions - architects identify actors who perform activities with the application and the actions those actors may perform | event storming - assuming the project uses messages and/or events to communicate components, the team tries to determine which events occur in the system based on requirements and identified roles, and build components around those events and message handlers | workflow approach - The workflow approach models the components around workflows, much like event storming, but without the explicit constraints of building a message-based system; a workflow approach identifies the key roles, determines the kinds of workflows these roles engage in, and builds components around the identified activities. | . entity trap anti-pattern - take each entity and create a Manager for it – this isn’t an architecture, it’s an object-relational mapping (ORM) of a framework of a database; should just use an off-the-shelf solution like Naked Objects in .NET or Isis in Java to create simple front-ends on databases . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#partitioning",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#partitioning"
  },"353": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Architecture Styles",
    "content": " ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#architecture-styles",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#architecture-styles"
  },"354": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Fundamental Patterns",
    "content": "Big Ball of Mud . | absence of any discernible architecture structure | from a 1997 paper by Brian Foote and Joseph Yoder | . Unitary Architecture . | all architecture on the same machine | few exist outside of embedded systems and constrained environments | . Client/Server . | separates technical functionality between front-end and backend | also known as two-tier | database server + desktop | browser + web server | also three-tier architecture, which separates back-end database from an application tier and a front-end tier for presentation (typically in HTML or JS | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#fundamental-patterns",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#fundamental-patterns"
  },"355": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Distributed Computing",
    "content": "Fallacies of Distributed Computing . | set of assertions by Peter Deutsch at Sun Microsystems in the 90s | . | the network is reliable | latency is zero | bandwith is infinite | the network is secure | the topology never changes | there is only one administrator | transport cost is zero | the network is homogenous | . Other Distributed Computing Concerns . | distributed logging - consolidating logs is important and difficult; many off-the-shelf solutions exist | distributed transactions - single-node solutions can rely on transactions and ACID properties, but distributed systems need other ways to propagate data and fail gracefully; things like transactional sagas, BASE considerations, compensating transactions, etc., are made to help this | contract maintenance and versioning - a contract is behavior and data that is agreed upon by both the client and service | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#distributed-computing",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#distributed-computing"
  },"356": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Layered Architecture Style",
    "content": ". | most common architecture styles, technically partitioned | can build effective roles and responsibility models within architecture because concerns are separated | aka n-tiered | components are organized into logical horizontal layers, each layer performing a specific role within the application | . | each layer can either be closed or open . | closed means that as request moves top-down through layers, it can’t skip any layer | open means it can | fast lane reader pattern - request might go directly to database to serve simple requests | . | open or closed is important for isolation of concerns . | change in one layer shouldn’t affect others if contracts between remain the same | also allows layers to be replaced (e.g., replacing presentation running angular with react) | . | architecture sinkhole anti-pattern - requests move from layer to layer as simple pass-through processing with no business logic, meaning layered might not be correct architecture style | . Pros and Cons . | good for small, simple applications or web-sites | good as a starting point, for situations with tight budget and time constraints | very low cost because of simplicity and familiarity | as system grows, maintainability, agility, testability, and deployability suffer | . | Overall cost and simplicity are the primary strengths of the layered architecture style | Deployability rates low due to the ceremony of deployment (effort to deploy), high risk, and lack of frequent deployments | Elasticity and scalability rate very low primarily due to monolithic deployments and the lack of architectural modularity. | does not lend itself to high-performance systems due to the lack of parallel processing, closed layering, and the sinkhole architecture anti-pattern. | doesn’t support fault tolerance due to monolithic deployments and lack of architectural modularity | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#layered-architecture-style",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#layered-architecture-style"
  },"357": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Pipeline Architecture Style",
    "content": ". | technically partitioned, usually implemented as a monolith | pipes form the communication channel between filters; typically unidirectional and point-to-point (rather than broadcast) | filters are self-contained, independent from other filters, and generally stateless and perform one task only . | producer: starting point in a process, outbound only, aka source | transformer: accepts input, potentially performs transformation, and forwards onward, aka map | tester: accepts input, tests one or more criteria, aka reduce | consumer: termination point for pipeline, and might persist final result | . | . Pros and Cons . | Overall cost and simplicity combined with modularity are the primary strengths | Deployability and testability, while only around average, rate slightly higher than the layered architecture due to the level of modularity achieved through filters | reliability medium due to the lack of network traffic, bandwidth, and latency found in most distributed architectures | elasticity and scalability low due to monolith | doesn’t support fault tolerance | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#pipeline-architecture-style",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#pipeline-architecture-style"
  },"358": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Microkernel Architecture Style",
    "content": ". | aka the plug-in architecture | consists of a core system and plug-in components | app logic divided between the two | can be technically partitioned or domain partitioned within core system | . core system . | minimum functionality to run the system, or happy path (general processing flow) through the application | might have a monolithic presentation layer, either embedded within the core system or as a layer on top | . plug-in component . | standalone, independent components that contain specialized processing, additional features, and custom code meant to extend or enhance the core system | can also be used to isolate highly volatile code | components should have no dependencies between them (other than core system) | runtime plug-ins can be managed through frameworks without needing to redeploy system (Open Service Gateway Initiative, Penrose, Jigsaw (Java) or Prism (.NET)) | don’t always need to use point-to-point communication – can use REST or messaging to provide more decoupling . | this creates better scalability and throughput and allows more runtime changes | makes it a distributed architecture | . | not common for plug-in components to connect to centrally shared database (for decoupling purposes), each component has its own data store | . registry . | contains information about each plug-in module, including things like name, data contract, and remote access protocol details | can be internal, or external such as ZooKeeper or Consul | . contracts . | contracts between plug-in components and core system are usually standard across domain | include behavior, input data, and output data returned from plug-in . | IDEs, Jenkins, Jira, Confluence are a good example of this architecture | . domain/architecture isomorphism - architecture tends to follow domain and team makeup (Conway’s law) . Pros and Cons . | simplicity and overall cost are main strength | testability, deployability, and reliability rate average because functionality can be isolated to independent plug-ins | modularity and extensibility mean additional functionality can be added or removed | performance rates decent because these apps tend to be small and don’t grow as large as layered architecture | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#microkernel-architecture-style",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#microkernel-architecture-style"
  },"359": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Service-Based Architecture Style",
    "content": ". | hybrid of microservices, typically 4-12 services | domain-partitioned architecture | distributed macro layered structure, separately deployed user interface, separately deployed remote coarse-grained services, and a monolithic database | REST typically used to access services, but messaging, remote procedure calls, or even SOAP can be used | use service locator pattern with registry in UI to discover services | can have single UI, multiple domain based UIs, or service-based UIs | can have monolithic database, or domain-scoped databases, or service-based databases | good practice to also have API layer (as reverse proxy or gateway) when there are cross-cutting concerns, such as metrics, security, etc. | . Database Partitioning . | single monolithic database might present issues when schema needs to change, as all services need to be updated then | can create a shared library of entity objects, but isn’t typically effective although shared library versioning helps – still need to pull in new shared libraries on change | better to logically partition database and manifest logical partitioning through federated shared libraries | . Pros and Cons . | faster change (agility) | better test coverage | more frequent deployments and less risk | high fault tolerance and availability | tends to be simpler and cheaper than microservices, as well as more reliable than other distributed services | a natural fit when doing domain-driven design – very pragmatic architecture | as services become more fine-grained, require orchestration/choreography | orchestration: the coordination of multiple services through the use of a separate mediator service that controls and manages the workflow of the transaction (like a conductor in an orchestra) | choreography: the coordination of multiple services by which each service talks to one another without the use of a central mediator | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#service-based-architecture-style",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#service-based-architecture-style"
  },"360": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Event-Driven Architecture Style",
    "content": ". | distributed, async architecture | domain partitioned | most apps follow request-based model, where requests made to system are sent to a request orchestrator, who directs to request processors | contrast request-based with event-based, where a particular situation occurs and action is taken based on that event | async communication - relies on it for both fire-and-forget and request/reply processing | error handling - can use the workflow event pattern of reactive architecture, where if an error occurs, it is immediately sent to a workflow processor that tries to fix the error and resend the message, or logs it to a centralized location where an operator can view it | broadcast - can send message out without knowledge of who is receiving and what they do with it | request/reply - a way of achieving synchronous communication – typically achieved via a correlation id so event producers can communicate backwards | . Broker Topology . | useful when you need a degree of responsiveness and dynamic control over processing event | since events are broadcast without a central mediator, you can add additional event processors easily, leading to extensibility | . | initiating event - initial event that starts the flow | event broker - channel where events are sent and event processors pick up processing | event processor - accepts events from event broker and performs specific task with event | processing event - after event is processed, the processor async advertises its actions | . | performance, responsiveness, and scalability are strengths | with no control over overall workflow, things like error handling are more difficult, and recoverability to restart a business transaction is difficult | . | pros | cons | . | Highly decoupled event processors | Workflow control | . | High scalability | Error handling | . | High responsiveness | Recoverability | . | High performance | Restart capabilities | . | High fault tolerance | Data inconsistency | . Mediator Topology . | tries to address problems of broker topology | important to know types of events that will be processed through mediator so you can use different mediators for different types of events | . | initiating event | event queue | event mediator | event channels | event processors | . | very difficult to declaratively model dynamic processing in complex event flow | mediator must scale, potentially leading to bottleneck | event processors aren’t as highly decoupled | . | pros | cons | . | workflow control | more coupling of event processors | . | error handling | lower scalability | . | recoverability | lower performance | . | restart capabilities | lower fault tolerance | . | better data consistency | modeling complex workflows | . Preventing Data Loss . | message getting dropped or never making it to final destination | synchronous send - does a blocking wait on message producer until broker acknowledges message has been persisted | guaranteed delivery - message broker stores message in memory and in physical data store in case of server going down | client acknowledge mode - keeps message in queue and attaches client ID so no other consumer can read the message | last participant support - removes message from persisted queue by acknowledging processing has been completed and message has been persisted | . Pros and Cons . | great for performance, scalability, and fault tolerance, and highly evolutionary | simplicity and testability are more difficult | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#event-driven-architecture-style",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#event-driven-architecture-style"
  },"361": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Space-Based Architecture",
    "content": ". | specifically designed to address high scalability, elasticity, and concurrency | gets its name from concept of tuple space, the technique of using multiple parallel processors communicating through shared memory | remove database and replace with replicated in-memory grids | data is async’d to database, usually via messaging with persistent queues | . processing unit . | contains application code | contains in-memory data grid and replication engine (implemented through things like Hazelcast, Apache Ignite, and Oracle Coherence) | . virtualized middleware . | used to manage and coordinate the processing units | made up of . | messaging grid - handles input request and session state | data grid - most often implemented as a replicated cache | processing grid - optional component that handles orchestrated request processing when there are multiple processing units involved in single business request | deployment manager - manages dynamic startup and shutdown of processing units based on load | . | . data pumps . | async send updated data to another processor and to the database | usually implemented via messaging | . data writers . | perform updates from the data pumps | . data readers . | read database data and deliver it to processing units upon startup | only invoked when . | crash of all processing units of the same named cache | redeployment of all processing units with same named cache | retrieving archive data not contained in the replicated cache | . | . Data Collisions . | in a replicated cache in active/active state where updates can occur to any cache, data collisions are possible | data collision - when data is updated in once cache instance (cache A) and during replication to another cache (cache B), the same data is updated by that cache (cache B) | equation for collision rate: | . Update rate (UR): 20 updates/second Number of instances (N): 5 Cache size (S): 50,000 rows Replication latency (RL): 100 milliseconds Updates: 72,000 per hour Collision rate: 14.4 per hour Percentage: 0.02% . | near cache - caching hybrid that bridges in-memory data grids with a distributed cache | distributed cache called the full backing cache carries all the data | each processing unit has a most frequently used (mfu) or most recently used (mru) front cache | performance is highly variable because front caches hold different data | . | maximizes elasticity, scalability, and performance | testing, however, is extremely difficult – performance testing at scale isn’t realistic | also can be costly | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#space-based-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#space-based-architecture"
  },"362": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Orchestration-Driven Service-Oriented Architecture",
    "content": ". | this is sort of an historical relic | driving philosophy is centered around enterprise-level reuse | . business services - sit at top and provide entry point enterprise services - contain fine-grained, shared implementations; building blocks that make up coarse-grained business services application services - one-off, single-implementation services infrastructure services - supply operational concerns, such as monitoring, logging, authentication orchestration engine - forms the heart of this distributed architecture, stitching together the business service implementations . | all requests go through orchestration engine | ultimate danger was the extreme technical partitioning – domain concepts end up spread exceptionally thin | . | doesn’t really do anything well | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#orchestration-driven-service-oriented-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#orchestration-driven-service-oriented-architecture"
  },"363": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Microservices Architecture",
    "content": ". | built out of domain-driven design | primary goal is high decoupling, physically modeling the logical notion of bounded context | distributed architecture – each service runs its own process either on a physical computer or virtual machine or container | performance is a negative side effect, as network calls take longer than method calls, security verification at endpoints adds processing time | determining granularity key to success | . bounded context . | driving philosophy | each service models a domain or workflow, and each service includes everything necessary to operate within the application | granularity can be determined by . | purpose - functional cohesion | transactions - what needs to cooperate in a transaction | choreography - if services require extensive communication to function, you can bundle to limit communication overhead | . | . data isolation . | avoid coupling of schemas and databases as integration points | need to abandon the idea of a single source of truth | . API layer . | should not be used as a mediator or orchestration tool | . operational reuse . | can use the sidecar pattern to handle all operational concerns that teams benefit from coupling together | if you need to update all monitoring, for example, you can upgrade sidecar and then anyone using it can benefit from upgrade | if each service requires a common sidecar, can build a service mesh to allow unified control across arch for things like logging and monitoring | . frontends . | original idea had user interfaces as part of microservice, but this isn’t practical (there might be concerns like common styling, deployment patterns, extra complexity) | monolithic user interface - single user interface that calls through the API layer to satisfy requests | microfrontends - components at the user interface level to create a synchronous level of granularity and isolation (frameworks like React) | . communication . | must decide on sync or async communication | typically use protocol-aware heterogenous interoperability . | protocol-aware - need to know which protocol to use (REST, SOAP, message queues, etc) | heterogenous - fully supports polyglot environments | interoperability - services can call each other to send and receive data | . | for async communication, need events and messages | . choreography and orchestration . | should look at Domain/architecture isomorphism (how well the architecture fits the domain) when assessing how appropriate an architecture style is for a particular problem | can use the front controller pattern, where a nominally choreographed service becomes a more complex mediator | . transactions and sagas . | building transactions across service boundaries violates the core decoupling principle | compensating transaction framework - if a transaction across multiple services fails, some mediator needs to reverse the transaction on other services . | requires significant complexity, creates lots of coordination traffic | . | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#microservices-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#microservices-architecture"
  },"364": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Architecture Decisions",
    "content": ". | the domain - need to have a good understanding of domain | architecture characteristics that impact structure | data architecture - architects and DBAs must collaborate on database, schema, and other data concerns | organizational factors - external factors such as cloud vendor cost | domain/architecture isomorphism - does the problem domain match the topology of the architecture | monolith vs. distributed | where does the data live | async or synchronous . | backends for frontends pattern - make the API layer a thin microkernel adaptor, supplying general info from backend, and translates to suitable format for frontend | . architecturally significant: those decisions that affect . | structure: decisions that impact patterns or styles | nonfunctional characteristics: architecture characteristics (-ilities) | dependencies: coupling points between components and/or services | interfaces: how services are accessed or orchestrated | construction techniques: platforms, frameworks, tools, or processes | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#architecture-decisions",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#architecture-decisions"
  },"365": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Decision Anti-Patterns",
    "content": "covering your assets . | architect avoids making an architecture decision out of fear of making the wrong choice | two ways to overcome: . | wait until the last responsible moment to make a decision | collaborate with dev team to ensure that the decision you make can be implemented as expected | . | . groundhog day . | people don’t know what decision is made, so it keeps getting discussed over and over again | when justifying architecture decisions, need to provide technical and business justifications | most basic business justifications: cost, time to market, user satisfaction, and strategic positioning | . email-driven architecture . | when people lose, forget, or don’t even know an architecture decision has been made and can’t implement | first rule of communicating architecture decisions: don’t include in the body of an email | second rule: only notify those who care about the decision | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#decision-anti-patterns",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#decision-anti-patterns"
  },"366": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Architecture Decision Records",
    "content": "Title: Name Status: Proposed, Accepted, Superseded Context: what situation is forcing me to make this decision? Decision: using affirmative language like “we will”, what has been decided; more emphasis on the why than the how Consequences: very important, details tradeoffs Compliance: how the decision will be measured and governed Notes: includes various metadata about ADR . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#architecture-decision-records",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#architecture-decision-records"
  },"367": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Assessing Risk",
    "content": ". | risk matrix: classify risk as high, medium, or low | . Risk Storming . | collaborative exercise used to determine architectural risk within a specific dimension | Identification: each particpant individually identifying areas of risk within arch | Consensus: highly collaborative with the goal of gaining consensus among all participants | Mitigation: identifying changes or enhancements to certain areas | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#assessing-risk",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#assessing-risk"
  },"368": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Presenting Architecture",
    "content": "Representational consistency is the practice of always showing the relationship between parts of an architecture, either in diagrams or presentations, before changing views irrational artifact attachment - relationship between a person’s irrational attachment to some artifact and how long it took to produce . any diagramming tool needs: . | layers | stencils/templates | magnets | . diagramming standards . | UML - unified model language – mostly used for class and sequence diagrams to show structure and workflow | C4 . | Context: entire context of system, include roles of users and external dependencies | Container: the physical (and logical) deployment boundaries and containers | Component: component view, mostly neatly aligns with architect’s view | Class: UML class diagrams | . | Archimate . | Arch(itecture)(ani)mate | lightweight technical standard from the Open Group | . | . presentations . | important to be able to use powerpoint and keynote as presentation tools | key power of a presentation is ability to manipulate time, to allow ideas to play out over several slides | avoid bullet-riddled corpse anti-pattern, where a slide is just the speaker’s notes | while speaking, presenter has two info channels: visual and verbal – overwhelming one stops all fixation on the other | infodecks - slide decks not meant to be projected but to summarize info graphically | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#presenting-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#presenting-architecture"
  },"369": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Assessment Questions",
    "content": " ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#assessment-questions",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#assessment-questions"
  },"370": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 1: Introduction",
    "content": ". | What are the four dimensions that define software architecture? | What is the difference between an architecture decision and a design principle? | List the eight core expectations of a software architect. | What is the First Law of Software Architecture? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-1-introduction",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-1-introduction"
  },"371": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 2: Architectural Thinking",
    "content": ". | Describe the traditional approach of architecture versus development and explain why that approach no longer works. | List the three levels of knowledge in the knowledge triangle and provide an example of each. | Why is it more important for an architect to focus on technical breadth rather than technical depth? | What are some of the ways of maintaining your technical depth and remaining hands-on as an architect? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-2-architectural-thinking",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-2-architectural-thinking"
  },"372": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 3: Modularity",
    "content": ". | What is meant by the term connascence? | What is the difference between static and dynamic connascence? | What does connascence of type mean? Is it static or dynamic connascence? | What is the strongest form of connascence? | What is the weakest form of connascence? | Which is preferred within a code base—static or dynamic connascence? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-3-modularity",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-3-modularity"
  },"373": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 4: Architecture Characteristics Defined",
    "content": ". | What three criteria must an attribute meet to be considered an architecture characteristic? | What is the difference between an implicit characteristic and an explicit one? Provide an example of each. | Provide an example of an operational characteristic. | Provide an example of a structural characteristic. | Provide an example of a cross-cutting characteristic. | Which architecture characteristic is more important to strive for—availability or performance? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-4-architecture-characteristics-defined",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-4-architecture-characteristics-defined"
  },"374": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 5: Identifying Architecture Characteristics",
    "content": ". | Give a reason why it is a good practice to limit the number of characteristics (“-ilities”) an architecture should support. | True or false: most architecture characteristics come from business requirements and user stories. | If a business stakeholder states that time-to-market (i.e., getting new features and bug fixes pushed out to users as fast as possible) is the most important business concern, which architecture characteristics would the architecture need to support? | What is the difference between scalability and elasticity? | You find out that your company is about to undergo several major acquisitions to significantly increase its customer base. Which architectural characteristics should you be worried about? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-5-identifying-architecture-characteristics",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-5-identifying-architecture-characteristics"
  },"375": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 6: Measuring and Governing Architecture Characteristics",
    "content": ". | Why is cyclomatic complexity such an important metric to analyze for architecture? | What is an architecture fitness function? How can they be used to analyze an architecture? | Provide an example of an architecture fitness function to measure the scalability of an architecture. | What is the most important criteria for an architecture characteristic to allow architects and developers to create fitness functions? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-6-measuring-and-governing-architecture-characteristics",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-6-measuring-and-governing-architecture-characteristics"
  },"376": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 7: Scope of Architecture Characteristics",
    "content": ". | What is an architectural quantum, and why is it important to architecture? | Assume a system consisting of a single user interface with four independently deployed services, each containing its own separate database. Would this system have a single quantum or four quanta? Why? | Assume a system with an administration portion managing static reference data (such as the product catalog, and warehouse information) and a customer-facing portion managing the placement of orders. How many quanta should this system be and why? If you envision multiple quanta, could the admin quantum and customer-facing quantum share a database? If so, in which quantum would the database need to reside? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-7-scope-of-architecture-characteristics",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-7-scope-of-architecture-characteristics"
  },"377": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 8: Component-Based Thinking",
    "content": ". | We define the term component as a building block of an application—something the application does. A component usually consist of a group of classes or source files. How are components typically manifested within an application or service? | What is the difference between technical partitioning and domain partitioning? Provide an example of each. | What is the advantage of domain partitioning? | Under what circumstances would technical partitioning be a better choice over domain partitioning? | What is the entity trap? Why is it not a good approach for component identification? | When might you choose the workflow approach over the Actor/Actions approach when identifying core components? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-8-component-based-thinking",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-8-component-based-thinking"
  },"378": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 9: Architecture Styles",
    "content": ". | List the eight fallacies of distributed computing. | Name three challenges that distributed architectures have that monolithic architectures don’t. | What is stamp coupling? | What are some ways of addressing stamp coupling? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-9-architecture-styles",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-9-architecture-styles"
  },"379": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 10: Layered Architecture Style",
    "content": ". | What is the difference between an open layer and a closed layer? | Describe the layers of isolation concept and what the benefits are of this concept. | What is the architecture sinkhole anti-pattern? | What are some of the main architecture characteristics that would drive you to use a layered architecture? | Why isn’t testability well supported in the layered architecture style? | Why isn’t agility well supported in the layered architecture style? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-10-layered-architecture-style",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-10-layered-architecture-style"
  },"380": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 11: Pipeline Architecture",
    "content": ". | Can pipes be bidirectional in a pipeline architecture? | Name the four types of filters and their purpose. | Can a filter send data out through multiple pipes? | Is the pipeline architecture style technically partitioned or domain partitioned? | In what way does the pipeline architecture support modularity? | Provide two examples of the pipeline architecture style. | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-11-pipeline-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-11-pipeline-architecture"
  },"381": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 12: Microkernel Architecture",
    "content": ". | What is another name for the microkernel architecture style? | Under what situations is it OK for plug-in components to be dependent on other plug-in components? | What are some of the tools and frameworks that can be used to manage plug-ins? | What would you do if you had a third-party plug-in that didn’t conform to the standard plug-in contract in the core system? | Provide two examples of the microkernel architecture style. | Is the microkernel architecture style technically partitioned or domain partitioned? | Why is the microkernel architecture always a single architecture quantum? | What is domain/architecture isomorphism? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-12-microkernel-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-12-microkernel-architecture"
  },"382": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 13: Service-Based Architecture",
    "content": ". | How many services are there in a typical service-based architecture? | Do you have to break apart a database in service-based architecture? | Under what circumstances might you want to break apart a database? | What technique can you use to manage database changes within a service-based architecture? | Do domain services require a container (such as Docker) to run? | Which architecture characteristics are well supported by the service-based architecture style? | Why isn’t elasticity well supported in a service-based architecture? | How can you increase the number of architecture quanta in a service-based architecture? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-13-service-based-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-13-service-based-architecture"
  },"383": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 14: Event-Driven Architecture Style",
    "content": ". | What are the primary differences between the broker and mediator topologies? | For better workflow control, would you use the mediator or broker topology? | Does the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues? | Name two primary advantage of asynchronous communications. | Give an example of a typical request within the request-based model. | Give an example of a typical request in an event-based model. | What is the difference between an initiating event and a processing event in event-driven architecture? | What are some of the techniques for preventing data loss when sending and receiving messages from a queue? | What are three main driving architecture characteristics for using event-driven architecture? | What are some of the architecture characteristics that are not well supported in event-driven architecture? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-14-event-driven-architecture-style",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-14-event-driven-architecture-style"
  },"384": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 15: Space-Based Architecture",
    "content": ". | Where does space-based architecture get its name from? | What is a primary aspect of space-based architecture that differentiates it from other architecture styles? | Name the four components that make up the virtualized middleware within a space-based architecture. | What is the role of the messaging grid? | What is the role of a data writer in space-based architecture? | Under what conditions would a service need to access data through the data reader? | Does a small cache size increase or decrease the chances for a data collision? | What is the difference between a replicated cache and a distributed cache? Which one is typically used in space-based architecture? | List three of the most strongly supported architecture characteristics in space-based architecture. | Why does testability rate so low for space-based architecture? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-15-space-based-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-15-space-based-architecture"
  },"385": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 16: Orchestration-Driven Service-Oriented Architecture",
    "content": ". | What was the main driving force behind service-oriented architecture? | What are the four primary service types within a service-oriented architecture? | List some of the factors that led to the downfall of service-oriented architecture. | Is service-oriented architecture technically partitioned or domain partitioned? | How is domain reuse addressed in SOA? How is operational reuse addressed? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-16-orchestration-driven-service-oriented-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-16-orchestration-driven-service-oriented-architecture"
  },"386": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 17: Microservices Architecture",
    "content": ". | Why is the bounded context concept so critical for microservices architecture? | What are three ways of determining if you have the right level of granularity in a microservice? | What functionality might be contained within a sidecar? | What is the difference between orchestration and choreography? Which does microservices support? Is one communication style easier in microservices? | What is a saga in microservices? | Why are agility, testability, and deployability so well supported in microservices? | What are two reasons performance is usually an issue in microservices? | Is microservices a domain-partitioned architecture or a technically partitioned one? | Describe a topology where a microservices ecosystem might be only a single quantum. | How was domain reuse addressed in microservices? How was operational reuse addressed? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-17-microservices-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-17-microservices-architecture"
  },"387": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 18: Choosing the Appropriate Architecture Style",
    "content": ". | In what way does the data architecture (structure of the logical and physical data models) influence the choice of architecture style? | How does it influence your choice of architecture style to use? | Delineate the steps an architect uses to determine style of architecture, data partitioning, and communication styles. | What factor leads an architect toward a distributed architecture? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-18-choosing-the-appropriate-architecture-style",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-18-choosing-the-appropriate-architecture-style"
  },"388": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 19: Architecture Decisions",
    "content": ". | What is the covering your assets anti-pattern? | What are some techniques for avoiding the email-driven architecture anti-pattern? | What are the five factors Michael Nygard defines for identifying something as architecturally significant? | What are the five basic sections of an architecture decision record? | In which section of an ADR do you typically add the justification for an architecture decision? | Assuming you don’t need a separate Alternatives section, in which section of an ADR would you list the alternatives to your proposed solution? | What are three basic criteria in which you would mark the status of an ADR as Proposed? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-19-architecture-decisions",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-19-architecture-decisions"
  },"389": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 20: Analyzing Architecture Risk",
    "content": ". | What are the two dimensions of the risk assessment matrix? | What are some ways to show direction of particular risk within a risk assessment? Can you think of other ways to indicate whether risk is getting better or worse? | Why is it necessary for risk storming to be a collaborative exercise? | Why is it necessary for the identification activity within risk storming to be an individual activity and not a collaborative one? | What would you do if three participants identified risk as high (6) for a particular area of the architecture, but another participant identified it as only medium (3)? | What risk rating (1-9) would you assign to unproven or unknown technologies? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-20-analyzing-architecture-risk",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-20-analyzing-architecture-risk"
  },"390": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 21: Diagramming and Presenting Architecture",
    "content": ". | What is irrational artifact attachment, and why is it significant with respect to documenting and diagramming architecture? | What do the 4 C’s refer to in the C4 modeling technique? | When diagramming architecture, what do dotted lines between components mean? | What is the bullet-riddled corpse anti-pattern? How can you avoid this anti-pattern when creating presentations? | What are the two primary information channels a presenter has when giving apresentation? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-21-diagramming-and-presenting-architecture",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-21-diagramming-and-presenting-architecture"
  },"391": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 22: Making Teams Effective",
    "content": ". | What are three types of architecture personalities? What type of boundary does each personality create? | What are the five factors that go into determining the level of control you should exhibit on the team? | What are three warning signs you can look at to determine if your team is getting too big? | List three basic checklists that would be good for a development team. | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-22-making-teams-effective",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-22-making-teams-effective"
  },"392": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 23: Negotiation and Leadership Skills",
    "content": ". | Why is negotiation so important as an architect? | Name some negotiation techniques when a business stakeholder insists on five nines of availability, but only three nines are really needed. | What can you derive from a business stakeholder telling you “I needed it yesterday”? | Why is it important to save a discussion about time and cost for last in a negotiation? | What is the divide-and-conquer rule? How can it be applied when negotiating architecture characteristics with a business stakeholder? Provide an example. | List the 4 C’s of architecture. | Explain why it is important for an architect to be both pragmatic and visionary. | What are some techniques for managing and reducing the number of meetings you are invited to? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-23-negotiation-and-leadership-skills",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-23-negotiation-and-leadership-skills"
  },"393": {
    "doc": "The Fundamentals of Software Architecture: An Engineering Approach",
    "title": "Chapter 24: Developing a Career Path",
    "content": ". | What is the 20-minute rule, and when is it best to apply it? | What are the four rings in the ThoughtWorks technology radar, and what do they mean? How can they be applied to your radar? | Describe the difference between depth and breadth of knowledge as it applies to software architects. Which should architects aspire to maximize? | . ",
    "url": "/notes/tech_books/fundamentals-of-software-architecture#chapter-24-developing-a-career-path",
    
    "relUrl": "/notes/tech_books/fundamentals-of-software-architecture#chapter-24-developing-a-career-path"
  },"394": {
    "doc": "Grit",
    "title": "Grit",
    "content": ". | Chapter 1: Showing Up | Chapter 2: Distracted by Talent | Chapter 3: Effort Counts Twice | Chapter 4: How Gritty Are You? | Chapter 5: Grit Grows | Chapter 6: Interest | Chapter 7: Practice | Chapter 8: Purpose | Chapter 9: Hope | Chapter 10: Parenting for Grit | Chapter 11: The Playing Fields of Grit | Book Notes . | Why I read this book | One key takeaway | How was the book | Any other reading | . | . ",
    "url": "/notes/business_books/grit",
    
    "relUrl": "/notes/business_books/grit"
  },"395": {
    "doc": "Grit",
    "title": "Chapter 1: Showing Up",
    "content": " ",
    "url": "/notes/business_books/grit#chapter-1-showing-up",
    
    "relUrl": "/notes/business_books/grit#chapter-1-showing-up"
  },"396": {
    "doc": "Grit",
    "title": "grit",
    "content": ". | combination of perseverance and passion | opposite of complacent | grittier means more likely to have higher education, more likely to be successful | . ",
    "url": "/notes/business_books/grit#grit-1",
    
    "relUrl": "/notes/business_books/grit#grit-1"
  },"397": {
    "doc": "Grit",
    "title": "Chapter 2: Distracted by Talent",
    "content": "talent is not all there is to achievement . ",
    "url": "/notes/business_books/grit#chapter-2-distracted-by-talent",
    
    "relUrl": "/notes/business_books/grit#chapter-2-distracted-by-talent"
  },"398": {
    "doc": "Grit",
    "title": "talent vs achievement",
    "content": "aptitude does not guarantee achievement (17) . | talent is not destiny | . ",
    "url": "/notes/business_books/grit#talent-vs-achievement",
    
    "relUrl": "/notes/business_books/grit#talent-vs-achievement"
  },"399": {
    "doc": "Grit",
    "title": "francis galton",
    "content": ". | half cousin to Charles Darwin | studied why people succeed and others fail | was a wunderkind, at 4 could read and write, at 6 knew Latin and could recite passages from Shakespeare from memory | thought successful were remarkable in three ways: demonstrate unusual “ability” in combination with exceptional “zeal” and “the capacity for hard labor” | . ",
    "url": "/notes/business_books/grit#francis-galton",
    
    "relUrl": "/notes/business_books/grit#francis-galton"
  },"400": {
    "doc": "Grit",
    "title": "naturalness bias",
    "content": ". | which is more important to success, talent or effort? many people report effort, but history belies that: we love the natural. | . a hidden prejudice against those who’ve achieved what they have because they worked for it, and a hidden preference for those whom we think arrived at their place in life because they’re naturally talented (25) . | manifests in the natural vs. striver phenomenon | . ",
    "url": "/notes/business_books/grit#naturalness-bias",
    
    "relUrl": "/notes/business_books/grit#naturalness-bias"
  },"401": {
    "doc": "Grit",
    "title": "william james",
    "content": ". | Harvard psychologist, wrote The Energies of Men about how people differ in their pursuit of goals | declared there is a gap between potential and its actualization | “The plain fact remains that men the world over possess amounts of resource, which only very exceptional individuals push to their extremes of use” | . ",
    "url": "/notes/business_books/grit#william-james",
    
    "relUrl": "/notes/business_books/grit#william-james"
  },"402": {
    "doc": "Grit",
    "title": "the war for talent",
    "content": ". | older book, basic premise that companies in the modern enconomy rise and fall depending on their ability to attract and retain “A players” | companies that excel aggressively promote the most talented employees and get rid of the least talented | this “talent mindset” led directly to Enron and Jeff Skilling | . the biggest reason a preoccupation with talent can be harmful is simple: By shining a spotlight on talent, we risk leaving everything else in the shadows. We inadvertently send the message that these other factors – including grit, don’t matter as much as they really do (31) . ",
    "url": "/notes/business_books/grit#the-war-for-talent",
    
    "relUrl": "/notes/business_books/grit#the-war-for-talent"
  },"403": {
    "doc": "Grit",
    "title": "Chapter 3: Effort Counts Twice",
    "content": " ",
    "url": "/notes/business_books/grit#chapter-3-effort-counts-twice",
    
    "relUrl": "/notes/business_books/grit#chapter-3-effort-counts-twice"
  },"404": {
    "doc": "Grit",
    "title": "the mundanity of excellence",
    "content": ". | the most dazzling human achievements are the aggregate of countless individual elements, each of which are ordinary | . […] when we can’t easily see how experience and training got someone to a level of excellence that is so clearly beyond the norm, we default to labeling that person “a natural”. (37) . Greatness is many, many individual feats, and each of them is doable. (38) . ",
    "url": "/notes/business_books/grit#the-mundanity-of-excellence",
    
    "relUrl": "/notes/business_books/grit#the-mundanity-of-excellence"
  },"405": {
    "doc": "Grit",
    "title": "mythologizing of talent",
    "content": ". | we prefer our excellence fully formed, mystery to mundanity | Nietzsche has plenty to say on the topic: “For if we think of genius as something magical, we are not obliged to compare ourselves and find ourselves lacking … To call someone ‘divine’ means: ‘here there is no need to compete’” | . ",
    "url": "/notes/business_books/grit#mythologizing-of-talent",
    
    "relUrl": "/notes/business_books/grit#mythologizing-of-talent"
  },"406": {
    "doc": "Grit",
    "title": "theory of achievement",
    "content": ". | talent * effort = skill | skill * effort = achievement | theory is incomplete since it is missing luck, but is still useful | effort counts twice | . ",
    "url": "/notes/business_books/grit#theory-of-achievement",
    
    "relUrl": "/notes/business_books/grit#theory-of-achievement"
  },"407": {
    "doc": "Grit",
    "title": "treadmill test",
    "content": ". | 1940s Harvard test to gauge “stamina and strength of will” and extent which “a subject is willing to push himself or has a tendency to quite before the punishment becomes too severe” | researchers followed up every two years, and run time was reliable indicator of psychological adjustment through life, even after accounting for physical fitness | treadmill is apt metaphor for grit, although Duckworth might add another parameter to test, which is to invite subject back next day to see if they could beat their previous score. Those returning would be grittier. | . consistency of effort over the long run is everything. (50) . ",
    "url": "/notes/business_books/grit#treadmill-test",
    
    "relUrl": "/notes/business_books/grit#treadmill-test"
  },"408": {
    "doc": "Grit",
    "title": "Chapter 4: How Gritty Are You?",
    "content": "grit is more about stamina than intensity . ",
    "url": "/notes/business_books/grit#chapter-4-how-gritty-are-you",
    
    "relUrl": "/notes/business_books/grit#chapter-4-how-gritty-are-you"
  },"409": {
    "doc": "Grit",
    "title": "grit scale",
    "content": ". | invented by Duckworth to test how passionately you pursue goals and how much you persevere | passion here isn’t emotional, it is consistency over time | scale from 1.0 to 5.0, 5.0 being most gritty | . Enthusiasm is common. Endurance is rare. (58) . | sample statements: . | I am a hard worker | Setbacks don’t discourage me. I don’t give up easily. | My interests change from year to year. | . | . ",
    "url": "/notes/business_books/grit#grit-scale",
    
    "relUrl": "/notes/business_books/grit#grit-scale"
  },"410": {
    "doc": "Grit",
    "title": "goal hierarchy",
    "content": ". | life philosophy | lower level goals lead to mid level goals, which all leads to a top level goal which is the abiding goal in your life | . The top-level goal is not a means to any other end. It is, instead, an end in itself. (63) . | good not to have too many top level goals, probably best to have one professional one | . | positive fantasizing, or indulging in positive visions of a future without thinking about how to get there has long-term ramifications but feels good in the moment | handling goal conflicts is an important part of goal hierarchies – how do you juggle lower level goals that conflict with two separate high-level goals? | . ",
    "url": "/notes/business_books/grit#goal-hierarchy",
    
    "relUrl": "/notes/business_books/grit#goal-hierarchy"
  },"411": {
    "doc": "Grit",
    "title": "warren buffet career goal prioritization",
    "content": ". | buffet has a task for career goal prioritization . | write a list of 25 career goals | circle the 5 highest-priority | avoid the 20 goals at all costs | . | while this is absolutist, it highlights the fact that time and energy is limited, so what we decide not to do is as important as what we decide to do | . ",
    "url": "/notes/business_books/grit#warren-buffet-career-goal-prioritization",
    
    "relUrl": "/notes/business_books/grit#warren-buffet-career-goal-prioritization"
  },"412": {
    "doc": "Grit",
    "title": "Chapter 5: Grit Grows",
    "content": " ",
    "url": "/notes/business_books/grit#chapter-5-grit-grows",
    
    "relUrl": "/notes/business_books/grit#chapter-5-grit-grows"
  },"413": {
    "doc": "Grit",
    "title": "genes vs experience",
    "content": "First, grit, talent, and all other psychological traits relevant to success in life are influenced by genes and also by experience. Second: there’s no single gene for grit, or indeed any other psychological trait. (82) . ",
    "url": "/notes/business_books/grit#genes-vs-experience",
    
    "relUrl": "/notes/business_books/grit#genes-vs-experience"
  },"414": {
    "doc": "Grit",
    "title": "flynn effect",
    "content": ". | startling gains in IQ over the past century – over 15 points in average gains over the last 50 years | means that IQs change, both over time and individually | the social multiplier effect - virtuous cycle of skill improvement from being surrounded by those who are just a little better (think NBA and TV, kids mimicking their favorite stars on the television) | . ",
    "url": "/notes/business_books/grit#flynn-effect",
    
    "relUrl": "/notes/business_books/grit#flynn-effect"
  },"415": {
    "doc": "Grit",
    "title": "grit growth: the maturity principle",
    "content": ". | maturity principle - we develop the capacity for long-term passion and perseverance as we get older. Most of us become more conscientious, confident, caring, and calm with life experience. We also change as we need to. | . Over time, we learn life lessons we don’t forget, and we adapt in response to the growing demands of our circumstances. Eventually, new ways of thinking and acting become habitual. There comes a day when we can hardly remember our immature former selves. We’ve adapted, those adaptations have become durable, and, finally, our identity – the sort of person we see ourselves to be – has evolved. We’ve matured. (89) . ",
    "url": "/notes/business_books/grit#grit-growth-the-maturity-principle",
    
    "relUrl": "/notes/business_books/grit#grit-growth-the-maturity-principle"
  },"416": {
    "doc": "Grit",
    "title": "psychological aspects of grit",
    "content": ". | interest - passion begins with enjoying what you do | practice - to be gritty is to resist complacency, to work daily at mastery | purpose - conviction that your work matters | hope - rising-to-the-occasion type of perseverance | . ",
    "url": "/notes/business_books/grit#psychological-aspects-of-grit",
    
    "relUrl": "/notes/business_books/grit#psychological-aspects-of-grit"
  },"417": {
    "doc": "Grit",
    "title": "Chapter 6: Interest",
    "content": " ",
    "url": "/notes/business_books/grit#chapter-6-interest",
    
    "relUrl": "/notes/business_books/grit#chapter-6-interest"
  },"418": {
    "doc": "Grit",
    "title": "following your passion",
    "content": ". | people are more satisfied with their jobs when it fits their personal interest | people perform better when what they do interests them . | there are, however very real constraints on choices we have to earn a living, so we should foster our passion instead | . | . ",
    "url": "/notes/business_books/grit#following-your-passion",
    
    "relUrl": "/notes/business_books/grit#following-your-passion"
  },"419": {
    "doc": "Grit",
    "title": "psychology of interest",
    "content": ". | there is a unrealistic mythology that falling in love with career should be sudden and swift | there is a lot we don’t know about psychology of interest, but it is typically made up of discovery, followed by development, then deepening. | childhood is far too early to know what we want to be when we grow up | interests are not discovered through introspection but by doing | what follows a period of discovery is a much lengthier and increasingly proactive period of interest development | . | all experts start as unserious beginners | . For the beginner, novelty is anything that hasn’t been encountered before. For the expert, novelty is nuance. (114) . ",
    "url": "/notes/business_books/grit#psychology-of-interest",
    
    "relUrl": "/notes/business_books/grit#psychology-of-interest"
  },"420": {
    "doc": "Grit",
    "title": "Chapter 7: Practice",
    "content": "Some people get twenty years experience, while others get one year of experience twenty times in a row. ",
    "url": "/notes/business_books/grit#chapter-7-practice",
    
    "relUrl": "/notes/business_books/grit#chapter-7-practice"
  },"421": {
    "doc": "Grit",
    "title": "continuous improvement",
    "content": ". | Japanese concept of kaizen or continuous improvement, a way to resist the plateau of arrested development | important to spend not just more time on a task, but better time on a task | Anders Ericsson and his studies on the concept of deliberate practice – where we get this 10,000 hours idea for mastery | experts hungrily seek feedback, concentrating on what they did wrong and reflecting on that, until conscious incompetence becomes unconscious competence | deliberate practice is more effortful and less enjoyable | . ",
    "url": "/notes/business_books/grit#continuous-improvement",
    
    "relUrl": "/notes/business_books/grit#continuous-improvement"
  },"422": {
    "doc": "Grit",
    "title": "flow",
    "content": ". | Mihaly Csikszentmihalyi (cheeks-sent-me-high) and his state of flow, which is signature state of experts | unthinking mastery, working right at the edge of skill level | . ",
    "url": "/notes/business_books/grit#flow",
    
    "relUrl": "/notes/business_books/grit#flow"
  },"423": {
    "doc": "Grit",
    "title": "flow vs practice",
    "content": "Gritty people do more deliberate practice and experience more flow. First, deliberate practice is a behavior, and experience more flow. […] Second, you don’t have to be doing deliberate practice and experiencing flow at the same time. (131) . | deliberate practice is for preparation, flow is for performance. | . ",
    "url": "/notes/business_books/grit#flow-vs-practice",
    
    "relUrl": "/notes/business_books/grit#flow-vs-practice"
  },"424": {
    "doc": "Grit",
    "title": "getting the most out of deliberate practice",
    "content": ". | know the science - clearly defined stretch goal, full concentration and effort, immediate and informative feedback, repetition with reflection and refinement | make it a habit - schedule it at same time every day, and stick to it | change the way you experience it - no pain, no gain | . ",
    "url": "/notes/business_books/grit#getting-the-most-out-of-deliberate-practice",
    
    "relUrl": "/notes/business_books/grit#getting-the-most-out-of-deliberate-practice"
  },"425": {
    "doc": "Grit",
    "title": "Chapter 8: Purpose",
    "content": " ",
    "url": "/notes/business_books/grit#chapter-8-purpose",
    
    "relUrl": "/notes/business_books/grit#chapter-8-purpose"
  },"426": {
    "doc": "Grit",
    "title": "direction of purpose",
    "content": ". | efforts pay dividends to other people, other-directed | . ",
    "url": "/notes/business_books/grit#direction-of-purpose",
    
    "relUrl": "/notes/business_books/grit#direction-of-purpose"
  },"427": {
    "doc": "Grit",
    "title": "ways to be happy",
    "content": ". | Aristotle - two ways of being happy: . | eudaimonic - in harmony with one’s good (eu) inner spirit (daemon) | hedonic - aimed at positive, in the moment, selfish experiences (pleasure principle) | . | humans are fundamentally social, and people who cooperate are more likely to survive than loners, so we’ve built all this apparatus on being part of the group | . most gritty people see their ultimate aims as deeply connected to the world beyond themselves (148) . ",
    "url": "/notes/business_books/grit#ways-to-be-happy",
    
    "relUrl": "/notes/business_books/grit#ways-to-be-happy"
  },"428": {
    "doc": "Grit",
    "title": "story of the bricklayers",
    "content": ". | 3 bricklayers building a church, when asked what they were doing, first one says laying bricks, second says building a building, third says building a cathedral for God. | . ",
    "url": "/notes/business_books/grit#story-of-the-bricklayers",
    
    "relUrl": "/notes/business_books/grit#story-of-the-bricklayers"
  },"429": {
    "doc": "Grit",
    "title": "cultivating purpose",
    "content": ". | recommendations for cultivating purpose: . | reflecting on how the work you’re already doing can make a positive contribution to society | thinking about how, in small but meaningful ways, you can change you current work to enhance its connection to your core values (job crafting) | finding inspiration in a purposeful role model | . | . ",
    "url": "/notes/business_books/grit#cultivating-purpose",
    
    "relUrl": "/notes/business_books/grit#cultivating-purpose"
  },"430": {
    "doc": "Grit",
    "title": "Chapter 9: Hope",
    "content": "Fall seven, rise eight . ",
    "url": "/notes/business_books/grit#chapter-9-hope",
    
    "relUrl": "/notes/business_books/grit#chapter-9-hope"
  },"431": {
    "doc": "Grit",
    "title": "learned helplessness",
    "content": ". | study of dogs and shocks, and whether or not the dogs could do something to stop the shocks affected a later experiment on whether they tried to do something to resist the shocks in a different context | its the suffering you think you can’t control that builds learned helplessness | relatively new idea that people have thoughts that influence their behavior | analog is learned optimism | interesting for children in poverty, not getting enough mastery experiences | . ",
    "url": "/notes/business_books/grit#learned-helplessness",
    
    "relUrl": "/notes/business_books/grit#learned-helplessness"
  },"432": {
    "doc": "Grit",
    "title": "optimism vs pessimism",
    "content": "optimists habitually search for temporary and specific causes of their suffering, whereas pessimists assume permanent and pervasive causes are to blame (174) . | how we think about reasons for poor performance (I mismanaged my time vs I am awful at my job) | . ",
    "url": "/notes/business_books/grit#optimism-vs-pessimism",
    
    "relUrl": "/notes/business_books/grit#optimism-vs-pessimism"
  },"433": {
    "doc": "Grit",
    "title": "cognitive behavioral therapy",
    "content": ". | the same objective event can lead to very different subjective interpretations | therapy aims to treat depression and other psychological maladies by helping patients think more objectively and behave in healthier ways | . When you keep searching for ways to change your situation for the better, you stand a chance of finding them. (178) . ",
    "url": "/notes/business_books/grit#cognitive-behavioral-therapy",
    
    "relUrl": "/notes/business_books/grit#cognitive-behavioral-therapy"
  },"434": {
    "doc": "Grit",
    "title": "growth vs fixed mindset",
    "content": ". | growth mindset - it’s possible to get smarter if you’re given the right opportunities and support and if you try hard enough and believe you can do it | fixed mindset - you can learn new skills, but your capacity to learn skills (your talent) can’t be trained | . Most people have an inner fixed-mindset pessimist in them right alongside their inner growth-mindset optimist. Recognizing this is important because it’s easy to make the mistake of changing what we say without changing our body language, facial expressions, and behavior. (184) . ",
    "url": "/notes/business_books/grit#growth-vs-fixed-mindset",
    
    "relUrl": "/notes/business_books/grit#growth-vs-fixed-mindset"
  },"435": {
    "doc": "Grit",
    "title": "cultivating hope",
    "content": ". | update your beliefs about talent and intelligence - for example, IQs might not be entirely fixed | practice optimistic self-talk | ask for a helping hand | . ",
    "url": "/notes/business_books/grit#cultivating-hope",
    
    "relUrl": "/notes/business_books/grit#cultivating-hope"
  },"436": {
    "doc": "Grit",
    "title": "Chapter 10: Parenting for Grit",
    "content": "[t]here’s no either/or trade-off between supportive parenting and demanding parenting. ",
    "url": "/notes/business_books/grit#chapter-10-parenting-for-grit",
    
    "relUrl": "/notes/business_books/grit#chapter-10-parenting-for-grit"
  },"437": {
    "doc": "Grit",
    "title": "parenting styles",
    "content": " ",
    "url": "/notes/business_books/grit#parenting-styles",
    
    "relUrl": "/notes/business_books/grit#parenting-styles"
  },"438": {
    "doc": "Grit",
    "title": "Chapter 11: The Playing Fields of Grit",
    "content": " ",
    "url": "/notes/business_books/grit#chapter-11-the-playing-fields-of-grit",
    
    "relUrl": "/notes/business_books/grit#chapter-11-the-playing-fields-of-grit"
  },"439": {
    "doc": "Grit",
    "title": "corresponsive principle",
    "content": ". | coined by Brent Roberts | . the situations to which people gravitate tend to enhance the very characteristics that brought them there in the first place. (233) . ",
    "url": "/notes/business_books/grit#corresponsive-principle",
    
    "relUrl": "/notes/business_books/grit#corresponsive-principle"
  },"440": {
    "doc": "Grit",
    "title": "Book Notes",
    "content": " ",
    "url": "/notes/business_books/grit#book-notes",
    
    "relUrl": "/notes/business_books/grit#book-notes"
  },"441": {
    "doc": "Grit",
    "title": "Why I read this book",
    "content": "I heard Angela Duckworth on a podcast about goal hierarchies with Stephen Dubner, and she was fantastically clever and well-spoken. ",
    "url": "/notes/business_books/grit#why-i-read-this-book",
    
    "relUrl": "/notes/business_books/grit#why-i-read-this-book"
  },"442": {
    "doc": "Grit",
    "title": "One key takeaway",
    "content": "Grit is a huge component of success and is comprised of passion and perseverance. ",
    "url": "/notes/business_books/grit#one-key-takeaway",
    
    "relUrl": "/notes/business_books/grit#one-key-takeaway"
  },"443": {
    "doc": "Grit",
    "title": "How was the book",
    "content": "There’s a lot to this book that you might have read before. 10,000 hours to mastery, deliberate practice, passion/drive for what you do, flow, etc. – these are at this point the bread and butter of the intersection of business and self-help. What carries the book, however, is Duckworth’s approachable style and her clearly lived experience of the precepts of this book. She practices what she preaches. If you’ve heard Duckworth’s 6 minute TED talk on grit, there might not be anything else you might glean from this book other than the author has an abiding and compassionate view of her subject matter, an almost exhaustive scientific approach to all things in her life, but that is selling this book generally short. Duckworth has compellingly fresh takes on old ideas – for instance, the way she employs her research and ideas in the parenting of her children, is honest and open. She describes a household rule she has called “The Hard Thing Rule”, where 1) everyone has to do a hard thing 2) you can quit, but only at a natural stopping point 3) you get to pick your hard thing, and while Duckworth uses it with her children as a way to cultivate grit, you could easily apply it to your own life to build mastery. The book isn’t heavy reading, and you could put it away in a few days. If those concepts I mentioned earlier are new to you, or you generally like a Gladwellian romp through psychology by a real honest to goodness psychologist, this is well worth your time. Duckworth is infectiously smart and crafts a wonderful narrative. ",
    "url": "/notes/business_books/grit#how-was-the-book",
    
    "relUrl": "/notes/business_books/grit#how-was-the-book"
  },"444": {
    "doc": "Grit",
    "title": "Any other reading",
    "content": ". | Daily Rituals: How Artists Work, by _Mason Currey, 2019. | . ",
    "url": "/notes/business_books/grit#any-other-reading",
    
    "relUrl": "/notes/business_books/grit#any-other-reading"
  },"445": {
    "doc": "Hackers: Heroes of the Computer Revolution",
    "title": "Hackers: Heroes of the Computer Revolution",
    "content": " ",
    "url": "/notes/educational_books/hackers",
    
    "relUrl": "/notes/educational_books/hackers"
  },"446": {
    "doc": "How Google Works",
    "title": "How Google Works",
    "content": " ",
    "url": "/notes/business_books/how-google-works",
    
    "relUrl": "/notes/business_books/how-google-works"
  },"447": {
    "doc": "How Google Works",
    "title": "Some Tidbits",
    "content": "Attraction-Selection-Attrition Model . | models the emergence of organizational characteristics as three processes that reflect a member’s decisions to join (attract), remain in (selection), and ultimately leave (attrition) an organization | . smart creatives . | Googlese for the sort of new knowledge worker that Google wants to attract | . She is an expert in doing. She doesn’t just design concepts, she builds prototypes. ‍She is analytically smart. Let data decide, she thinks, but doesn’t let data take over. ‍She is business smart. She understands the direct line between technical, product and business, and can bridge all three. ‍She is competitive smart. She is driven to be the best at what she does, and is willing to put in the work to get there. ‍She is user smart. She has a deep obsession with understanding the consumer’s perspective. She tinkers with different projects on the weekend and gets her hands dirty out of pure curiosity. ‍ She is creative. She’s always questioning, going against the status quo, and isn’t afraid to be irreverent. ‍ She is risky creative. She isn’t afraid to fail, and knows that even if she does she can just try a different approach and keep going. ‍She is self-directed creative. She doesn’t wait for her boss to tell her what to do, or for the perfect information. She just takes action on her own and gets shit done. ‍She is open creative. She openly shares information, ideas, and collaborates freely. She is not political, and judges ideas based on their merit. ‍ She is thorough creative. She knows the details, not because she remembers them but because she understands them. ‍She is communicative creative. She knows how to get her message across, sometimes with flare and humor. Horseback Law . | many things don’t require you to dismount your horse, i.e., jump in and do a detailed analysis. It’s enough to mosey on up and quickly check things then move on | . Google’s Dos and Don’ts for Hiring . Do hire people who are smarter and more knowledgeable than you are. Don’t hire people you can’t learn from or be challenged by. Do hire people who will add value to the product and our culture. Don’t hire people who won’t contribute well to both. Do hire people who will get things done. Don’t hire people who think only about problems. Do hire people who are enthusiastic, self-motivated, and passionate. Don’t hire people who just want a job. Do hire people who inspire and work well with others. Don’t hire people who prefer to work alone. Do hire people who will grow with your team and with the company. Don’t hire people with narrow skill sets or interests. Do hire people who are well rounded, with unique interests and talents. Don’t hire people who live only to work. Do hire people who are ethical and who communicate openly. Don’t hire people who are political and manipulative. Do hire only when you’ve found a great candidate. Don’t settle for anything less. Habitually Overcommunicate . | Focus on the following: . | does the communication reinfroce core themes that you want everyone to get | is the communication effective | is the communication interesting, fun, or inspirational | is the communication authentic | is the communication going to the right people | are you using the right media | tell the truth, be humble, and bank goodwill for a rainy day | . | . If you are a router, make sure you are a good one. 70/20/10 . | 70% of projects related to core business | 20% to emerging products that had achieved some success | 10% for completely new things that have high risk of failure | . 20% time . | different than 70/20/10, which covers operational time | this is more conceptual, where employees have a 20% dedicated bandwidth to work on completely speculative projects | examples are gmail | failure is OK as long as you learn | . Other kernels . | Spend 80 percent of your time on 80 percent of your revenue | every meeting needs an owner | . ",
    "url": "/notes/business_books/how-google-works#some-tidbits",
    
    "relUrl": "/notes/business_books/how-google-works#some-tidbits"
  },"448": {
    "doc": "How Google Works",
    "title": "Thoughts",
    "content": "Google is perhaps the most successful business of the last 50 years, and the things they needed to do to scale as quickly as they needed to might not be applicable to everyone else. The Google brand allows for a certain approach that other, less innovative companies just can’t get away with. I wonder how much of what Google can do is because of their absurd margins and revenue numbers. They can overcome sunk cost much more easily because their bottom line is so enormous. ",
    "url": "/notes/business_books/how-google-works#thoughts",
    
    "relUrl": "/notes/business_books/how-google-works#thoughts"
  },"449": {
    "doc": "How the World Really Works",
    "title": "How the World Really Works",
    "content": " ",
    "url": "/notes/educational_books/how-the-world-really-works",
    
    "relUrl": "/notes/educational_books/how-the-world-really-works"
  },"450": {
    "doc": "How the World Really Works",
    "title": "1: Understanding Energy",
    "content": "The first chapter of this book shows how our high-energy societies have been steadily increasing their dependence on fossil fuels in general and on electricity, the most flexible form of energy, in particular. Appreciation of these realities serves as a much-needed corrective to the now-common claims (based on a poor understanding of complex realities) that we can decarbonize the global energy supply in a hurry, and that it will take only two or three decades before we rely solely on renewable energy conversions. While we are converting increasing shares of electricity generation to new renewables (solar and wind, as opposed to the long-established hydroelectricity) and putting more electric cars on the roads, decarbonizing trucking, flying, and shipping will be a much greater challenge, as will the production of key materials without relying on fossil fuels. In fundamental physical terms, any process—be it rain, a volcanic eruption, plant growth, animal predation, or the growth of human sapience—can be defined as a sequence of energy conversions. | the average inhabitant of earth has ~700 times more energy at their disposal than someone at the beginning of the 19th century. | energy is the only universal currency, and nothing can take place without its transformations | can’t understand the world without understanding energy | . what is energy? . | most common definition is “the capacity to do work”, but as Feynmann says, “energy has a large number of different forms, and there is a formula for each one. These are: gravitational energy, kinetic energy, heat energy, elastic energy, electrical energy, chemical energy, radiant energy, nuclear energy, mass energy.” | can’t reduce energy into a single entity . | poor understanding of energy has led to naive claims to replace fossil fuels with renewable energy, but liquid hydrocarbons refined from crude oil (gas, kerosene, diesel) remain the highest energy density, nearly triple that of wood and coal | . In large, populous nations, the complete reliance on these renewables would require what we are still missing: either mass-scale, long-term (days to weeks) electricity storage that would back up intermittent electricity generation, or extensive grids of high-voltage lines to transmit electricity across time zones and from sunny and windy regions to major urban and industrial concentrations. | electricity has become the leading energy source in the last 50 years – the majority of major metropolises are powered by it | if we even diminished electricity supply, the effects would be devastating | reducing our dependence on fossil fuels will require an increased role of nuclear reactors | . What we need is to pursue a steady reduction of our dependence on the energies that made the modern world. We still do not know most of the particulars of this coming transition, but one thing remains certain: it will not be (it cannot be) a sudden abandonment of fossil carbon, nor even its rapid demise—but rather its gradual decline. ",
    "url": "/notes/educational_books/how-the-world-really-works#1-understanding-energy",
    
    "relUrl": "/notes/educational_books/how-the-world-really-works#1-understanding-energy"
  },"451": {
    "doc": "How the World Really Works",
    "title": "2: Understanding Food Production",
    "content": "The second chapter of this book is about the most basic survival necessity: producing our food. Its focus is on explaining how much of what we rely on to survive, from wheat to tomatoes to shrimp, has one thing in common: it requires substantial, direct and indirect, fossil fuel inputs. Awareness of this fundamental dependence on fossil fuels leads to a realistic understanding of our continued need for fossil carbon: it is relatively easy to generate electricity by wind turbines or solar cells rather than by burning coal or natural gas—but it would be much more difficult to run all field machinery without liquid fossil fuels and to produce all fertilizers and other agrochemicals without natural gas and oil. In short, for decades it will be impossible to adequately feed the planet without using fossil fuels as sources of energy and raw materials. As a result, no recent transformation—such as increased personal mobility or a greater range of private possessions—has been so existentially fundamental as our ability to produce, year after year, a surfeit of food. (46) . | we reduced the malnutrition rate from 2 in 3 people in 1950 to 1 in 11 in 2019, and this doesn’t even factor in population growth | . In two centuries, the human labor to produce a kilogram of American wheat was reduced from 10 minutes to less than two seconds. This is how our modern world really works […] Most of the admired and undoubtedly remarkable technical advances that have transformed industries, transportation, communication, and everyday living would have been impossible if more than 80 percent of all people had to remain in the countryside in order to produce their daily bread (the share of the US population who were farmers in 1800 was 83 percent) or their daily bowl of rice (in Japan, close to 90 percent of people lived in villages in 1800) (51) . | we cannot reliable feed the world currently without relying on fossil fuels – bread takes ~210-250 mL/kg of fossil fuels, chicken 300-350, and tomatoes 650 mL/kg, and some seafood, like lobster or shrimp or other carnivorous fishes, are 2-3 L/kg! | . at least half of recent global crop harvests have been produced thanks to the application of synthetic nitrogenous compounds, and without them it would be impossible to produce the prevailing diets for even half of today’s nearly 8 billion people. (68) . | so what can we do? . | we can try and reduce food waste, which is easier than reforming complex processes | we can reduce our consumption of meat (complete elimination of meat consumption is doomed to fail) | we can hold out hope for renewable and inexpensive electricity generation and adequate large scale storage | hold out hope for the perfect solution – develop grain/oil crops with properties of leguminous plants, whose roots can turn inert nitrogen in the atmosphere into nitrates | . | . ",
    "url": "/notes/educational_books/how-the-world-really-works#2-understanding-food-production",
    
    "relUrl": "/notes/educational_books/how-the-world-really-works#2-understanding-food-production"
  },"452": {
    "doc": "How the World Really Works",
    "title": "3: Understanding our Material World",
    "content": "4 Pillars of Modern Civilization . Ammonia . | essential in fertilizer, and human or animal sourced fertilizer doesn’t come close to introducing the amount of nitrates required without its use as the dominant nitrogen fertilizer (directly or as feedstock for the synthesis of other nitrogenous compounds), it would be impossible to feed at least 40 percent and up to 50 percent of today’s nearly 8 billion people. Simply restated: in 2020, nearly 4 billion people would not have been alive without synthetic ammonia. | Haber-Bosch synthesis of ammonia might be most important advance in the 20th century | . Plastics . | at end of 20th century, there were 50 different plastics on the market | essential part of health care in preventing the spread of infectious diseases | . Steel . | no other metal matches steel’s compressive and tensile strength | steel dictates the look and function of many parts of modern civilization | almost always the majority of transportation infrastructure and vehicles | also recycable | creation of steel accounts for 7-9 percent of carbon emitted from fossil fuels per year | . Cement . | allows for the building of modern buildings | when mixed with steel, allows for durable skyscrapers | China produced more concrete in 2018 and 2019 than the entire world in the 20th century | . ",
    "url": "/notes/educational_books/how-the-world-really-works#3-understanding-our-material-world",
    
    "relUrl": "/notes/educational_books/how-the-world-really-works#3-understanding-our-material-world"
  },"453": {
    "doc": "How the World Really Works",
    "title": "4: Understanding Globalization",
    "content": "The fourth chapter is the story of globalization, or how the world has become so interconnected by transportation and communication. This historical perspective shows how old (or indeed ancient) the origins of this process are, and how recent is its highest—and finally truly global—extent. And a closer look makes it clear that there is nothing inevitable about the future course of this ambivalently perceived (much praised, much questioned, and much criticized) phenomenon. Recently, there have been some clear retreats around the world, and a general trend toward populism and nationalism, but it is not clear how far these will continue, or to what extent these changes will be modified due to a combination of economic, security, and political considerations. definition of globalization: . | the growing interdependence of the world’s economies, cultures, and populations, brought about by cross-border trade in goods and services, technology, and flows of investment, people, and information. | globalization isn’t an historical inevitability preordained by economic and social evolution . | . 4 distinct eras of globalization . | wind-driven globalization (15th-18th century) . | spurred by sailing, but limited by the fact that it takes a while to sail anywhere | . | steam engines and telegraph (19th century) . | steam engines capable of much faster movement | telegraph allows much faster communication | . | the first diesel engines, flight, radio (end of 19th - early 20th) . | diesel was a step-shift more efficient and reliable than steam | . | large diesel, turbines, containers, and microchips (mid 20th - present) . | more powerful and efficient diesels, the gas turbine for propulsion of jetliners, superior design for intercontinental shipping, and quantum leaps in computing and information processing | . | . | new stage of globalization with entry of China, India, and Russia to world markets | . ",
    "url": "/notes/educational_books/how-the-world-really-works#4-understanding-globalization",
    
    "relUrl": "/notes/educational_books/how-the-world-really-works#4-understanding-globalization"
  },"454": {
    "doc": "How the World Really Works",
    "title": "5: Understanding Risks",
    "content": "The fifth chapter provides a realistic framework for judging the risks we face: modern societies have succeeded in eliminating or reducing many previously mortal or crippling risks—polio and giving birth, for example—but many perils will always be with us, and we repeatedly fail to make proper risk assessments, both underestimating and exaggerating the dangers we face. After finishing this chapter, readers will have a good appreciation of the relative risks of many common involuntary exposures and voluntary activities (from falling at home to flying between continents; from living in a hurricane-prone city to parachuting)—and, cutting through the diet industry nonsense, we will see a range of options of what we could eat to help us live longer. ",
    "url": "/notes/educational_books/how-the-world-really-works#5-understanding-risks",
    
    "relUrl": "/notes/educational_books/how-the-world-really-works#5-understanding-risks"
  },"455": {
    "doc": "How the World Really Works",
    "title": "6: Understanding the Environment",
    "content": "The sixth chapter will look first at how unfolding environmental changes might affect our three existential necessities: oxygen, water, and food. The rest of the chapter will focus on global warming, the change that has dominated recent environmental concerns and has led to the emergence of new—near apocalyptic—catastrophism on one hand, and complete denials of the process on the other. Instead of recounting and adjudging these contested claims (too many books have already done so), I will stress that, contrary to widespread perceptions, this is not a recently discovered phenomenon: we have understood the fundamentals of this process for more than 150 years. nine categories of biospheric boundaries . | climate change - now interchangeably, albeit inaccurately, called simply global warming | ocean acidification - endangering marine organisms that build structures of calcium carbonate | depletion of stratospheric ozone - shielding the Earth from excessive ultraviolet radiation and threatened by releases of chlorofluorocarbons | atmospheric aerosols - pollutants reducing visibility and causing lung impairment | interference in nitrogen and phosphorus cycles - above all, the release of these nutrients into fresh and coastal waters | freshwater use - excessive withdrawals of underground, stream, and lake waters | land use changes - due to deforestation, farming, and urban and industrial expansion | biodiversity loss | various forms of chemical pollution | . ",
    "url": "/notes/educational_books/how-the-world-really-works#6-understanding-the-environment",
    
    "relUrl": "/notes/educational_books/how-the-world-really-works#6-understanding-the-environment"
  },"456": {
    "doc": "How the World Really Works",
    "title": "7: Understanding the Future",
    "content": "In the closing chapter I will look to the future, specifically at the recent opposing propensities to embrace catastrophism (those that say there are just years left before the final curtain descends on modern civilization) and techno-optimism (those that predict that the powers of invention will open unlimited horizons beyond the confines of the Earth, turning all terrestrial challenges into inconsequential histories). Predictably, I have little use for either of these positions, and my perspective will find no favor with either doctrine. I do not foresee any imminent break with history in either direction; I do not see any already predetermined outcomes, but rather a complicated trajectory contingent on our—far from foreclosed—choices. ",
    "url": "/notes/educational_books/how-the-world-really-works#7-understanding-the-future",
    
    "relUrl": "/notes/educational_books/how-the-world-really-works#7-understanding-the-future"
  },"457": {
    "doc": "How the World Really Works",
    "title": "Thoughts",
    "content": ". | one of the central messages is that a promise of countermeasures to climate change that are instant and magical is a fool’s gold. The processes of energy consumption, the infrastructure of reliance on fossil fuels, this is centuries in the making, and that “any sufficiently effective steps [to mitigate climate change] will be decidedly non-magical, gradual, and costly” (204) | . To believe that our understanding of these dynamic, multifactorial realities has reached the state of perfection is to mistake the science of global warming for the religion of climate change. | Smil presents a unrelentingly realist take on the realities of our current dependence on energy and by virtue the fuel that creates that energy, fossil fuels. He paints a picture that disambiguates between the science of global warming and the religion of climate change, and argues for a measured approach stripped of the-world-is-going-to-end catastrophism or technology-will-solve-all-our-problems techno-optimism. The fact is, there is no silver bullet to eliminate our dependence on fossil fuels. The system is now too large, with too many pieces that would need to be replaced or updated even if we create some wonder-fuel. As a system gets larger, it is subject to more and more inertia, and the mechanisms of our global economy, built on shipping and transport, are too entrenched to be changed overnight. | The one argument I can broker is that while Smil acknowledges black swan events for technological innovation, he dismisses the sort of world-changing nature of these events. While the internet and computing didn’t change the fundamental profile of our energy use drastically, there might be some sort of breakthrough in clean fueling, or energy storage, or energy generation that changes the game and allows us to pivot. But point taken that prayers aren’t policy, and so banking on some revelatory new tech is waiting for technology Godot. | . ",
    "url": "/notes/educational_books/how-the-world-really-works#thoughts",
    
    "relUrl": "/notes/educational_books/how-the-world-really-works#thoughts"
  },"458": {
    "doc": "How to Read a Book",
    "title": "How to Read a Book",
    "content": " ",
    "url": "/notes/educational_books/how-to-read-a-book",
    
    "relUrl": "/notes/educational_books/how-to-read-a-book"
  },"459": {
    "doc": "How to Read a Book",
    "title": "Types of Reading",
    "content": ". | 1st Level - Elementary Reading: Recognizing individual words on the page. “What does this sentence say?” (Speed reading and mechanical improvements in reading often focus on this level) | 2nd Level - Inspectional Reading: The goal of this level is to get the most out of a book within a given time. “Inspectional reading is the art of skimming systematically.” Aim to examine the surface of the book. “What is this book about?” And “What is the structure of this book?” Are 2nd level matters. | 3rd Level - Analytical Reading: Analytical reading is the best, most complete reading possible given unlimited time. This is highly active reading. Analytical reading is not necessary for informational or entertainment reading. “Analytical reading is preeminently for the sake of understanding.” | 4th Level - Syntopical Reading: The most complex and systematic of the four levels. This is “comparative reading” in which many books are read in a given topic. Through synoptical reading the reader will be able to develop and synthesize new analyses of the subject that are not available in any of the individual books. ",
    "url": "/notes/educational_books/how-to-read-a-book#types-of-reading",
    
    "relUrl": "/notes/educational_books/how-to-read-a-book#types-of-reading"
  },"460": {
    "doc": "How to Read a Book",
    "title": "Inspectional Reading",
    "content": "| Skim the following: Title Page, Preface, Table of Contents, Index. This should give you a good sense about the author’s main contention and what kind of book has been written. | Select a few pivotal chapters and read a few paragraphs here and there. In particular, pay attention to the ends of chapters and the final chapter. Read the last 2-3 pages as the author is more likely to provide summaries or highlights of the ideas he or she consider most important. | Author emphasizes that superficial ordinarily has negative connotations but in the context of effective reading, it is an essential role: Understanding a book at the superficial level sets the reader’s expectations and helps them determine whether or not to invest in the book in the first place. | . “In tackling a difficult book for the first time, read it through without ever stopping to look up or ponder the things you do not understand right away.” . | The author emphasizes that multiple readings may be necessary for better understanding. | . “If you insist on understanding everything on every page before you go on to the next, you will not get very far. In your effort to master the fine points, you will miss the big points…” . | Speed of reading is dependent on the goal of the reading activity. Inspectional reading is done quickly because the goal is to get the gist of the book and the overarching idea (similarly “analytical reading” will be performed more slowly). | . ",
    "url": "/notes/educational_books/how-to-read-a-book#inspectional-reading",
    
    "relUrl": "/notes/educational_books/how-to-read-a-book#inspectional-reading"
  },"461": {
    "doc": "How to Read a Book",
    "title": "Analytical Reading",
    "content": "I. The First Stage of Analytical Reading: Rules for Finding What a Book Is About . | Classify the book according to kind and subject matter. | State what the whole book is about with the utmost brevity. | Enumerate its major parts in their order and relation, and outline these parts as you have outlined the whole. | Define the problem or problems the author has tried to solve. | . II. The Second Stage of Analytical Reading: Rules for Interpreting a Book’s Contents . | Come to terms with the author by interpreting his key words. | Grasp the author’s leading propositions by dealing with his most important sentences. | Know the author’s arguments, by finding them in, or constructing them out of, sequences of sentences. | Determine which of his problems the author has solved, and which he has not; and of the latter, decide which the author knew he had failed to solve. | . III. The Third Stage of Analytical Reading: Rules for Criticizing a Book as a Communication of Knowledge . A. General Maxims of Intellectual Etiquette . | Do not begin criticism until you have completed your outline and your interpretation of the book. (Do not say you agree, disagree, or suspend judgment, until you can say “I understand.”) | Do not disagree disputatiously or contentiously. | Demonstrate that you recognize the difference between knowledge and mere personal opinion by presenting good reasons for any critical judgment you make. | . B. Special Criteria for Points of Criticism . | Show wherein the author is uninformed. | Show wherein the author is misinformed. | Show wherein the author is illogical. | Show wherein the author’s analysis or account is incomplete. | . Note: Of these last four, the first three are criteria for disagreement. Failing in all of these, you must agree, at least in part, although you may suspend judgment on the whole, in the light of the last point. ",
    "url": "/notes/educational_books/how-to-read-a-book#analytical-reading",
    
    "relUrl": "/notes/educational_books/how-to-read-a-book#analytical-reading"
  },"462": {
    "doc": "How to Read a Book",
    "title": "Syntopical Reading ",
    "content": "I. Surveying the Field Preparatory to Syntopical Reading . | Create a tentative bibliography of your subject by recourse to library catalogues, advisors, and bibliographies in books. | Inspect all of the books on the tentative bibliography to ascertain which are germane to your subject, and also to acquire a clearer idea of the subject. | . Note: These two steps are not, strictly speaking, chronologically distinct; that is, the two steps have an effect on each other, with the second, in particular, serving to modify the first. II. Syntopical Reading of the Bibliography Amassed in Stage I . | Inspect the books already identified as relevant to your subject in Stage I in order to find the most relevant passages. | Bring the authors to terms by constructing a neutral terminology of the subject that all, or the great majority, of the authors can be interpreted as employing, whether they actually employ the words or not. | Establish a set of neutral propositions for all of the authors by framing a set of questions to which all or most of the authors can be interpreted as giving answers, whether they actually treat the questions explicitly or not. | Define the issues, both major and minor ones, by ranging the opposing answers of authors to the various questions on one side of an issue or another. You should remember that an issue does not always exist explicitly between or among authors, but that it sometimes has to be constructed by interpretation of the authors’ views on matters that may not have been their primary concern. | Analyze the discussion by ordering the questions and issues in such a way as to throw maximum light on the subject. More general issues should precede less general ones, and relations among issues should be clearly indicated. | . Note: Dialectical detachment or objectivity should, ideally, be maintained throughout. One way to insure this is always to accompany an interpretation of an author’s views on an issue with an actual quotation from his text. A good book does reward you for trying to read it. The best books reward you most of all. The reward, of course, is of two kinds. First, there is the improvement in your reading skill that occurs when you successfully tackle a good, difficult work. Second—and this in the long run is much more important —a good book can teach you about the world and about yourself. You learn more than how to read better; you also learn more about life. You become wiser. Not just more knowledgeable—books that provide nothing but information can produce that result. But wiser, in the sense that you are more deeply aware of the great and enduring truths of human life. ",
    "url": "/notes/educational_books/how-to-read-a-book#syntopical-reading",
    
    "relUrl": "/notes/educational_books/how-to-read-a-book#syntopical-reading"
  },"463": {
    "doc": "Educational Books",
    "title": "Educational Books",
    "content": " ",
    "url": "/notes/educational-books",
    
    "relUrl": "/notes/educational-books"
  },"464": {
    "doc": "Classes",
    "title": "Classes",
    "content": " ",
    "url": "/notes/classes",
    
    "relUrl": "/notes/classes"
  },"465": {
    "doc": "Tech Books",
    "title": "Tech Books",
    "content": " ",
    "url": "/notes/tech-books",
    
    "relUrl": "/notes/tech-books"
  },"466": {
    "doc": "Other Books",
    "title": "Other Books",
    "content": " ",
    "url": "/notes/other-books",
    
    "relUrl": "/notes/other-books"
  },"467": {
    "doc": "Podcasts",
    "title": "Podcasts",
    "content": " ",
    "url": "/notes/podcasts",
    
    "relUrl": "/notes/podcasts"
  },"468": {
    "doc": "Quotes",
    "title": "Quotes",
    "content": " ",
    "url": "/notes/quotes",
    
    "relUrl": "/notes/quotes"
  },"469": {
    "doc": "It’s My Notes",
    "title": "It’s My Notes",
    "content": "This website functions as a repository for notes on all the things I read and learn. This wiki presentation is just another step in the evolution of maximizing the time I spend learning. | Tech Books | Business Books | Educational Books | Articles | Classes | Other Books | Favorite Quotes | Vocabulary | Projects | Podcasts | . ",
    "url": "/index.html",
    
    "relUrl": "/index.html"
  },"470": {
    "doc": "Articles",
    "title": "Articles",
    "content": " ",
    "url": "/notes/articles",
    
    "relUrl": "/notes/articles"
  },"471": {
    "doc": "Business Books",
    "title": "Business Books",
    "content": " ",
    "url": "/notes/business-books",
    
    "relUrl": "/notes/business-books"
  },"472": {
    "doc": "Vocabulary",
    "title": "Vocabulary",
    "content": " ",
    "url": "/notes/vocabulary",
    
    "relUrl": "/notes/vocabulary"
  },"473": {
    "doc": "Projects",
    "title": "Projects",
    "content": " ",
    "url": "/notes/projects",
    
    "relUrl": "/notes/projects"
  },"474": {
    "doc": "The Influence of Background Music on Learning in the Light of Different Theoretical Perspectives and the Role of Working Memory Capacity",
    "title": "The Influence of Background Music on Learning in the Light of Different Theoretical Perspectives and the Role of Working Memory Capacity",
    "content": "Article Link . ",
    "url": "/notes/articles/influence-of-background-music-on-learning",
    
    "relUrl": "/notes/articles/influence-of-background-music-on-learning"
  },"475": {
    "doc": "The Influence of Background Music on Learning in the Light of Different Theoretical Perspectives and the Role of Working Memory Capacity",
    "title": "Practical Implications",
    "content": "Based on the results of this study, we cannot recommend learning with background music. Learners with the lowest capacity levels were especially impaired by background music. With increasing working memory capacity background music neither hindered nor fostered learning. For these learners it is merely a matter of personal preference as to whether they wish to learn with background music or not, for example in an attempt to raise their motivation levels. However, learners should be careful with their decision as to which music they chose to listen to: Song with lyrics are potentially more distracting than instrumental melodies and music with other modes or tempos could possibly evoke obstructive emotions for learning. Luckily, there is enough music readily available, so that each of us has the chance to listen to our preferred music, which may even be conducive to learning. ",
    "url": "/notes/articles/influence-of-background-music-on-learning#practical-implications",
    
    "relUrl": "/notes/articles/influence-of-background-music-on-learning#practical-implications"
  },"476": {
    "doc": "Inspired",
    "title": "Inspired",
    "content": ". | three stages of company | root causes of failed product efforts . | two inconvenient truths about product | . | three overarching principles of product | key concepts . | product discovery | prototypes | product delivery | product/market fit | product vision . | principles of product vision | . | product strategy . | principles of product strategy | . | product evangelism | . | product discovery . | principles | discovery techniques . | discovery framing | discovery planning | discovery ideation | discovery prototyping | discovery testing | . | transformation techniques | . | stakeholders | good culture . | top reasons for loss of innovation | top reasons for loss of velocity | innovation vs execution culture | . | . ",
    "url": "/notes/business_books/inspired",
    
    "relUrl": "/notes/business_books/inspired"
  },"477": {
    "doc": "Inspired",
    "title": "three stages of company",
    "content": ". | startup - a company that has yet to achieve market fit | growth-stage - companies that are concerned with how to effectively grow and scale | enterprise - companies that want to create a lasting business, through both value capture (tweaking and optimizing current products) and developing products to reach their full potential | . ",
    "url": "/notes/business_books/inspired#three-stages-of-company",
    
    "relUrl": "/notes/business_books/inspired#three-stages-of-company"
  },"478": {
    "doc": "Inspired",
    "title": "root causes of failed product efforts",
    "content": ". | many companies operate like above, leading to lack of innovation and very long turn times to get into customer hands | the engineering teams might be agile, but everything else is waterfall | this leads to 10 big problems: . | source of ideas - sales or stakeholder driven rather than engineers, who are often best source of ideas but just become mercenaries | business cases - while often a good thing for big projects, expecting to know how much a product will make and how long it will take to implement is impossible at this stage | product roadmaps - just a list of features and ignores the two inconvenient truths of product | role of product management - in this model, it is just requirements gathering and documenting for engineers | design too late - lipstick on a pig for design to be brought in so late | engineering brought in too late | agile too late | project-centered work - projects are about output, and product is about outcomes | customer validation happens too late | opportunity cost - what could we have been working on instead? | . | . two inconvenient truths about product . | at least half our ideas are just not going to work | for the ideas that have potential, it will take several iterations to deliver value (time to money) | . ",
    "url": "/notes/business_books/inspired#root-causes-of-failed-product-efforts",
    
    "relUrl": "/notes/business_books/inspired#root-causes-of-failed-product-efforts"
  },"479": {
    "doc": "Inspired",
    "title": "three overarching principles of product",
    "content": ". | risks are tackled up front rather than at the end | products are defined and designed collaboratively rather than sequentially | it’s about solving problems, not implementing features | . ",
    "url": "/notes/business_books/inspired#three-overarching-principles-of-product",
    
    "relUrl": "/notes/business_books/inspired#three-overarching-principles-of-product"
  },"480": {
    "doc": "Inspired",
    "title": "key concepts",
    "content": ". | holistic product - a products functionality, technology, user experience design, how we monetize it, how we acquire and attract users and customers, and it’s offline experiences | continuous discovery and delivery - need to discover product to be built and deliver it to market | . product discovery . | output of product discovery is a validated product backlog | answers the questions: . | will the user buy this? | can the user figure out how to use this? | can our engineers build this? | can our stakeholders support this | . | . prototypes . | a series of quick and inexpensive experiments to prove product viability, feasibility | strong teams test many product ideas per week, typically 10-20 | . product delivery . | bringing a product to market, including necessary scale, performance, reliability, fault tolerance, security, privacy, internationalization, etc. | . product/market fit . | smallest possible actual product that meets the specific needs of a specific market of customers | MVP is not a product, MVP is a prototype! | . product vision . | long-term objective of a product, typically 2-10 years out | . principles of product vision . | start with why | fall in love with the problem, not the solution | don’t be afraid to think big with vision | don’t be afraid to disrupt yourself because, if you don’t, someone else will | the product vision needs to inspire | determine and embrace relevant and meaningful trends | skate to where the puck is heading, not to where it was | be stubborn on vision, flexible on the details | realize that any product vision is a leap of faith | evangelize continuously and relentlessly | . product strategy . | the sequence of products or releases we plan to deliver on the path to realizing the product vision | should be focused, whereas product vision should be inspiring | . principles of product strategy . | focus on one target market or persona at a time | product strategy needs to be aligned with business strategy | product strategy needs to be aligned with sales and go-to-market strategy | obsess over customers, not over competitors | communicate the strategy across the organization | . product evangelism . | use a prototype | share the pain | share the vision | share learnings generously | share credit generously | learn how to give a great demo | do your homework | be genuinely excited | learn to show some enthusiasm | spend time with your team | . ",
    "url": "/notes/business_books/inspired#key-concepts",
    
    "relUrl": "/notes/business_books/inspired#key-concepts"
  },"481": {
    "doc": "Inspired",
    "title": "product discovery",
    "content": ". | the purpose of discovery is to address these risks: . | value risk - will the customer buy this, or choose to use it | usability risk - can the user figure out how to use it | feasibility risk - can we build it | business viability risk - does this solution work for our business | . | . principles . | we know we can’t count on customers to tell us what to build | the most important thing is to establish compelling value | as hard and important as engineering is, coming up with a good user experience is usually even harder, and more critical to success | functionality, design, and technology are inherently intertwined | we expect that many of our ideas won’t work out, and the ones that do require several iterations | we must validate our ideas on real users and customers | our goal in discovery is to validate our ideas the fastest, cheapest way possible | we need to validate the feasibility of our ideas during discovery, not after | we need to validate the business viability of our ideas during discovery, not after | it’s about shared learning | . discovery techniques . discovery framing . | allows us to quickly tackle the underlying issues that must be tackled during product discovery | opportunity assessment - answer four key questions about discovery work – objective, key result, customer problem, and target market | customer letter - originally like the amazon press release, but imagine you are a customer pleased with the solution, and write a letter to show that satisfaction | startup canvas - useful for completely new products | . discovery planning . | help identify the bigger challenges and planning how to attack this work | story map - arrange user stories into mapping of functionality – useful for narrative of the work | customer discovery program - getting reference customers (real customer, running product in production, paying real money, and willing to tell others) – often these reference customers are the single best indicator of future product success | . discovery ideation . | designed to provide the product team with a wealth of promising solutions aimed at current problems | customer interviews | concierge test - do the customers job for them to get a feel for what it’s like | customer misbehavior - monitor what the customer wants to do outside of typical behavior | hack days - either directed or undirected, but useful for developer ideas | . discovery prototyping . | many different forms of prototypes, different characteristics suited for different things | feasibility - testing technical feasibility of a solution | user - simulation of user interaction, with varying degrees of fidelity (closeness to reality) – useful to assess how a user interacts | live-data - main use case is to collect actual data to prove something | hybrid - some combination of the above | . main principles . | to learn something at a much lower cost in terms of time and effort than building a product | force you to think through a problem at a substantially deeper level tha nif we just about it or write it out | a powerful tool for team collaboration | many different possibilities for fidelity for a prototype | the primary purpose of a prototype is to tackle one or more product risks | . discovery testing . | testing usability . | need to round up users | use a high-fidelity user prototype | need to keep users in use mode rather than critique mode | act like a parrot – repeat to users what you are hearing them say | . | testing value . | can test demand, and can test value qualitatively or quantitatively | use a fake door demand test, where a button for some functionality exists but the functionality hasn’t been implemented | to test qualitatively, you can have users stake money, reputation (would they recommend it), time, or access (will they provide login creds to port current application to new one) | can test qualitatively through A/B testing (gold standard), invite only testing | . | testing feasibility . | do we know how to build this? | do we have the skills on teams to build this? | do we have enough time to build this? | do we need architectural changes to build this? | do we have all the components? | do we understand dependencies? | will performance be acceptable? | will it scale? | do we have the infrastructure? | can we afford the cost? | . | testing business viability . | need to go through all stakeholders to assess viability: marketing, sales, customer success, finance, legal, security, bus dev | . | . transformation techniques . | discovery sprint: one week time box of product discovery designed to tackle a substantial problem or risk the product team is facing | pilot team: allow the roll out of change to a limited part of the org before implementing more broadly | moving off roadmaps - to wean an organization off of roadmaps, include the actual business outcome a feature is intended to help | . Teams work on the prioritized business objectives determined by the leaders; we share key results transparently, and we commit to high-integrity commitments when critical delivery dates are needed. ",
    "url": "/notes/business_books/inspired#product-discovery-1",
    
    "relUrl": "/notes/business_books/inspired#product-discovery-1"
  },"482": {
    "doc": "Inspired",
    "title": "stakeholders",
    "content": ". | a stakeholder is a person who has veto power or can otherwise prevent the work from launching | success for stakeholder management means they respect you and your contributions, they trust you understand their concerns, and will keep thme informed of important decisions or changes, and they will give you the room to come up with the best possible solutions | . A group setting is not the forum for designing strong products. It results in design by committee, which yields mediocre results at best. Instead, meet privately with each stakeholder, show them the high-fidelity prototype, and five them the chance to raise any concerns. ",
    "url": "/notes/business_books/inspired#stakeholders",
    
    "relUrl": "/notes/business_books/inspired#stakeholders"
  },"483": {
    "doc": "Inspired",
    "title": "good culture",
    "content": "top reasons for loss of innovation . organizations that lose the ability to innovate at scale are missing these attributes: . | customer-centric culture | compelling product vision | focused product strategy | strong product managers | stable product teams | engineers in discovery | corporate courage | empowered product teams | product mindset | time to innovate | . top reasons for loss of velocity . | technical debt | lack of strong product managers | lack of delivery management | infrequent release cycles | lack of product vision and strategy | lack of co-located, durable product teams | not including engineers early enough in product discovery | not utilizing product design in discovery and instead having them try to do their work at the same time the engineers are trying to build | changing priorities | a consensus culture | . innovation vs execution culture . | to be strong at innovation, you need a culture of experimentation, open minds, technology, business and customer-savvy teams, skill-set and staff diversity, and discovery techniques | to be strong at execution, you need a culture of urgency, high-integrity commitments, empowerment, accountability, collaboration, results, and recognition | innovation and execution are often at odds | . ",
    "url": "/notes/business_books/inspired#good-culture",
    
    "relUrl": "/notes/business_books/inspired#good-culture"
  },"484": {
    "doc": "Investing some money",
    "title": "Investing some money",
    "content": " ",
    "url": "/notes/projects/investing-some-money",
    
    "relUrl": "/notes/projects/investing-some-money"
  },"485": {
    "doc": "Invitation To A Beheading",
    "title": "Invitation To A Beheading",
    "content": "Valdimir Nabokov, 1935 (russian), 1959 (english) . ",
    "url": "/notes/other_books/invitation-to-a-beheading",
    
    "relUrl": "/notes/other_books/invitation-to-a-beheading"
  },"486": {
    "doc": "Invitation To A Beheading",
    "title": "Summary",
    "content": "Chapter 1 . The novel begins with Cincinnatus C being condemned to death by beheading, to “don the red top hat”. The judge whispers C’s sentence in “moist undertones”. C is led to his jail cell where his lawyer, Roman Vissarionovich, is already waiting before being summarily dismissed. C’s cell morphs into the prison director’s office, before morphing to a tableau of the countryside and C’s house, before turning back into his cell. Chapter 2 . We learn about the fundamental defect of C – he is “impervious to the rays of others”. Various events from C’s life play out; becoming a kindergarten teacher, meeting his wife, Marthe, her consistent infidelity. Chapter 3 . C has a long discussion with his laywer, asking, begging to know his execution date. There is also some indication that this entire world only exists in C’s mind, his “invented habitus”. C, Roman, and Rodion, the prison director, climb a massive tower to view the world before returning to C’s cell. Chapter 4 . The chapter begins with a small child, Emmie, breaking into C’s cell. C begs her to help him escape, then failing that, to tell him the day he is set to be executed. Later, as C is leafing through magazines “of the ancients”, we finally learn why C wants to know when he’ll die – whether he has time to finish his work, describing the space between a dream world and reality, which may be this cell. C’s punishment is beginning to feel self-imposed and self-perpetuated. Chapter 5 . The prison director brings two pieces of news, one that the prison will be adding a new prisoner, and two, that C will have a meeting with his wife, Marthe. The second piece of information causes C to swoon. C is taken to see the new prisoner, a “little fat man” he peers at through a peephole. Then C writes a note to Marthe, calling her half woman, half monster, but despite that C is enthralled. C takes a bath, shaves, puts on clean clothes smelling of “home washing” and sleeps. Chapter 6 . Marthe’s arrival is delayed a day to the vagaries of the legal process. This prompts C to consider his condition “in exactitude”, and we learn of his crime, “gnostical turpitude”. Rodion wants to clean C’s cell, so C takes a daydream walk and ends up stumbling upon Emmie, who shows him a look into Tamara Gardens. C want to go there but is beckoned back to his newly cleaned C by Rodion, walking past the new prisoner on his way. Chapter 7 . C again doesn’t get to meet Marthe, but is introduced to the photo-loving and insufferable fellow prisoner, Pierre. Pierre and Rodrig have a good laugh in C’s cell while C sits quietly looking on. Chapter 8 . The entire chapter follows C’s thoughts in first-person. We learn how dissatisfied he is. This seems to be the start of “his work”, something he was terrified of not having time to finish. There is also something elegaic in the tone – the chapter ends with him stepping out of the third floor window in his school building. Chapter 9 . C finally gets to see Marthe, but their children and Marthe’s entire family also show up. Amidst the absurd family reunion, C attempts to get to the couch where Marthe is sitting, accompanied by a “young fop”. Just as C reaches her, Rodrig and an accomplice pick up and remove the entire couch from the cell. Chapter 10 . Pierre and C converse and Pierre tells C that the reason he is in prison is for trying to help C escape, and that he (Pierre) will be joining C on the scaffold. Then C insults Pierre’s stature and strength, and the cell devolves into a circus display with Pierre jumping on to the table to walk on his hands while holding the chair in his mouth, to off-stage applause. After, Pierre beats a hasty retreat as he realizes his dentures were stuck in the chair. Chapter 11 . The shadow of unreality grows long in this chapter. Time is blending and blurring, and no one is visiting C except Rodion. A long description of the fictional book Quercus, a 3000 page tome about the 600 year life of an oak tree and what that tree witnessed, is provided. More hints that this dream-like world is a fiction and most of C is elsewhere. Chapter 12 . C is awoken by the sound of clawing and then spends the rest of the night looking for the source of the sound before daylight terminates both the sound and the search. Then, his mother visits him. C dismisses her as a parody created by his jailers until at the very end, when a glint in her eyes suggests some sort of reality, and immediately after she is whisked away. Chapter 13 . C hears the tunneling again, and after banging a chair on a wall to see if he could elicit a response, he’s sure the tunneling is coming to rescue him. The narrative transitions to first person &amp; C’s letter to Marthe. Pierre arrives in the cell to play games, first a game of chess where Pierre relentlessly cheats while prattling on about women, then a game of goose in which Pierre also cheats. Chapter 14 . The tunneling continues. Emmie comines in and tells C she’ll save him tomorrow. Pierre and Rodrig come in, Pierre continuing his monologue on “pleasure”. Pierre implies that if C repents, there might be salvation. C muses on his fortnight in jail. Chapter 15 . The tunnel is finally complete, and Rodrig and Pierre emerge from it laughing hysterically into C’s room. C &amp; Pierre follow it back to Pierre’s room, where Pierre implies he is the executioner by showing C his ace. C takes the tunnel to return to his room, but instead finds himself on the fortress walls, a short climb from escape. Shortly after climbing, he runs into Emmie, who pulls him back into the fortress to a room with the director, his wife, and Pierre. Emmie is the child of the director. Chapter 16 . Emmie seems to die through a series of photos, and the final execution date is set for the day after tomorrow. C is largely aloof as Pierre reveals he is the executioner and he knows C’s sould. C has a conversation with the librarian, who is more talkative than he has been. Chapter 17 . C is paraded to the “city elders” as tradition dictates. The party is a bizarre performance of eating, revelry, Pierre’s non-sequitur jokes, attended in part by C’s extended family, and capped off by a technical difficulty riddled fireworks show. After the party while C and Pierre are returning to the fortress, Pierre chastises C for his shyness. Chapter 18 . The execution has been suspended, and Marthe comes to visit. In a parody of her role as adulteress, she comes in adjusting her dress and implying that to see C she needed to pay the toll with her body. She says the execution was delayed because everyone overslept. She then leaves again to buy a few more minutes with C for the price of another romp. After coming back, she begs C to repent, if only to save the accusatory looks Marthe receives. Chapter 19 . Rodrig shows up carrying a humongous moth for the spider in the corner of the cell. The moth escapes, and the spider does not get the snack. Only C sees the moth alight under the table. Pierre arrives. Despite thinking he has more time, Pierre arrives and informs C that it is now time. The cell begins to disintegrate, Rodion and Rodrig remove their makeup and props and turn out to be nearly identical to each other. The ever-present spider in the corner is revealed to be a toy. Chapter 20 . C is led to the scaffold and his death by Pierre. Reality seems to be warping and things appear unreal. Poplar trees fall . ",
    "url": "/notes/other_books/invitation-to-a-beheading#summary",
    
    "relUrl": "/notes/other_books/invitation-to-a-beheading#summary"
  },"487": {
    "doc": "Invitation To A Beheading",
    "title": "Thoughts",
    "content": "Nabokov has said that he detests symbol and allegory, but even the most austere readings of Invitation to a Beheading would find it irresistible to veer towards those earlier literary devices more omnipresent cousin, metaphor. The novel almost begs it; we, much like Cincinnatus C, beginning to realize with each page that the fortress in which Cincinnatus awaits his turn to “don the red top hat” is invented, a fiction. A superficial reading might claim the novel is a meditation on authorial procrastination, the protagonist Cincinnatus inventing a fictional beheading to compel him towards completing his great work. Throughout, we have constant references to the unreality of their “invented habitus”, the characters all vaguely resembling each other, the tableau like a stage play, complete with prop changes between Rodin and Rodrig and Roman, off-stage directions, canned laughter, sound, and in-place set changes. We as readers are caught up in this reality since no one seems to be questioning it except the condemned man. In the prologue, Nabokov disdains the comparison to Kafka, claiming to “[have] had no German, was completely ignorant of modern German literature, and had not yet read any French or English translations of Kafka’s works”. Whether or not we believe Nabokov, who always played the inveterate sniper to his literary contemporaries (Nabokov doesn’t seem to have a high opinion of anyone), I don’t know if the comparison rings completely true if taken to its logical extremes. In a prototypical Kafka-esque purgatory, the protagonist is detained by the bureaucratic inanity of the outside world, a world his only handle into is via these word-bending and elusive administrative priests. The protagonist has no hope of escape from the prison not of his own making. Cincinnatus, on the other hand, is author of his own fortress. He has imprisoned himself, invented his jailer and lawyer and the strangely mobile immoveable table in his cell and the bizarre and insufferable executioner qua prisoner, Pierre. This is a fundamentally different equation. We have an author, as all Nabokov characters are authors at their cores, attempting to write something enduring about the space between illusions and reality, “between [Cincinnatus’s] movement and the movement of the laggard shadow”, a vantage that only Cincinnatus has via his “gnostical turpitude”, the crime he is going to soon be headless over. There is a solipsitic streak to Nabokov’s protagonists – they are inventors and owners of their world, and the artifice and the real intertwine in playful helices. Either that, or they are pathetic, in the Grecian sense, in no control of the world they find themselves in, forced to endure tragedy after tragedy. Cincinnatus finds himself moving quickly back and forth between those two roles, trying to impose an order to a real life, with an adulterous wife, a severely diminished role in society, and no greater artistic creation to show for it, by creating a dream life. Nabokov constantly lets us peer behind the curtain – frequently Cincinnatus and his double are doing two contradictory things in this fortress. One Cincinnatus is assertive and argues his case, the other sits mutely, allowing the world to happen. This dichotomy resolves itself in the final page, but it draws the dramatic tension sharp, just below the surface of the narrative. Nabokov as a writer can certainly delight, and this novel showcases all those deliciously Nabokovian traits – firecracker prose, layered word play, ribald jokes (Marthe, C’s wife, in attempting to buy more time with C, sleeps with a jailer who was less than functional and doesn’t stop to even readjust her dress before returning to her husband). There are also layers here I still haven’t unpacked. What is the spider? Is this a suicide dream as Cincinnatus threw himself from a 3rd story window in Chapter 8? Regardless, a really lovely book. ",
    "url": "/notes/other_books/invitation-to-a-beheading#thoughts",
    
    "relUrl": "/notes/other_books/invitation-to-a-beheading#thoughts"
  },"488": {
    "doc": "Invitation To A Beheading",
    "title": "Favorite Quotes",
    "content": "He was impervious to the rays of others, and therefore produced when off his guard a bizarre impression, as of a lone dark obstacle in this world of souls transparent to one another; he learned however to feign translucence, employing a complex system of optical illusions, as it were—but he had only to forget himself, to allow a momentary lapse in self control, in the manipulation of cunningly illuminated facets and angles at which he turned his soul, and immediately there was alarm. (24) . I am surrounded by some sort of wretched specters, not by people. They torment me as can torment only senseless visions, bad dreams, dregs of delirium, the drivel of nightmares and everything that passes down here for real life. In theory one would wish to wake up. But wake up I cannot without outside help, and yet I fear this help terribly, and my very soul has grown lazy and accustomed to its snug swaddling clothes. (36) . but here is what I want to express: between his movement and the movement of the laggard shadow—that second, that syncope—there is the rare kind of time in which I live—the pause, the hiatus, when the heart is like a feather … And I would write also about the continual tremor—and about how part of my thoughts is always crowding around the invisible umbilical cord that joins this world to something—to what I shall not say yet (53) . For thirty years I have lived among specters that appear solid to the touch, concealing from them the fact that I am alive and real—but now that I have been caught, there is no reason to be constrained with you. At least I shall test for myself all the unsubstantiality of this world of yours. (70) . Accused of the most terrible of crimes, gnostical turpitude, so rare and so unutterable that it was necessary to use circumlocutions like “impenetrability,” “opacity,” “occlusion”; sentenced for that crime to death by beheading; emprisoned in the fortress in expectation of the unknown but near and inexorable date (which he distinctly anticipated as the wrenching, yanking and crunch of a monstrous tooth, his whole body being the inflamed gum, and his head that tooth); standing now in the prison corridor with a sinking heart—still alive, still unimpaired, still Cincinnatic—Cincinnatus C. felt a fierce longing for freedom, the most ordinary, physical, physically feasible kind of freedom, and instantly he imagined, with such sensuous clarity as though it all was a fluctuating corona emanating from him, the town beyond the shallowed river, the town, from every point of which one could see—now in this vista, now in that, now in crayon, and now in ink—the tall fortress within which he was. (72) . But then I have long since grown accustomed to the thought that what we call dreams is semi-reality, the promise of reality, a foreglimpse and a whiff of it; that is, they contain, in a very vague, diluted state, more genuine reality than our vaunted waking life which, in its turn, is semi-sleep, an evil drowsiness into which penetrate in grotesque disguise the sounds and sights of the real world, flowing beyond the periphery of the mind—as when you hear during sleep a dreadful insidious tale because a branch is scraping on the pane, or see yourself sinking into snow because your blanket is sliding off. (92) . and it was somehow funny that eventually the author must needs die—and it was funny because the only real, genuinely unquestionable thing here was only death itself, the inevitability of the author’s physical death. (124) . here was the tiresome little co-prisoner, with his shiny face, resembling the wax apple which Cincinnati’s waggish brother-in-law had brought the other day; there was the fidgety, lean lawyer, disengaging his shirt cuffs from the sleeves of his frock coat; there was the somber librarian, and, in smooth black toupee, corpulent Rodrig Ivanovich, and Emmie, and Marthels entire family, and Rodion, and others, vague guards and soldiers—and by evoking them—not believing in them, perhaps, but still evoking them—Cincinnatus allowed them the right to exist, supported them, nourished them with himself. (156) . ",
    "url": "/notes/other_books/invitation-to-a-beheading#favorite-quotes",
    
    "relUrl": "/notes/other_books/invitation-to-a-beheading#favorite-quotes"
  },"489": {
    "doc": "Language at the Speed of Sight",
    "title": "Language at the Speed of Sight",
    "content": "In short, reading is interesting. It’s complex, it’s essential, and there is an urgent need to reduce the number of people who read little or not at all and to ensure that future generations will be sufficiently literate to thrive in the world they will inhabit. Out of such elements emerged a science of reading and this book. | 93 million Americans read at basic or below basic levels | . ",
    "url": "/notes/educational_books/language-at-the-speed-of-sight",
    
    "relUrl": "/notes/educational_books/language-at-the-speed-of-sight"
  },"490": {
    "doc": "Language at the Speed of Sight",
    "title": "Writing Systems",
    "content": ". | writing systems were independently invented three times: Sumeria, China, and Mesoamerica | . Four crucial events to the development of writing: 1) Moving from depictions to symbols –&gt; moving on from the idea that a picture represented one real thing to the idea that symbols could represent abstract or concrete things 2) Representing entire languages –&gt; develop working writing systems for not just some objects or concepts but the entire language 3) Discovering phonology –&gt; speech consists of phonological units, and writing needed to evolve to represent that 4) Establishing congruence –&gt; properties of writing systems need to align with properties of spoken language . A word is a hub linking many types of information: its sound, pronunciation, and spelling; its multiple senses (e.g., drinking utensil, unit of measurement, trophy); the entities to which it refers (e.g., types of cups), as well as the sensory and perceptual properties of those entities, their functions, and how to use them; facts such as where they are made, bought, and kept and which is Mother’s favorite; their grammatical functions (e.g., “cup” is both noun and verb) and how the word combines with others to form expressions such as “sippy cup” and “cuplike.” The density of the information linked to a word reflects what the child knows about many things beyond a simple association between form and meaning. (110) . ",
    "url": "/notes/educational_books/language-at-the-speed-of-sight#writing-systems",
    
    "relUrl": "/notes/educational_books/language-at-the-speed-of-sight#writing-systems"
  },"491": {
    "doc": "Language at the Speed of Sight",
    "title": "Teaching Reading",
    "content": "third-trimester fetuses are already learning about statistical properties of their mother’s speech that make it English rather than Russian (87) . Reading to children is not the same as teaching children to read (114) . Reading to children serves a lesser-known function that is at least as important as introducing them to print: expanding their knowledge of spoken language (115) . | On the importance of reading to children | . Van Orden Effect - There was a long debate on whether reading is visual or phonological (sound-based), but van Orden did some tests that showed that phonological information is an essential skill in reading proficiency. I would start by changing teacher training, focusing preschools on language exposure, and modifying curricula and assessment practices to reflect differences in language background with particular attention to removing casual but pernicious biases and unfair comparisons. Much attention has recently focused on the role of personal traits such as self-motivation, tenacity, perseverance, and “grit” in achievement. I would add that engagement in a task such as learning to read also depends on success, and that failure is a strong disincentive, especially when it is in part built in. | Talking about african american vernacular english and how racial gaps in reading skills | . ",
    "url": "/notes/educational_books/language-at-the-speed-of-sight#teaching-reading",
    
    "relUrl": "/notes/educational_books/language-at-the-speed-of-sight#teaching-reading"
  },"492": {
    "doc": "Language at the Speed of Sight",
    "title": "Speed Reading",
    "content": "As the eye moves from left to right, it makes brief pauses, called fixations. The rapid jumps between fixations are called saccades. The number of fixations, the amount of time spent on each, and the size of the saccades are the major determinants of reading times. (The saccades themselves only add about twenty to thirty milliseconds each.) (63) . Some basic facts: . | About seven to eight letters are read clearly on each fixation. | Fixation durations average around 200 to 250 milliseconds (four to five per second). | Words in most texts are about five letters long on average. | 4 fixations per second = 240 fixations per minute | 240 fixations × 7 letters per fixation = 1,680 letters per minute | 1,680 letters/6 (five letters per word plus a space) = 280 words per minute | . This is why the inducement to “suppress subvocalization” in order to speed read is a sham (128) . | When talking about speed reading claims and whether they are valid. Seidenberg dismantles the three central ideas of speed reading: 1) take in more information at a time, 2) eliminate subvocalizations 3) eliminate regressive eye movements, as well as ideas that we can change the text to deliver information faster to the reader. Speed reading is a sham. | . ",
    "url": "/notes/educational_books/language-at-the-speed-of-sight#speed-reading",
    
    "relUrl": "/notes/educational_books/language-at-the-speed-of-sight#speed-reading"
  },"493": {
    "doc": "Language at the Speed of Sight",
    "title": "The Eternal Triangle",
    "content": "Dyslexia is thus the purposeful medicalization of normal behavior: both part of a normal distribution and treatable condition (158) . | Talking about whether dyslexia exists or is just the natural result of the bell curve of reading competency | . My view is that his observations about dyslexia are so shallow they shouldn’t merit serious attention (180) . | When talking about Maclolm Gladwell’s contention, in his 2013 book David and Goliath, that dyslexia might be a desirable difficulty. Seidenberg goes on to eviscerate the argument further | . ",
    "url": "/notes/educational_books/language-at-the-speed-of-sight#the-eternal-triangle",
    
    "relUrl": "/notes/educational_books/language-at-the-speed-of-sight#the-eternal-triangle"
  },"494": {
    "doc": "Podcasts",
    "title": "Podcasts",
    "content": ". | Data Lineage: Understanding Data Lineage at Scale with Julien Le Dem | Open Telemetry | . ",
    "url": "/notes/podcasts/listened-to-podcasts",
    
    "relUrl": "/notes/podcasts/listened-to-podcasts"
  },"495": {
    "doc": "Podcasts",
    "title": "Data Lineage: Understanding Data Lineage at Scale with Julien Le Dem",
    "content": "| podcast name | Data Skeptic | . | description | An overview of the OpenTelemetry project | . | listened on | 02/24/2022 | . | thoughts | While ostensibly about data lineage, they don’t much get into it until the very end. It’s mostly a history of data engineering, from its outset with Hadoop and HDFS at Yahoo through to the move towards SQL, to where we are now, which is a more mature space. They talk about storage formats like Parquet, or Apache Arrow, as well as compute engines like Spark or Flink, to orchestration/event platforms like Apache Pig or Airflow. Julien Le Dem is a highly regarded data engineer in the industry. | . | questions | Does event sourcing also fulfil this data lineage need? | . | more reading | https://softwareengineeringdaily.com/2021/07/12/data-lineage-understanding-data-lineage-at-scale-with-julien-le-dem/ | . ",
    "url": "/notes/podcasts/listened-to-podcasts#data-lineage-understanding-data-lineage-at-scale-with-julien-le-dem",
    
    "relUrl": "/notes/podcasts/listened-to-podcasts#data-lineage-understanding-data-lineage-at-scale-with-julien-le-dem"
  },"496": {
    "doc": "Podcasts",
    "title": "Open Telemetry",
    "content": "| podcast name | Data Skeptic | . | description | An overview of the OpenTelemetry project | . | listened on | 02/23/2022 | . | thoughts | OpenTelemetry Cloud Native Computing Foundation (CNCF) sponsored project and is an attempt to standardize service instrumentation. Broadly speaking, it is a set of specifications, APIs, and libraries/SDKs. You implement them in your services, and then you can implement a generic collector which all services pass data to. OpenTelemetry isn’t about the storage or viz layers of an observability stack, but rather standardizing the schemas for three types of observability signals: - metrics - logs - traces | . | questions | Where does the ELK stack fit into OpenTelemetry? | . | more reading | https://newrelic.com/blog/best-practices/what-is-opentelemetryhttps://github.com/open-telemetry | . ",
    "url": "/notes/podcasts/listened-to-podcasts#open-telemetry",
    
    "relUrl": "/notes/podcasts/listened-to-podcasts#open-telemetry"
  },"497": {
    "doc": "Making a Blog using Flask",
    "title": "Making a Blog using Flask",
    "content": "It’s been awhile since I’ve tried making a blog again, but instead of using Jekyll and md files (which might get me up and running in under an hour), I’m going to use Flask. Should be fun. I think one of the things I also want to work on learning better is Docker, as well as Makefile. ",
    "url": "/notes/projects/make-a-blog-with-flask",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask"
  },"498": {
    "doc": "Making a Blog using Flask",
    "title": "Tech",
    "content": ". | Flask (server code and presentation) | postgres (backend db) | gunicorn (WSGI HTTP server) | Docker (container) | Makefile (build scripting) | WSL2 (local development) | TBD - either Heroku, Netlify, LightSail, or other (hosting) | TBD (data layer hosting) | . ",
    "url": "/notes/projects/make-a-blog-with-flask#tech",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#tech"
  },"499": {
    "doc": "Making a Blog using Flask",
    "title": "Repository",
    "content": "https://github.com/mmcintyre1/silently-failing . ",
    "url": "/notes/projects/make-a-blog-with-flask#repository",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#repository"
  },"500": {
    "doc": "Making a Blog using Flask",
    "title": "Starting out - Getting the Dev Environment Up and Running",
    "content": "I think my first step is going to be getting a simple Flask app functioning in a docker container, then deploying that to Netlify. If I can start with the CI/CD so I can easily push changes live, it’ll allow me to concentrate on the stuff I know less well – presentation. The last app I hosted on Netlify was a jekyll app, so there was no data layer. Doesn’t seem like netlify offers any database services, but I can probably find something easy enough. ",
    "url": "/notes/projects/make-a-blog-with-flask#starting-out---getting-the-dev-environment-up-and-running",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#starting-out---getting-the-dev-environment-up-and-running"
  },"501": {
    "doc": "Making a Blog using Flask",
    "title": "Making the Repository and a Simple Flask App",
    "content": "All right, step 1 is making a repository structure for the Flask app. Flask recommends this structure, so that’s what I’ve gone with. I’ve got the project structure in this commit. I made templates and static folder as well, but they are empty so won’t be committed yet. I’ve created a virtual environment by using the command python -m venv venv and then running pip install flask. I can run this locally easily enough. First I run export FLASK_APP=silently-failing, then I run flask run. This will get me up and running locally. Looks like shit, but you have to start somewhere. ",
    "url": "/notes/projects/make-a-blog-with-flask#making-the-repository-and-a-simple-flask-app",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#making-the-repository-and-a-simple-flask-app"
  },"502": {
    "doc": "Making a Blog using Flask",
    "title": "Getting Docker and Docker Desktop with WSL2",
    "content": "Since I’m running in WSL2, I’m using Docker Desktop to make my life easier. I could probably run docker directly in WSL2, but Docker and Windows make that really silly. There’s a pretty good rundown of Docker’s integration with WSL2. I used the Windows docs for getting started with Docker and WSL2. As a side note, Microsoft’s documentation is normally exceptional. They have really upped their game. ",
    "url": "/notes/projects/make-a-blog-with-flask#getting-docker-and-docker-desktop-with-wsl2",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#getting-docker-and-docker-desktop-with-wsl2"
  },"503": {
    "doc": "Making a Blog using Flask",
    "title": "Doing the Docker thing",
    "content": "So now I need to build the docker container image, then run that container image. We can write out the instructions for building that container image in a Dockerfile, then we can build the container image via docker build then we can run that container via docker run. I’m following Docker’s guide. This is what my Dockerfile looks like right now. Now I can build the image using the command docker build --tag silently-failing . while in my applications root directory. Giving the image a name will make it easier to run commands later. The tag is in the format of name:tag, and leaving off the tag omits it from the image. Then, I can run the image container via docker run -d -p 5000:5000 silently-failing. | -d means in detached mode, so it runs in the background | -p publishes the ports within the container to outside the container | silently-failing tells it what image to run. | . Docker and caching, and some best practices . One interesting thing about docker is that each command is a layer, and there is a cache that is maintained that means every time you run docker build docker will look for an existing layer in its cache, and if one exists it uses that instead of building a new one. This build cache is super important, and it’s why you see things like these commands separated: . | 1 2 3 4 5 . | COPY requirements.txt / RUN pip3 install -r /requirements.txt COPY . /app WORKDIR /app . | . This is a really helpful page to read through: Best practices for writing a Dockerfile . There is also a bit of chatter on running Docker images as root user and how you generally shouldn’t be doing it. Since a docker container is running on the same kernel as the host, there isn’t the typical separation of layers that you might see with a virtual machine. For some use cases it doesn’t really matter since the application you might run doesn’t actually run as root, for example, nginx. Difference Between CMD and ENTRYPOINT . I’ve written my Dockerfile with CMD, but I’ve seen ENTRYPOINT used as well. Here’s a pretty decent resource on the topic, but it seems to boil down to whether or not you want your commands to be able to overridden at the command line when starting the image. Your Dockerfile needs either a CMD or an ENTRYPOINT. I’m using the command python3 -m flask run --host=0.0.0.0, but if I wanted to use python3 -m flask shell, I can do that easily by running the command docker run silently-failing flask shell. ",
    "url": "/notes/projects/make-a-blog-with-flask#doing-the-docker-thing",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#doing-the-docker-thing"
  },"504": {
    "doc": "Making a Blog using Flask",
    "title": "Adding in Gunicorn",
    "content": "So now I want to add in a web server to replace the simple one Flask gives. The web server just needs to implement WSGI and will integrate with Flask as Flask is expecting WSGI. The wikipedia for WSGI is a pretty good resource for more information. Need to update the Dockerfile. I’m loosely using this as a resource, but instead of using a shell script I’ll just pass in the start up commands via CMD. This is what my Dockerfile looks like now. Another thing I’ve noticed is that in working with docker, I am running docker build a bunch, and I have a ton of images I need to go through and delete. This is easy enough via Docker Desktop, but surely there is a better way to manage the lifecycle of these containers and clean up detritus. ",
    "url": "/notes/projects/make-a-blog-with-flask#adding-in-gunicorn",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#adding-in-gunicorn"
  },"505": {
    "doc": "Making a Blog using Flask",
    "title": "Simplifying Docker Stuff with Docker Compose",
    "content": "Typically Docker Compose is used to run multi-container apps, like if we were going to run a flask/gunicorn container, an nginx container, and postgres container all with the same docker-compose command. It also makes it much lighter than typing out the same long-winded docker run -d -p 8050:8050 silently-failing, and it allows me to mount volumes outside of the container to within the container so I don’t need to constantly be rebuilding the container itself after every file update. Putting together a docker-compose.yml file was easy as pie using this documentation, but I spent a bit longer than I’m comfortable admitting working on how to get hot reloading working. At first I was futzing around with the mounted drives, then I was trying to pass in environment variables via a .env file and the env_file command in the docker-compose.yml file (I might go back to this, as the way I currently have it is using debug=True in the main block in my flask app file). Finally, I realized that I was missing a --reload directive to my gunicorn command. Adding that in, and things worked perfectly. Just needed to go back and clean up all the things that didn’t work, since I was kind of throwing things at the wall for a bit there and I’m not sure what the side effects are of things I was doing. Anyway, on to a simple makefile. ",
    "url": "/notes/projects/make-a-blog-with-flask#simplifying-docker-stuff-with-docker-compose",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#simplifying-docker-stuff-with-docker-compose"
  },"506": {
    "doc": "Making a Blog using Flask",
    "title": "Making make files",
    "content": "So a makefile should give us a nice entry into build and run commands. I don’t think I need to run gunicorn in dev since the Flask HTTP server is suitable. There might be some argument to running gunicorn in dev just so dev and live are as synonymous as possible (12 Factor App: Dev/prod parity). I don’t really have an opinion right now. The commands I think I want are . | build | run-dev | run-live | kill | . The way I implemented this for now is to have separate commands for dev and live, but I think I’d much rather be able to set an environment variable for development or production and have that determine what needs to run. Less overhead and duplication maybe? Relevant commit . ",
    "url": "/notes/projects/make-a-blog-with-flask#making-make-files",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#making-make-files"
  },"507": {
    "doc": "Making a Blog using Flask",
    "title": "Building and Hosting the application",
    "content": "Netlify or something else? . So when choosing a platform to run my blog, I had originally thought Netlify, but Netlify only hosts static content. Makes sense for a jekyll blog since it’s a glorified router to md files, but for flask which needs to run a backend server so Netlify isn’t as suitable. I heard something about Netlify functions, but that means the architecture of the app would need to change. I’m not sure if the idea is you’d have server functions like getting a blog post or deleting a blog post implemented each in a function and your web server is just routing to those functions and controlling presentation? Anyway, seems a bit too complicated. I just want to point a hosting site at a github repo, tell it to redeploy on updates to master, give it a command to run to start my web server, and potentially give me access to a data layer. Heroku . Some options for Flask that I’ve heard are pythonanywhere and Heroku. Heroku is the first one I tried and seems to fit all the use cases, but it’s what I’m going with for now. If I want to change it in the future it shouldn’t be too hard. I have my DNS taken care of by Route 53 in AWS, so changing backend is just swapping where my CNAME points. Another option was some of the options one step up from free, so things like EC2, Lightsail, Azure, etc. The downside is those cost money, I’d have to spin my own CI and CD (using GitHub actions makes that relatively trivial), and the other options are free. Free tier is the only thing that makes sense for small sites. The idea is that your low traffic site is being subsidized by the big players, so paying early on in a site’s existence doesn’t make a ton of sense, especially when elastically growing into a paid tier is so easy. First thing is create a Heroku account. I did that through the web UI. Don’t forget MFA! . After that, I worked primarily with the CLI in my WSL. I ran into a problem where I created the site in the web UI first, then I couldn’t figure out the command to switch apps in the CLI, so I ended up deleting the site and just running heroku create silentlyfailing through the CLI. I was interested in how heroku was using git and here is a good Stack Overflow answer on it. It works like how you would expect git to work, but I haven’t used git for anything other than GitHub, so it’s cool to see the tech. The tutorial I was generally following was Heroku’s own . Heroku Dynos . I’m not sure where the term “dynos” comes from, but these represent container types available. In practice, they are a way to gate certain functionality. For me, I was concerned with two things: 1) uptime 2) HTTPS. With the free dyno, you have to manage your own HTTPS certificates, and your site is taken offline after 30 minutes of inactivity before being started again. For the $7 a month hobby dyno, you get managed certs and no downtime, which seems like a small investment. Additionally, the price is prorated to uptime, so if you take your site down you aren’t paying for capacity. More information on dynos here. Heroku Procfiles . Once Heroku starts up a server, I need to give it a command so it knows what it should do. This takes the form of a Procfile. For now mine is very simple: web: gunicorn silentlyfailing:app. This Procfile represents a divergence from how the app runs locally, which is through docker. You can run the Procfile locally through heroku local web, but I found you need to install requirements and the database won’t work, so I will prefer to use docker for now. The risk is that I need to manually keep my dev environment and the Heroku environment similar, but that isn’t such a large problem for such a small app. DNS Stuff . Heroku, like all hosting sites, uses some sort of variation on {your-app-name}.{sites-base-name}.com. I used Heroku’s guide on configuring your site with Route 53. I have my apex domain, silentlyfailing.com redirecting to an S3 bucket, which is then redirecting to www.silentlyfailing.com, which is ultimately pointed to Heroku’s DNS servers. You also need to add your domains to Heroku, either via the CLI or within the UI. Not sure why, but Heroku says it’s to “to properly route traffic for specific domains to the right application on Heroku”. I’m not smart enough to parse that one out. Maybe some header information? . On the alias record to direct to an S3 bucket back to the www subdomain, Heroku doesn’t provide an explanation other than to say “Your domain example.com now redirects to www.example.com in a scalable way”. Is there something scalable, or is this a way to easily add subdomains? Not sure on this one either, I’m barely above drowning when it comes to network stuff. One day I need to sit down and read all about this stuff. Deploying . Since Heroku manages files via git, you could push your code directly to your app via git commands and setting the remote to your heroku app, but since I’m already using GitHub, I think it’s easier to just enable the GitHub integration that already exists. You integrate your GitHub and Heroku accounts, point Heroku to the relevant repository, and off it goes. I think it works by setting up webhooks that trigger commits to master in your GitHub repository to push those changes out to your heroku app and trigger a rebuild your heroku app. But things just work. Now on to actually working on the app. ",
    "url": "/notes/projects/make-a-blog-with-flask#building-and-hosting-the-application",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#building-and-hosting-the-application"
  },"508": {
    "doc": "Making a Blog using Flask",
    "title": "Time to Actually Make the Damn Blog",
    "content": "But before that, I had to do some quick work with my make commands to change how they pulled environment variables. I was declaring my FLASK_APP all over the place, so instead, I could just include a reference to my .env.dev in my Makefile and the docker-compose-dev.yml file, and then I could call the environment variable via ${FLASK_APP}. This way, I only need to change it in one spot, that .env file. Secret Keys and Factories . I was reading through Flask’s Tutorial and they have you create an application factory, so I borrowed the logic there to create things. They recommend a SECRET_KEY so I have one I’ve plopped into my .env.sample file as well as one I have on Heroku, so I can do something simple like this: SECRET_KEY=os.getenv('SECRET_KEY', 'dev') to and pass that into app.config.from_mapping() to set a secret key for dev and live. The only other thing I had to update when I changed from an app to an app factory was the reference in my manage.py. Originally, I was importing app from silentlyfailing, but now I import my create_app function and pass that into the FlaskGroup init. Code here. Quick update – this failed to deploy, so I needed to update my Procfile to web: gunicorn \"silentlyfailing:create_app()\" to actually call the function, which took care of the deploy. Doing the Database Thing . So now I need to make a database to store all my wonderful blog posts and musings. I think the idea here is to use sqlalchemy to encapsulate database creation, and alembic to handle migrations. The first step here is getting a postgres instance up and running locally, so I’ll first need to modify my docker-compose file to add in the postgres service, then I’ll need to probably update my app factory to connect to the database and pull whatever connection variables it needs from the environment, then build out some database models, etc., etc. Finally, I’ll need to update my Heroku app to start the server and run the database migrations via alembic. After I get all this done, I should finally be able to start building out the application. A note about backups . One of my considerations here is actually whether the data in my heroku postgres is reliably stored, and whether it persists in some fashion or another. The blog posts themselves will reside within the database, and they are the value prop here, so I’d hate to lose them. One avenue I could explore would be to use Flask to render static content via markdown files and not require a database at all. I’m not sure flask is suited for static sites or if there is an alternative technology that might be better. Need to do some investigation. I think I’d feel more comfortable hosting on RDS, but from experience that runs $15-30 a month for micro or small t instances. Setting up my dev postgres . So the first thing I did was set up the postgres service in my local dev environment. I needed to add in some environment variables, and according to the postgres Docker documentation the only required environment variable is POSTGRES_PASSWORD, but I included each element of the URI string in environment variables. I updated the docker compose file, and then I modified the way configuration variables were passed in to the application by using a config.py file with some minor inheritance. One of the workarounds I had to do was in the ProductionConfig class, the environment variable is different on Heroku – they give you a full DATABASE_URL as opposed to each element, so there is some inconsistency with dev and live. In the future I’d like to modify this to be more consistent. Since all three of those config classes are evaluated at runtime, I had to replace os.environ[KEY] with os.getenv(KEY, default_value) since those environment variables aren’t set in live. I might be able to break up that DATABASE_URL heroku gives into individual parts. I also updated the Makefile to include killing off the db container in addition to the web container. Finally, I needed to do a quick modification of the DATABASE_URL that Heroku gives me, since SQLAlchemy is expecting postgresql, not postgres, at the beginning of the URI. Setting up SQLAlchemy . I want to use an ORM here so I don’t need to worry about database-specific semantics. The general recommendation here is SQLAlchemy, but I’ve also heard peewee recommended. I’ve worked with SQLAlchemy in the past, so that’s what I’ve used here. I created a models.py file, initialized a SQLAlchemy database instance, and defined a really simple Cats model for testing purposes. I simplified the app factory, removing superfluous things for now (I’ll probably add back in the test_config if/else so I can pass in test_config parameters for testing purposes by creating an instance of the app). One other item I needed to take care of was because I am using the application factory pattern (the primary use case seems to be for either testing or process-sharing purposes), I needed to push an application context so the database could use it. Looks something like this: . | 1 2 3 . | with app.app_context(): db.init_app(app) db.create_all() . | . I’m not entirely sure what an app context is, but there is more information here. I think more might be revealed as I continue work on the blog and add in tests. One other item of note is that running against postgres in SQLAlchemy requires some additional binaries, so I needed to updated the Dockerfile to install those binaries, and pip installed psycopg2 and psycopg2-binaries. From here, I can connect to both my local postgres and heroku postgres, and I see that the table is created. Setting up Alembic for migrations . Last bit before I can actually work on the app, but I want to use a utility to track database migrations. I don’t anticipate a ton of changes to the database schema, but migrations are a great way to track schema changes and iteratively develop without destroying all your previous data. Alembic is a great library for doing this. The idea with Alembic is to create a Migration object, associate your app with it, then run the commands flask db init to create a migrations folder and seed it with some files. Then you can run flask db migrate to generate a revision file that you manually review. Everything within the migrations folder gets checked in to github. Alembic will essentially compare your models to the database and generate a diff and the SQL statements will be generated and called via python code. Finally, when you deploy, you can add a little command to Heroku (semi-colon delimited) to run all the migrations to get the live database up to date with your newly pushed schema. I’m starting to get my mind around how these extensions work. This stackoverflow answer is super helpful in breaking down what that init_app does and when to use it and when not to use it. I also updated the docker-compose file to handle migrations in a separate container. These migrations run once, then the container is removed. Breaking it out this way makes it easy to modify that particular part of the compose, or remove it as needed. Tidy separation of purposes. Right now the migrations could still just be called as part of the web container by adding the upgrade db call to the command, but this gives me a bit of flexibility in the future. I ran into a weird problem that I need to investigate though, which is that my configuration file does not seem to be pulling from environment variables I set in the docker-compose. I have my environment set on the docker-compose for my POSTGRES_HOST to be postgres, but in the DevelopmentConfig class in the config.py file, I am using os.getenv('POSTGRES_HOST', 'localhost'). When the flask app running in a docker container needs to connect to the postgres database, the internal network docker sets up will have the host be the container name, in this case postgres. But outside of the container, I can connect to it via localhost. All of this is to say that the flask app in the container is pulling the default value, so I must be missing environment variables somewhere. Workaround to the above – I figured out what was happening. I was setting the POSTGRES_HOST on the db container, not the web container in my docker-compose. Passing in the POSTGRES_HOST via the .env.dev file, which is only used by docker and the Makefile, means I can set the default to localhost, so I can run the flask server via the command line outside of the container while the database is up inside the container. Once I run docker-compose, I have 4 services, the base image, the web image, the migrations image and the postgres image. I can connect to the database just using localhost since I’ve published the ports. One final item: I added a bit to the docker-compose to ensure that the web and migrations service don’t start until the database is up. The way I achieved this was to add a healthcheck to the db service, then add in a depends on the db with a condition for the service to be healthy to the web and migrations service. I can’t add to the base service because services with depends on can’t be extended. **MM’s note: I seem to use containers and services interchangeably. Need to hammer out that vocabulary. Building the models and controllers . I am going to separate presentation entirely from how I get or post data. That way, I can swap out front end easily. You could probably pass python objects directly to the view to render, by I think I’ll prefer to pass json objects to the views. What I think I need to do here is to create a blog model, a method to get blog objects from the database, and a method to write blog objects to the database. I probably also need a login method, or some way to prove I’m admin and keep me in an authenticated session. I want to wrap that method to write in some sort of authentication. I probably don’t need to store any user info in the database, just check a password against some environment variable. Setting up an admin account and login/logout . I want to be able to have a single admin account that is allowed to create, update, and delete blog posts. This means I need to also have a login mechanism, as well as write that username and password to the database. I am using the flask-login library, which handles session data for logging a user in or out. From what I can see, it provides convenience functions and decorators for setting app state about a user being ‘authenticated’, as well as cookie management for longer sessions. You need to add your own password checking logic. I’ll probably want to replace this in the future, as I’m hashing my own passwords – it looks like FlaskSecurity might be a good choice since it threads together a lot of lower level libraries. It also claims it provides easier OAuth integration, which might be good for some use cases. First thing I did was to create a User class, inheriting both db.Model and flask-login’s UserMixIn. The former gives me access to all the query convenience functions, and the latter implements four methods to help flask-login. I also added in my own rudimentary hashing and password checking methods via set_password and check_password. It’s important to note that flask-login doesn’t actually seem to handle the checking of passwords, and it’s something you need to do yourself. For example, if I didn’t have the user.check_password) check below, nothing is stopping the user from being “logged in”. | 1 2 3 . | user = User.query.filter_by(username=form.username.data).first() if user and user.check_password(password=form.password.data): login_user(user) . | . From there, I created a routes.py file to hold all my app routes. At some point in the future, you can break out subdomains in your app into separate route files, like blog_routes.py or within a different directory, but I haven’t yet. No need – I’ll only have 6 or 7 routes. The first thing I did was to initialize the plugin via LoginManager(). I also added that to my app factory and ran the init_app method. I also made a blueprint for the routes so I could set the decorator correctly. I don’t want to import my create_app function to routes.py there, so I can create a blueprint then register it with the app in my __init__. Something like this: . | 1 2 3 4 5 6 7 8 9 10 . | # routes.py sf = flask.Blueprint('sf', __name__) @sf.route('/login', methods=['GET', 'POST']) def login(): # __init__.py with app.app_context(): # register blueprints app.register_blueprint(sf) . | . After that, I need to implement a few methods: . | load_user, with @login_manager.userloader as a decorator -&gt; this is used by flask-login to load the user info on every page load. | login, which will allow me to login a user | logout, which, you guessed it, logs a user out | unauthorized, with a login_manager.unauthorized_handler, which handles when a user tries to access a resource they are not allowed to access | . Most of these methods are straightforward. The first thing I did was to create a forms.py file to handle the login form. I need to take user input and check it against the database to see if it’s accurate. I used flask_wtf and wtforms for the task. The code was real simple. Next was some basic html. First I made a base.html file which I will extend for various purposes. This saves a ton of code, of course, and keeps the HTML relatively modular. After base.html, I made a login.html, borrowing a bunch from all sorts of sources. One interesting thing that I found was the command flask.flash doesn’t really do anything unless you get and display the messages. You need something like the below to display them. | 1 2 3 4 5 6 7 8 . | {% for message in get_flashed_messages() %} &lt;div class=\"alert alert-warning\"&gt; &lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\"&gt; x &lt;/button&gt; {{ message }} &lt;/div&gt; {% endfor %} . | . The final piece of work was to set up an admin account. I set some variables in my environment to pull a username and password to create an admin account if it doesn’t already exist. I wrote out a small function for it, and called it during the creation of my app. One interesting thing I couldn’t figure out, however, was I was running into a null constraint violation. From everything I was reading, if you had a db.Integer column set as a primary key, you wouldn’t need to pass a value into it for that integer to just auto-increment. That wasn’t seeming to work for me, so I needed to pass in a value myself, like this: user = User(id=1, username=username). There is only one admin user anyway, so this is fine. This will protect against the creation of any additional admin users, so it might actually be a feature, not a bug. One other thing of note is that there is probably a design pattern to pull in data from a form, jsonify it, then pass that into my login (or any function that needs form info). This would allow me to decouple view from route/api logic. Routes shouldn’t expect to be passed form data, but json objects. Nice to have for the future. Admin edit view . So, now that I have my admin user, I need to create a handful of items for creating, editing, and displaying blog posts. I need to make the following items: . | create.html | update.html | blog_details.html | route for create | route for update | route for detail | route for delete | a form for create | a form for update | a blog data model | . Need to change way routing is pathed – make slugs and not pull via id from database. Also something seemed to break with alembic where it wasn’t detecting changes. Seems like it actually can’t detect changes. Turns out I’m an idiot. Played with so many settings to reorganize the application, but it was because I was creating the tables myself via a create_tables function. flask_migrate should take care of that entirely via flask db migrate and flask db upgrade. In live, I can run flask db upgrade and be done with it. post detail wyswyg/rich text editor for blog post? . Finishing with Style . Adding a navbar . Adding a footer . Making it not so damn ugly . Final Takeaways . Flask allows a ton of customization, but you could probably be up and running faster with Django. Useful Commands . | docker exec -it silentlyfailing bash - start an interactive console in the docker container | heroku restart - restarts your current heroku app, which is useful for odd errors | heroku logs --tail - check the logs | export $(xargs &lt;.env) sets a bunch of env variables | docker rm -fv $(docker ps -aq) remove all docker containers | . ",
    "url": "/notes/projects/make-a-blog-with-flask#time-to-actually-make-the-damn-blog",
    
    "relUrl": "/notes/projects/make-a-blog-with-flask#time-to-actually-make-the-damn-blog"
  },"509": {
    "doc": "Making a magic mirror",
    "title": "Making a magic mirror",
    "content": " ",
    "url": "/notes/projects/making-a-magic-mirror",
    
    "relUrl": "/notes/projects/making-a-magic-mirror"
  },"510": {
    "doc": "Making a table top arcade",
    "title": "Making a table top arcade",
    "content": " ",
    "url": "/notes/projects/making-a-tabletop-arcade",
    
    "relUrl": "/notes/projects/making-a-tabletop-arcade"
  },"511": {
    "doc": "Red Mars",
    "title": "Red Mars",
    "content": "Despite being published 20 years prior to the ministry of the future, I can see the same sort of approach to narrative, to world-building, in red mars. The book follows a few different third person focused narrators of the original first 100 to Mars, and it is mostly a slow burn until the last 50 or so pages, when nearly everything falls apart. robinson seeds future plot points early, only for them to pay off in the final chapters. I wouldn’t say his strength is narrative – action happens almost indirectly. but robinson has built an amazingly convincing world of mars, one that is mostly believable. one of the things I keep coming back to while reading this, especially after reading how the world really works is the impossible cost of energy that all this martian civilization would require. the energy infrastructure alone is staggering, and in this book you have these atom reclaimers that literally pull molecules from the sky to build other molecules. the energy cost of that sounds like it would be astonishing. this does come close to scratching that same sort of itch that Cixin Liu’s series has, a science fiction novel that is alive with ideas. I would think this is more speculative fiction than strictly science fiction, but they both go to the same parties and have mostly the same friends. I really liked the space elevator, although I still can’t really wrap my head around how it works. Also, any future space that doesn’t have corporations (in this book called transnationals) taking over things is delusional. Also the gene therapy that might make people live forever is fun. Playing with the cultural connotations is a good time, and what else would result but a fierce increase of the schism between rich and poor, between mortal and immortal, and thus lead to chaos? . this book is one of dichotomies, between the fundamental duality of creation and destruction that humanity can summon, between green earth and red mars, terran and areolian. everywhere man goes, they make in their own image, including turning red mars into blue mars. the book ends with a ragtag contingent of the original 100, numbers severely diminished, joining their long lost sister Hiroko, who left Underhill, the first civilization, several decades prior. There is a promise of starting a new martian civilization in the wake of all the carnage. Frank Chalmers and John Boone and Arkady Bogdanovich are dead, many of the other first 100 are dead, but those that remain might be virtually immortal. looking forward to green mars and then blue mars. ",
    "url": "/notes/other_books/mars-triology",
    
    "relUrl": "/notes/other_books/mars-triology"
  },"512": {
    "doc": "Red Mars",
    "title": "Green Mars",
    "content": "Narratively, Green Mars is pretty straight ahead. In the wreckage left by the last book, the “revolutionary” contingent of Martian factions have been scattered to the wind and are mostly underground, although they are increasingly laissez-faire about hiding. The novel starts with Hiroko’s settlement, Zygote, and one of her many children, Nirgal. These children are the first true descendants of Mars, born and raised and ideologically forged in its red fines and increasingly molten surface. The volcanoes are a by-product of trying to introduce more oxygen into the atmosphere, to make Mars livable on the surface without protection, as part of a move for viriditas, or making Mars green. Meanwhile back on Earth the transnational corporations have coalesced with countries in a non-hostile takeover and now rule the roost. It is a dystopian view claiming the inevitable trajectory of firms and countries is that firms will overpower countries and say what you want about nationalism, it is often more unifying and less dehumanizing than the relentless pursuit of profit. Stylistically, green mars follows a similar approach as red mars; chapters in third person limited POV and following either one of Hiroko’s children, or one of the few remaining first 100, e.g., Sax, Anne, Nadia, Maya, Michel, etc. The book explores themes of recursion and recurrence. Many of the characters in the book are likened to now dead first 100s – Nirgal as John Boone, Jackie as Maya, Art, the offworlder from the Praxis corporation sent to foment a free Mars as Frank Chalmers. There is a constant referral to the revolt of ‘61 and it’s disastrous consequences. Mars occupies an interesting place in the human psyche, especially in the second half of the 20th century and onwards. The frontier is always expanding – humankind has been bent on attaining the unknown, fingers grasping at the horizon. Mars might be the last great frontier until we can leave the solar system, and in it is offered a reflection of the beholder. To some, it is a pristine Eden for humans to live in harmonious neutrality on. For others, it is a second chance, to take what we have learned and build something great without the scar tissue of a thousand years of mistakes. For others it is the next step and there is nothing more natural than walking inexorably towards it. And still for others, it is base camp for the inevitable human diaspora to distant lands beyond. And in that first single step all others are foretold. ",
    "url": "/notes/other_books/mars-triology#green-mars",
    
    "relUrl": "/notes/other_books/mars-triology#green-mars"
  },"513": {
    "doc": "Red Mars",
    "title": "Blue Mars",
    "content": " ",
    "url": "/notes/other_books/mars-triology#blue-mars",
    
    "relUrl": "/notes/other_books/mars-triology#blue-mars"
  },"514": {
    "doc": "Measure What Matters",
    "title": "Measure What Matters",
    "content": "John Doerr, 2017 . | OKRs | Management by Objectives (MBO) | Four Superpowers of OKRs . | 1: Focus and Commit to Priorities | 2: Align and Connect for Teamwork | 3: Track for Accountability | 4: Stretch for Amazing | . | Continuous Performance Management | Culture | Thoughts | . Ideas are easy. Execution is everything. ",
    "url": "/notes/business_books/measure-what-matters",
    
    "relUrl": "/notes/business_books/measure-what-matters"
  },"515": {
    "doc": "Measure What Matters",
    "title": "OKRs",
    "content": "Objectives and Key Results is a collaborative goal-setting protocol for companies, teams, and individuals . OBJECTIVE - WHAT is to be achieved . | significant, concrete, action-oriented, and ideally, inspirational | vaccine against fuzzy thinking and fuzzy execution | . KEY RESULTS - HOW we get to the objective . | specific, time-bound, aggressive yet realistic | need to be measurable and verifiable | . We will achieve a certain OBJECTIVE as measured by the following KEY RESULTS . | OKRs surface primary goals, channeling effort and coordination | link diverse operations, lending purpose and unity to entire org | hard, specifically worded goals drive performance more effectively than easy, vague ones | also drive engagement, and more highly engaged workers and teams equals more profit, less attrition, more job satisfaction | . ",
    "url": "/notes/business_books/measure-what-matters#okrs",
    
    "relUrl": "/notes/business_books/measure-what-matters#okrs"
  },"516": {
    "doc": "Measure What Matters",
    "title": "Management by Objectives (MBO)",
    "content": ". | precursor to OKRs | early management theory of Frederick Winslow Taylor and Henry Ford held that most efficient and profitable organization is authoritarian | scientific management is “knowing exactly what you want men to do and then see that they do it in the best and cheapest way” | later, Peter Drucker came along with results-driven and humanistic change – corporation should be a community, subordinates consulted on company goals | Andy Grove of Intel took these principles, which were typically for manufacturing, and applied to “soft professions” | key question: how do you measure productivity of knowledge workers and distinguish output and activity | . ",
    "url": "/notes/business_books/measure-what-matters#management-by-objectives-mbo",
    
    "relUrl": "/notes/business_books/measure-what-matters#management-by-objectives-mbo"
  },"517": {
    "doc": "Measure What Matters",
    "title": "Four Superpowers of OKRs",
    "content": "1: Focus and Commit to Priorities . | Set the appropriate cadence for your OKR cycle. I recommend dual tracking, with quarterly OKRs (for shorter-term goals) and annual OKRs (keyed to longer-term strategies) deployed in parallel. | To work out implementation kinks and strengthen leaders’ commitment, phase in your rollout of OKRs with upper management first. Allow the process to gain momentum before enlisting individual contributors to join in. | Designate an OKR shepherd to make sure that every individual devotes the time each cycle to choosing what matters most. | Commit to three to five top objectives—what you need to achieve—per cycle. Too many OKRs dilute and scatter people’s efforts. Expand your effective capacity by deciding what not to do, and discard, defer, or deemphasize accordingly. | In choosing OKRs, look for objectives with the most leverage for outstanding performance. | Find the raw material for top-line OKRs in the organization’s mission statement, strategic plan, or a broad theme chosen by leadership. | To emphasize a departmental objective and enlist lateral support, elevate it to a company OKR. | For each objective, settle on no more than five measurable, unambiguous, time-bound key results—how the objective will be attained. By definition, completion of all key results equates to the attainment of the objective. | For balance and quality control, pair qualitative and quantitative key results. | When a key result requires extra attention, elevate it into an objective for one or more cycles. | The single most important element for OKR success is conviction and buy-in by the organization’s leaders. | . 2: Align and Connect for Teamwork . | Incentivize employees by showing how their objectives relate to the leader’s vision and the company’s top priorities. The express route to operating excellence is lined with transparent, public goals, on up to the CEO. | Use all-hands meetings to explain why an OKR is important to the organization. Then keep repeating the message until you’re tired of hearing it yourself. | When deploying cascaded OKRs, with objectives driven from the top, welcome give-and-take on key results from frontline contributors. Innovation dwells less at a company’s center than at its edges. | Encourage a healthy proportion of bottom-up OKRs—roughly half. | Smash departmental silos by connecting teams with horizontally shared OKRs. Cross-functional operations enable quick and coordinated decisions, the basis for seizing a competitive advantage. | Make all lateral, cross-functional dependencies explicit. | When an OKR is revised or dropped, see to it that all stakeholders know about it. | . 3: Track for Accountability . | To build a culture of accountability, install continuous reassessment and honest and objective grading—and start at the top. When leaders openly admit their missteps, contributors feel freer to take healthy risks. | Motivate contributors less with extrinsic rewards and more with open, tangible measures of their achievement. | To keep OKRs timely and relevant, have the designated shepherd ride herd over regular check-ins and progress updates. Frequent check-ins enable teams and individuals to course-correct with agility, or to fail fast. | To sustain high performance, encourage weekly one-on-one OKR meetings between contributors and managers, plus monthly departmental meetings. | As conditions change, feel free to revise, add, or delete OKRs as appropriate—even in mid-cycle. Goals are not written in stone. It’s counterproductive to hold stubbornly to objectives that are no longer relevant or attainable. | At the cycle’s end, use OKR grades plus subjective self-assessments to evaluate past performance, celebrate achievements, and plan and improve for the future. Before pushing into the next cycle, take a moment to reflect upon and savor what you’ve accomplished in the last one. | To keep OKRs up-to-date and on point, invest in a dedicated, automated, cloud-based platform. Public, collaborative, real-time goal-setting systems work best. | . 4: Stretch for Amazing . | At the beginning of each cycle, distinguish between goals that must be attained 100 percent (committed OKRs) and those that are stretching for a Big Hairy Audacious Goal (a BHAG, or aspirational OKR). | Establish an environment where individuals are free to fail without judgment. | To stimulate problem solving and spur people to greater achievement, set ambitious goals—even if it means some quarterly targets will be missed. But don’t set the bar so high that an OKR is obviously unrealistic. Morale suffers when people know they can’t succeed. | To get leaps in productivity or innovation, follow Google’s “Gospel of 10x” and replace incremental OKRs with exponential ones. That’s how industries get disrupted and categories reinvented. | Design stretch OKRs to fit the organization’s culture. A company’s optimal “stretch” may vary over time, depending on the operating needs of the coming cycle. | When a team fails to attain a stretch OKR, consider rolling the objective over to the next cycle—assuming the goal is still relevant. | . ",
    "url": "/notes/business_books/measure-what-matters#four-superpowers-of-okrs",
    
    "relUrl": "/notes/business_books/measure-what-matters#four-superpowers-of-okrs"
  },"518": {
    "doc": "Measure What Matters",
    "title": "Continuous Performance Management",
    "content": ". | To address issues before they become problems and give struggling contributors the support they need, move from annual performance management to continuous performance management. | Unleash ambitious goal setting by divorcing forward-looking OKRs from backward-looking annual reviews. Equating goal attainment to bonus checks will invite sandbagging and risk-averse behavior. | Replace competitive ratings and stack rankings with transparent, strength-based, multidimensional criteria for performance evaluations. Beyond the numbers, consider a contributor’s team play, communication, and ambition in goal setting. | Rely on intrinsic motivations—purposeful work and opportunities for growth—over financial incentives. They’re far more powerful. | To power positive business results, implement ongoing CFRs (conversations, feedback, and recognition) in concert with structured goal setting. Transparent OKRs make coaching more concrete and useful. Continuous CFRs keep day-to-day work on point and genuinely collaborative. | In performance-driving conversations between managers and contributors, allow the contributor to set the agenda. The manager’s role is to learn and coach. | Make performance feedback two-way, ad hoc, and multidirectional, unconstrained by the org chart. | Use anonymous “pulse” surveys for real-time feedback on particular operations or general morale. | Strengthen connections between teams and departments with peer-to-peer feedback, in conjunction with cross-functional OKRs. | Employ peer recognition to enhance employee engagement and performance. For maximum impact, recognition should be frequent, specific, highly visible, and tied to top-line OKRs. | . ",
    "url": "/notes/business_books/measure-what-matters#continuous-performance-management",
    
    "relUrl": "/notes/business_books/measure-what-matters#continuous-performance-management"
  },"519": {
    "doc": "Measure What Matters",
    "title": "Culture",
    "content": ". | Align top-line OKRs with an organization’s mission, vision, and North Star values. | Convey cultural values by word, but most of all by deed. | Promote peak performance with collaboration and accountability. When OKRs are collective, assign key results to individuals—and hold them accountable. | To develop a high-motivation culture, balance OKR “catalysts,” actions that support the work, with CFR “nourishers,” acts of interpersonal support or even random acts of kindness. | Use OKRs to promote transparency, clarity, purpose, and big-picture orientation. Deploy CFRs to build positivity, enthusiasm, stretch thinking, and daily improvement. | Be alert to the need to address cultural barriers, especially issues of accountability and trust, before implementing OKRs. | . ",
    "url": "/notes/business_books/measure-what-matters#culture",
    
    "relUrl": "/notes/business_books/measure-what-matters#culture"
  },"520": {
    "doc": "Measure What Matters",
    "title": "Thoughts",
    "content": "There’s seldom a business book where the epitaph “could’ve been a blog post” doesn’t apply. This book is no exception. Ensconced in a compendium of self-fulfilling case studies justifying this particular management methodology (of course it worked for company x, otherwise it wouldn’t be in the book) is an interesting idea, that you are what you measure. You define Objectives, which are the aspirational what of what you want to achieve, and Key Results, or the quantifiable how of how you will achieve that what. But don’t expect for this book to give heuristics on finding what matters. This is a book for justifying its website and consultancy fees, a book credentialing itself with a who’s who of Silicon Valley buddies that John Doerr has worked with during his illustrious career. Ok, that criticism might not be entirely fair. I did quite enjoy the case studies, and there might not be a more credentialed venture capitalist (Walter Isaacson calls him “the most important venture capitalist of our era” on the back jacket) to give this advice. One thing I find immensely valuable as a technologist, under the notion that most problems aren’t new or haven’t been solved at least once before, is learning about how other companies have solved their problems, and while I typically concentrate on technology, people and process problems can be just as insightful, if not filled with a bit more subjective hokum and methodology peddling. OKRs work, but like so many other management ideologies, they work because they are deliberate in the actions they argue for, the culture they foster. They form the chaos of intentionless business practice, salve the cut between HR-mandated practice adhered to by rote and work in the trenches. Everyone has worked for a manager who, if asked what their job entails as manager, might regurgitate some vague notions of “people” skills straight from their job description, but methodologies like OKR might enforce a more thoughtful approach to what it means to be a people manager, what it means to inspire. Outside of being a potentially useful management tactic, there might be some use for personal development as well. What you pay attention to is often just as important as how you work, and OKRs might be a clarifying exercise. I’ve found I might be passively using something like Objectives and Key Results to drive learning. If I want to be a better technologist, that means reading a tech book a month, and completing this year’s Advent of Code in a new programming language, and reading 5 technology articles a week. I want to be a better writer, so I need to write reviews on all books I read, and read 8 books a month. Fortunately, I have an OKR platform where I can assess my progress against those implicit goals. All else being equal, the book justifies its price of entry, but all the same old criticisms of business books apply. For a few hours of time, this is as good as any argument for measuring what matters. ",
    "url": "/notes/business_books/measure-what-matters#thoughts",
    
    "relUrl": "/notes/business_books/measure-what-matters#thoughts"
  },"521": {
    "doc": "Metaphors We Live By",
    "title": "Metaphors We Live By",
    "content": ". | Summary . | Experience, Coherence, and Systematicity of Metaphorical Concepts | Ontological Metaphors | Afterword Summary | . | Quotes | Thoughts | . ",
    "url": "/notes/educational_books/metaphors-we-live-by",
    
    "relUrl": "/notes/educational_books/metaphors-we-live-by"
  },"522": {
    "doc": "Metaphors We Live By",
    "title": "Summary",
    "content": "Experience, Coherence, and Systematicity of Metaphorical Concepts . | Most of our fundamental concepts are organized in terms of one or more spatialization metaphors. | There is an internal systematicity to each spatialization metaphor. For example, happy is up defines a coherent system rather than a number of isolated and random cases. (An example of an incoherent system would be one where, say, “I’m feeling up” meant “I’m feeling happy, “ but “My spirits rose” meant “I became sadder.”) -There is an overall external systematicity among the various spatialization metaphors, which defines coherence among them. Thus, good is up gives an up orientation to general well-being, and this orientation is coherent with special cases like HAPPY IS UP , HEALTH IS UP, ALIVE IS UP, CONTROL IS UP. STATUS IS UP is coherent with CONTROL IS UP. | Spatialization metaphors are rooted in physical and cultural experience; they are not randomly assigned. A metaphor can serve as a vehicle for understanding a concept only by virtue of its experiential basis. (Some of the complexities of the experiential basis of metaphor are discussed in the following section.) | There are many possible physical and social bases for metaphor. Coherence within the overall system seems to be part of the reason why one is chosen and not another. For example, happiness also tends to correlate physically with a smile and a general feeling of expansiveness. This could in principle form the basis for a metaphor HAPPY IS WIDE; SAD IS NARROW. And in fact there are minor metaphorical expressions, like “I’m feeling expansive, “ that pick out a different aspect of happiness than “I’m feeling up” does. But the major metaphor in our culture is happy is up; there is a reason why we speak of the height of ecstasy rather than the breadth of ecstasy, happy is up is maximally coherent with good is up, HEALTHY IS UP, etc. | In some cases spatialization is so essential a part of a concept that it is difficult for us to imagine any alternative metaphor that might structure the concept. In our society “high status” is such a concept. Other cases, like happiness, are less clear. Is the concept of happiness independent of the happy is up metaphor, or is the up-down spatialization of happiness a part of the concept? We believe that it is a part of the concept within a given conceptual system. THE HAPPY IS UP metaphor places happiness within a coherent metaphorical system, and part of its meaning comes from its role in that system. | So-called purely intellectual concepts, e.g., the concepts in a scientific theory, are often—perhaps always—based on metaphors that have a physical and/or cultural basis. The high in “high-energy particles” is based orientation is coherent with special cases like HAPPY IS UP , HEALTH IS UP, ALIVE IS UP, CONTROL IS UP. STATUS IS UP is coherent with CONTROL IS UP. | Spatialization metaphors are rooted in physical and cultural experience; they are not randomly assigned. A metaphor can serve as a vehicle for understanding a concept only by virtue of its experiential basis. (Some of the complexities of the experiential basis of metaphor are discussed in the following section.) | There are many possible physical and social bases for metaphor. Coherence within the overall system seems to be part of the reason why one is chosen and not another. For example, happiness also tends to correlate physically with a smile and a general feeling of expansiveness. This could in principle form the basis for a metaphor HAPPY IS WIDE; SAD IS NARROW. And in fact there are minor metaphorical expressions, like “I’m feeling expansive, “ that pick out a different aspect of happiness than “I’m feeling up” does. But the major metaphor in our culture is happy is up; there is a reason why we speak of the height of ecstasy rather than the breadth of ecstasy, happy is up is maximally coherent with good is up, HEALTHY IS UP, etc. | In some cases spatialization is so essential a part of a concept that it is difficult for us to imagine any alternative metaphor that might structure the concept. In our society “high status” is such a concept. Other cases, like happiness, are less clear. Is the concept of happiness independent of the happy is up metaphor, or is the up-down spatialization of happiness a part of the concept? We believe that it is a part of the concept within a given conceptual system. THE HAPPY IS UP metaphor places happiness within a coherent metaphorical system, and part of its meaning comes from its role in that system. | So-called purely intellectual concepts, e.g., the concepts in a scientific theory, are often—perhaps always—based on metaphors that have a physical and/or cultural basis. The high in “high-energy particles” is based on more is up. The high in “high-level functions, “ as in physiological psychology, is based on RATIONAL IS UP. The low in “low-level phonology” (which refers to detailed phonetic aspects of the sound systems of languages) is based on MUNDANE REALITY IS DOWN (as in “down to earth”). The intuitive appeal of a scientific theory has to do with how well its metaphors fit one’s experience. | Our physical and cultural experience provides many possible bases for spatialization metaphors. Which ones are chosen, and which ones are major, may vary from culture to culture. | It is hard to distinguish the physical from the cultural basis of a metaphor, since the choice of one physical basis from among many possible ones has to do with cultural coherence. | . Ontological Metaphors . | way of viewing events, activities, emotions, ideas, etc., as entities and substances | things like “THE MIND IS A MACHINE” (he broke down) or “THE MIND AS A BRITTLE OBJECT” (he cracked up) are taken as so natural and pervasive in our thought that they usually are taken as self-evident, direct descriptions of mental phenomena | personification - physical object is specified as being a person, allowing us to comprehend a wide variety of experiences with nonhuman entities in terms of human motivations, characteristics, and activities. | metonymy - using one entity to refer to another that is related to it | synechdoche - a special type of metonymy where the part stands for the whole | . Afterword Summary . | Metaphors are fundamentally conceptual in nature; metaphorical language is secondary. | Conceptual metaphors are grounded in everyday experience. | Abstract thought is largely, though not entirely, metaphorical. | Metaphorical thought is unavoidable, ubiquitous, and mostly unconscious. | Abstract concepts have a literal core but are extended by metaphors, often by many mutually inconsistent metaphors. | Abstract concepts are not complete without metaphors. For example, love is not love without metaphors of magic, attraction, madness, union, nurturance, and so on. | Our conceptual systems are not consistent overall, since the metaphors used to reason about concepts may be inconsistent. | We live our lives on the basis of inferences we derive via metaphor. | . ",
    "url": "/notes/educational_books/metaphors-we-live-by#summary",
    
    "relUrl": "/notes/educational_books/metaphors-we-live-by#summary"
  },"523": {
    "doc": "Metaphors We Live By",
    "title": "Quotes",
    "content": "The essence of metaphor is understanding and experiencing one kind of thing in terms of another. (5) . We saw in the ARGUMENT IS WAR metaphor that expressions from the vocabulary of war, e.g., attack a pssotion, indefensible, strategy, new line of attack, win, gain ground, etc., form a systematic way of talking about battling aspects of arguing. (7) . The most fundamental values in a culture will be coherent with the metaphorical structure of the most fundamental concepts in the culture. (22) . every experience takes place within a vast background of cultural presuppositions […] all experience is cultural through and through, that we experience our “world” in such a way that our culture is already present in the very experience itself. (57) . We see this as a clear case of the power of metaphor to create reality rather than simply to give us a way of conceptualizing a preexisting reality. (144) . Each culture must provide a more or less successful way of dealing with its environment, both adapting to it and changing it. Moreover, each culture must define a social reality within which people have roles that make sense to them and in terms of which they can function socially. Not surprisingly, the social reality defined by a culture affects its conception of physical reality. What is real for an individual as a member of a culture is a product both of his social reality and of the way in which that shapes his experience of the physical world. Since much of our social reality is understood in metaphorical terms, and since our conception of the physical world is partly metaphorical, metaphor plays a very significant role in determining what is real for us. (146) . ",
    "url": "/notes/educational_books/metaphors-we-live-by#quotes",
    
    "relUrl": "/notes/educational_books/metaphors-we-live-by#quotes"
  },"524": {
    "doc": "Metaphors We Live By",
    "title": "Thoughts",
    "content": "Feels like this work was ground-breaking in 1980 when it was first released, but feels so even now. I had always thought of metaphors as a literary device relegated mostly to poetry and fiction, but this book turns that on it’s head. Metaphors are far more foundational for how we deal with non-physical (and sometimes physical!) concepts, and our metaphors are mediated or rather caused by our culture. The metaphors that Americans use to describe happiness are different than the metaphors Indians would use, and while there might be conceptual overlap, it is only because those separate cultures have ontologies or spatializations that overlap, e.g., both cultures think UP IS GOOD. I particularly liked the implications of the idea that your metaphor makes your reality, both at an individual level and at a cultural level. I think about the stories I tell at my work about my domain, how I talk about how it should operate and the metaphors I use. Data as water, software and hardware as building infrastructure. But I also use metaphor to describe what we do as a company and as a domain, which is interesting because there is a direct real-world example of what we do, literally what we do. What we do isn’t like a sub shop, or a pizza shop, or a restaurant (most of my metaphors are gastrocentric), it’s a super aggregator who receives, cleans and enriches, indexes, and serves thousands of different publishers data. But things get interesting if you start replacing serves with publishes. So we begin to be another publisher in the line, a republisher. But we might have our own published content. Can we leverage licenses that permit reuse or transposition or editing to create meta-research? Research about research? This is a full on tangent now, but I think about things I need to know more about, specifically our external customers. I have a decent idea of internal customers here, but I need to know more about all customers to make informed decisions. ",
    "url": "/notes/educational_books/metaphors-we-live-by#thoughts",
    
    "relUrl": "/notes/educational_books/metaphors-we-live-by#thoughts"
  },"525": {
    "doc": "Multipliers",
    "title": "Multipliers",
    "content": "Liz Wiseman, 2010 . | 1: The Multiplier Effect . | Multipliers vs Diminishers | The Five Disciplines of Multipliers | Accidental Diminisher | . | 2: The Talent Magnet . | The Four Practices of the Talent Magnet | Becoming a Talent Magnet | Leveraging Resources | Unexpected Findings | . | 3: The Liberator . | The Three Practices of the Liberator | Becoming a Liberator | Leveraging Resources | Unexpected Findings | . | 4: The Challenger . | The Three Practices of the Challenger | Becoming a Challenger | Leveraging Resources | Unexpected Findings | . | 5: The Debate Maker . | The Three Practices of the Debate Maker | Becoming a Debate Maker | Leveraging Resources | Unexpected Findings | . | 6: The Investor . | The Three Practices of the Investor | Becoming an Investor | Leveraging Resources | Unexpected Findings | . | 7: The Accidental Diminisher . | Accidental Diminisher Profiles | Decreasing your Accidental Diminisher Tendencies | . | 8: Dealing with Diminishers . | Breaking the Cycle of Diminishing | Dealing with Diminisher Strategies . | Level 1: Defenses Against the Dark Arts of Diminishing Managers | Level 2: Multiplying Up | Level 3: Inspiring Multiplier Leadership in Others | . | . | 9: Becoming a Multiplier . | Starting the Journey | The Accelerators | Elements of a Culture | Building a Multiplier Culture | . | Thoughts | . ",
    "url": "/notes/business_books/multipliers",
    
    "relUrl": "/notes/business_books/multipliers"
  },"526": {
    "doc": "Multipliers",
    "title": "1: The Multiplier Effect",
    "content": "Multipliers vs Diminishers . | multipliers - leaders are genius makers who bring out the intelligence in others. they built collective, viral, intelligence in organizations | diminishers - these leaders are absorbed in their own intelligence, stifle others, and deplete the organization of crucial intelligence and capability | . The Five Disciplines of Multipliers . | The Talent Magnet: Attracts and optimizes talent | The Liberator: Requires people’s best thinking | The Challeneger: Extends challenges | The Debate Maker: Debates decisions | The Investor: Instills accountability | . Accidental Diminisher . | much of the diminishing that happens in the workplace is a result of well-intended leaders whose honest attempts ot lead or be helpful shut down ideas and cause others to hold back . | by extracting people’s full capability, Multipliers get twice the capability from people as Diminishers . | . ",
    "url": "/notes/business_books/multipliers#1-the-multiplier-effect",
    
    "relUrl": "/notes/business_books/multipliers#1-the-multiplier-effect"
  },"527": {
    "doc": "Multipliers",
    "title": "2: The Talent Magnet",
    "content": ". | Empire Builder - brings in great talent, but under-utilizes it because they board resources and use them only for their own gain | Talent Magnets - get access to the best talent because people flock to work for them, knowing they will be fully utilized and developed to be ready for the next stage | . The Four Practices of the Talent Magnet . | Look for Talent Everywhere . | Appreciate all types of genius | Ignore boundaries | . | Find People’s Native Genius . | Look for what is native | Label it | . | Utilize People to Their Fullest . | Connect people with opportunities | Shine a spotlight | . | Remove the Blockers . | Get rid of prima donnas | Get out of the way | . | . Becoming a Talent Magnet . | Name the Genius | Supersize it | Let go of a superstar | . Leveraging Resources . |   | Empire Builders | Talent Magnets | . | What They Do | Hoard resources and underutilize talent | Attract talent and deploy it at its highest point of contribution | . | What They Get | A reputation as the person A players should avoid working for (\"the place you go to die\") | A reputation as the person A players should work for (\"the place you go to grow\") | . |   | Underutilized people whose capability atrophies | Fully utilized people whose genius continues to expand | . |   | Disillusioned A players who don’t reach out to other A players | Inspired A players who attract other A players into the organization | . |   | A stagnation of talent where disillusioned A players quit and stay | A flow of A players attracting other A players as they then move up and out of the org | . Unexpected Findings . | Both Talent Managers and Empire Builders attract top talent. What differentiates them is what they do with the talent once it’s in the door. | Talent Magnets don’t run out of talent by moving their people to bigger, better opportunities, because there is a steady stream of talent wanting to get into their organization. | . ",
    "url": "/notes/business_books/multipliers#2-the-talent-magnet",
    
    "relUrl": "/notes/business_books/multipliers#2-the-talent-magnet"
  },"528": {
    "doc": "Multipliers",
    "title": "3: The Liberator",
    "content": ". | Tyrants create a tense environment that supresses peopel’s thinking and capability. As a result, people hold back, bring up safe ideas that the leader agress with, and work cautiously. | Liberators create an intense environment that requires people’s best thinking and work. As a result, people offer thier best and boldest thinking and give their best effort. | . The Three Practices of the Liberator . | Create Space . | Release others by restraining yourself | Shift the ratio of listening to talking | Define a space for discovery | Level the playing field | . | Demand Best Work . | Defend the standard | Distinguish best work from outcomes | . | Generate Rapid Learning Cycles . | Admit and share mistakes | Insist on learning from mistakes | . | . Becoming a Liberator . | Play fewer chips | Label your opinions | Talk up your mistakes | Make space for mistakes | . Leveraging Resources . |   | Tyrants | Liberators | . | What They Do | Create a tense environment that suppresses people’s thinking and capability | Create an intense environment that requires people’s best thinking and work | . | What They Get | People hold back but appear to be engaged on the surface | People who offer their best thinking and really engage their full brainpower | . |   | Safe ideas the leader already agrees with | The best and boldest ideas | . |   | People who work cautiously, avoid taking risks, and find excuses for any mistakes they make | People who give their full effort and will go out on a limb and learn quickly from any mistakes | . Unexpected Findings . | The path of least resistance is often the path of tyranny. Because many organizations are skewed, a leader can be above average in an organization and still operate as a Tyran. | Liberators maintain a duality of giving people permission to think while also creating an obligation for them to do their best work. | Multipliers are intense. Leaders who can discern and create the difference between a tense and an intense climate can access significantly more brainpower from their organizations. | . ",
    "url": "/notes/business_books/multipliers#3-the-liberator",
    
    "relUrl": "/notes/business_books/multipliers#3-the-liberator"
  },"529": {
    "doc": "Multipliers",
    "title": "4: The Challenger",
    "content": ". | KNOW-IT-ALLS give directives that showcase how much they know. As a result they limit what their organization can achieve to what they themselves know how to do. The organization uses its energy to deduce what the boss thinks. | CHALLENGERS define opportunities that challenge people to go beyond what they know how to do. As a result they get an organization that understands the challenge and has the focus and energy to take it on. | . The Three Practices of the Challenger . | Seed the Opportunity . | Show the need | Challenge the assumptions | Reframe problems | Create a starting point | . | Lay Down a Challenge . | Extend a concrete challenge | Ask the hard questions | Let others fill in the blanks | . | Generate Belief in What is Possible . | Helicopter down | Cocreate the plan | Orchestrate an early win | . | . Becoming a Challenger . | Take the extreme questions challenge | Create a stretch challenge | Take a bus trip | Take a massive baby step | . Leveraging Resources . |   | Know-It-Alls | Challengers | . | What They Do | Give directives that showcase \"their\" knowledge | Define opportunities that challenge people to go beyond what they know how to do | . | What They Get | Distracted efforts as people vie for the attention of the boss | Collective intent toward the same overarching opportunity | . |   | Idle cycles in the organization as people wait to be told what to do or to see if the boss will change direction again | Rapid cycles and accelerated problem solving with out the initiation of the formal leader | . |   | An organization that doesn’t want to get ahead of the boss | People’s discretionary effort and intellectual energy to take on the toughest organizational challenges | . Unexpected Findings . | Even when leaders have a clear view of the future, there are advantages to simply seeding opportunities. | Challengers have full range of motion: they can see and articulate the big thinking and ask the big questions, but they can also connect that to the specific steps needed to create movement. | If you ask people to take on the impossible in the right way, it can actually create more safety than if you ask for something easier. | . ",
    "url": "/notes/business_books/multipliers#4-the-challenger",
    
    "relUrl": "/notes/business_books/multipliers#4-the-challenger"
  },"530": {
    "doc": "Multipliers",
    "title": "5: The Debate Maker",
    "content": ". | DECISION MAKERS decide efficiently with a small inner circle, but they leave the broader organization in the dark to debate the soundness of the decision instead of executing it. | DEBATE MAKERS engage people in debating the issues up front, which leads to sound decisions that people understand and can execute efficiently. | . The Three Practices of the Debate Maker . | Frame the Issue . | Define the question | Form the team | Assemble the data | Frame the decision | . | Spark the Debate . | Create safety for best thinking | Demand rigor | . | Drive a Sound Decision . | Reclarify the decision-making process | Make the decision | Communicate the decision and rationale | . | . Becoming a Debate Maker . Make a debate with four asks: 1) Ask the hard question, 2) ask for evidence, 3) ask everyone, 4) ask people to switch. Leveraging Resources . |   | Decision Makers | Debate Makers | . | What They Do | Engage a select inner circle in the decision-making process | Access a wide spectrum of thinking in a rigorous debate before making decisions | . | What They Get | Underutilization of the bulk of their resources, while a select few are overworked | High utilization of the bulk of their resources | . |   | A lack of info from those closest to the action, resulting in poorer decisions | Real info they need to make sound decisions | . |   | Too many resources thrown at those who don’t have the understanding they need to execute the decisions effectively | Efficient execution with lower resource levels because they have built a deep understanding of the issues, which readies the or to execute | . Unexpected Findings . | As a leader, you can have a very strong opinion but also facilitate debate that creates room for other people’s views. Data is the key. | Debate Makers are equally comfortable being the decision maker in the end. They are not only consensus-driven leaders. | Rigorous debate doesn’t break down a team; it builds the team and makes it stronger. | . ",
    "url": "/notes/business_books/multipliers#5-the-debate-maker",
    
    "relUrl": "/notes/business_books/multipliers#5-the-debate-maker"
  },"531": {
    "doc": "Multipliers",
    "title": "6: The Investor",
    "content": ". | MICROMANAGERS manage every detail in a way that creates dependence on the leader and their presence for the organization to perform. | INVESTORS give other people the investment and ownership they need to produce results independent of the leader. | . The Three Practices of the Investor . | Define Ownership . | Name the lead | Give ownership for the end goal | Stretch the role | . | Invest Resources . | Teach and coach | Provide backup | . | Hold People Accountable . | Give it back | Expect complete work | Respect natural consequences | . | . Becoming an Investor . | Give 51 percent of the vote . | give people a say in the work | . | Let nature take its course . | let the painful lessons happen | . | Ask for the F-I-X . | don’t suggest problems without giving solutions | . | Give it back . | giving back leadership and accountability to those doing work | . | . Leveraging Resources . |   | Micromanagers | Investors | . | What They Do | Manage every detail of the work to ensure it is completed the way they would do it | Give other people the ownership for results and invest in their success | . | What They Get | People who wait to be told what to do | People who take initiative and anticipate challenge | . |   | People who hold back because they expect to be interupted and told what to do instead | People who are fully focused on achieving results | . |   | Free riders who wait for the boss to swoop in and save them | People who can get ahead of the boss in solving problems | . |   | People who try to \"work\" their bosses and make sophisticated excuses | People who respond to the natural forces around them | . Unexpected Findings . | Multipliers do get involved in the operational details, but they keep the ownership with other people. | Multipliers are rated 42 percent higher at delivering world-class results than their Diminisher counterparts.4 | . ",
    "url": "/notes/business_books/multipliers#6-the-investor",
    
    "relUrl": "/notes/business_books/multipliers#6-the-investor"
  },"532": {
    "doc": "Multipliers",
    "title": "7: The Accidental Diminisher",
    "content": "ACCIDENTAL DIMINISHERS are managers who, despite the very best of intentions, have a diminishing impact on the people they lead. Accidental Diminisher Profiles . | Idea Guy : Creative, innovative thinkers who think they are stimulating ideas in others | Always On : Dynamic, charismatic leaders who think their energy is infectious | Rescuer : Empathetic leaders who are quick to help when they see people struggling | Pacesetter : Achievement-oriented leaders who lead by example and expect others to notice and follow | Rapid Responder : Leaders who are quick to take action believing that they are building an agile, action-oriented team | Optimist : Positive, can-do leaders who think their belief in people will inspire them to new heights | Protector : Vigilant leaders who shield people from problems to keep them safe | Strategist : Big thinkers who cast a compelling vision thinking they are showing people a better place and providing the big picture | Perfectionist : Leaders who strive for excellence and manage the fine details to help others produce superior work | . Decreasing your Accidental Diminisher Tendencies . | Seek feedback | Lead with intention | Practice the workarounds and learning experiments found in appendix E, “Multiplier Experiments” | Do less and challenge more | . ",
    "url": "/notes/business_books/multipliers#7-the-accidental-diminisher",
    
    "relUrl": "/notes/business_books/multipliers#7-the-accidental-diminisher"
  },"533": {
    "doc": "Multipliers",
    "title": "8: Dealing with Diminishers",
    "content": "You can be a Multiplier while working for a Diminisher. Breaking the Cycle of Diminishing . | It’s not necessarily about you | Diminishing isn’t inevitable | You can lead your leader | . Dealing with Diminisher Strategies . Level 1: Defenses Against the Dark Arts of Diminishing Managers . Basic survival strategies intended to improve your reactions to Diminishers, relieve stress, neutralize immediate problems, and halt the downward spiral. | Turn down the volume | Strengthen other connections | Retreat and regroup | Send the right signals | Assert your capability | Ask for performance intel | Shop for a new boss | . Level 2: Multiplying Up . Offense plays to help you be a Multiplier to those above you in the organization or to diminishing colleagues at your side, especially Accidental Diminishers. | Exploit your boss’s strengths | Give them a user’s guide | Listen to learn | Admit your mistakes | Sign up for a stretch | Invite them to the party | . Level 3: Inspiring Multiplier Leadership in Others . Strategies that raise awareness and encourage leaders to make the shift from Accidental Diminisher to a more intentional Multiplier. | Assume positive intent | Address one issue at a time | Celebrate progress | . ",
    "url": "/notes/business_books/multipliers#8-dealing-with-diminishers",
    
    "relUrl": "/notes/business_books/multipliers#8-dealing-with-diminishers"
  },"534": {
    "doc": "Multipliers",
    "title": "9: Becoming a Multiplier",
    "content": "Starting the Journey . | Resonance | Realization of the Accidental Diminisher | Resolve to be a Multiplier | . The Accelerators . | Start with the assumptions | Work the extremes (neutralize a weakness; top off a strength) | Run an experiment | Ask a colleague | Brace yourself for setbacks | . Elements of a Culture . | Common language : Words and phrases that hold a common meaning within a community based on opinions, principles, and values | Learned behavior s: A set of learned responses to stimuli | Shared beliefs : The acceptance of something as true | Heroes and legends : People who are admired or idealized for their qualities, behavior, and/or achievements and the stories told about heroic actions | Rituals and norms : Consistent behavior regularly followed by an individual or a group | . Building a Multiplier Culture . Common Language . | Hold a book talk | Discuss Accidental Diminishers | . Learned Behavior . | Introduce Multiplier mindsets | Teach Multiplier skills | Fuse Multipliers with daily decisions | . Shared Beliefs . | Codify a leadership ethos | . Heroes and Legends . | Spotlight Multiplier moments | Measure managers | . Rituals and Norms . | Pilot a Multiplier practice | Integrate practices with business metrics | . ",
    "url": "/notes/business_books/multipliers#9-becoming-a-multiplier",
    
    "relUrl": "/notes/business_books/multipliers#9-becoming-a-multiplier"
  },"535": {
    "doc": "Multipliers",
    "title": "Thoughts",
    "content": "Multipliers is a book about control, and where we cede it and where we seize it as leaders. It revolves around the idea that leaders are better served empowering those underneath them to own their outputs, that many people working slightly better is much better than one working perfectly. A multiplier is one who enables their direct reports, while a diminisher is a tyrannical control freak. It is filled with heuristics and tricks on how to give more power to those subordinate to you; in fact, it argues, that is your role – to manage the work rather than do it. It is a book written for managers on how to influence their people, to get the best effort and create a workplace that people want to work in. In a lot of ways, we’ve seen these ideas before: the world has moved past unthinking hierarchy, empower teams to succeed, build an environment of psychological safety, be biased for corporate survivors, solicit feedback, and don’t be an asshole. Modern business books seem to all involve picking a mix of these and a few other ideas, building a nice metaphor on top, complete with Briggs-Meyer-esque assessment techniques (how else would you monetize your system further?), and building that into a consultancy apparatus. That being said, the metaphor is effective, and the underlying philosophy is sound as far as it goes. I would have liked to see a bit more attention paid to the cognitions that underpin a diminisher. The book just rounds up a grab bag of behaviors and builds these into the diminisher or multiplier archetypes, giving a handful of mental tricks and devices to break out of the behavior. I’d like to know what compels the diminishing behavior to address it there; am I a control freak, do I seek recognition at the expense of others, am I addicted to being the hero who saves the day, etc. That might be more powerful than just building an electric dog collar to zap yourself when you are informed of diminishing tendencies. Also, Wiseman seems to fetishize intelligence and downplay power dynamics. The pages are strewn with Harvard MBAs and geniuses and senior vice presidents. Can I aspire to being a mutliplier, in my lowly state with no direct reports? How can I make ceding control look like the right thing to do when I need to be building trust to my colleagues and those above me in the org chart? . All in all, a decent book, but nothing ground-breaking. I will say it did prompt some interesting thoughts on the nature of control and on my unthinking biases towards them, so as far as mental kindling, it did the trick for a short read. ",
    "url": "/notes/business_books/multipliers#thoughts",
    
    "relUrl": "/notes/business_books/multipliers#thoughts"
  },"536": {
    "doc": "NAND2Tetris",
    "title": "NAND2Tetris",
    "content": " ",
    "url": "/notes/classes/nand-2-tetris",
    
    "relUrl": "/notes/classes/nand-2-tetris"
  },"537": {
    "doc": "NAND2Tetris",
    "title": "Part 1",
    "content": ". | Boolean Logic . | Boolean Identities | . | Boolean Function Synthesis | Logic Gates | Hardware Description Language | Hardware Simulation | Boolean Arithmetic | Week 3: Memory | Week 4: Hack Programming | . ",
    "url": "/notes/classes/nand-2-tetris#part-1",
    
    "relUrl": "/notes/classes/nand-2-tetris#part-1"
  },"538": {
    "doc": "NAND2Tetris",
    "title": "Boolean Logic",
    "content": ". | truth table – gives all possible outputs of inputs, another way of representing boolean function | unary operation – only takes single input | . Boolean Identities . commutative laws (x AND y) = (y AND x) (x OR y) = (y OR x) . associative law (x AND (y AND z)) = ((x AND y) AND z) (x OR (y OR z)) = ((x OR y) OR z) . distributive law (x AND (y OR z)) = (x AND y) OR (x AND z) (x OR (y AND z)) = (x OR y) AND (x OR z) . de morgan laws NOT(x AND y) = NOT(x) OR NOT(y) NOT(x OR y) = NOT(x) AND NOT(y) . ",
    "url": "/notes/classes/nand-2-tetris#boolean-logic",
    
    "relUrl": "/notes/classes/nand-2-tetris#boolean-logic"
  },"539": {
    "doc": "NAND2Tetris",
    "title": "Boolean Function Synthesis",
    "content": ". | any boolean function can be represented using an expression containing NAND operations (x NAND y) = NOT(x AND y) | . ",
    "url": "/notes/classes/nand-2-tetris#boolean-function-synthesis",
    
    "relUrl": "/notes/classes/nand-2-tetris#boolean-function-synthesis"
  },"540": {
    "doc": "NAND2Tetris",
    "title": "Logic Gates",
    "content": ". | technique for implementing boolean functions using logic gates | elementary (NAND, AND, OR, NOT, etc.) | composite (MUX, ADDER, etc.) | . ",
    "url": "/notes/classes/nand-2-tetris#logic-gates",
    
    "relUrl": "/notes/classes/nand-2-tetris#logic-gates"
  },"541": {
    "doc": "NAND2Tetris",
    "title": "Hardware Description Language",
    "content": " ",
    "url": "/notes/classes/nand-2-tetris#hardware-description-language",
    
    "relUrl": "/notes/classes/nand-2-tetris#hardware-description-language"
  },"542": {
    "doc": "NAND2Tetris",
    "title": "Hardware Simulation",
    "content": ". | interactive simulation – active tests | script-based simulation – pass input and output into simulator | . ",
    "url": "/notes/classes/nand-2-tetris#hardware-simulation",
    
    "relUrl": "/notes/classes/nand-2-tetris#hardware-simulation"
  },"543": {
    "doc": "NAND2Tetris",
    "title": "Boolean Arithmetic",
    "content": "convert binary to decimal . | 1 2 3 4 5 6 . | 1101 2^4 2^3 2^2 2^1 8 4 2 1 1 1 0 1 8 + 4 + 0 + 1 13 . | . convert decimal to binary . | 1 2 3 4 . | 99 64 + 32 + 2 + 1 64 32 16 8 4 2 1 1 1 0 0 0 1 1 . | . overflow – if adding numbers that carry over (carry bit), most computers ignore or truncate results . | only need to implement addition and subtraction, can handle multiplication and division in software where it is easier | . half adder chip . | a | b | sum | carry | . | 0 | 0 | 0 | 0 | . | 0 | 1 | 1 | 0 | . | 1 | 0 | 1 | 0 | . | 1 | 1 | 0 | 1 | . full adder chip . | a | b | c | sum | carry | . | 0 | 0 | 0 | 0 | 0 | . | 0 | 0 | 1 | 1 | 0 | . | 0 | 1 | 0 | 1 | 0 | . | 0 | 1 | 1 | 0 | 1 | . | 1 | 0 | 0 | 1 | 0 | . | 1 | 0 | 1 | 0 | 1 | . | 1 | 1 | 0 | 0 | 1 | . | 1 | 1 | 1 | 1 | 1 | . convert to negative, flip bits and add 1 . ",
    "url": "/notes/classes/nand-2-tetris#boolean-arithmetic",
    
    "relUrl": "/notes/classes/nand-2-tetris#boolean-arithmetic"
  },"544": {
    "doc": "NAND2Tetris",
    "title": "Week 3: Memory",
    "content": " ",
    "url": "/notes/classes/nand-2-tetris#week-3-memory",
    
    "relUrl": "/notes/classes/nand-2-tetris#week-3-memory"
  },"545": {
    "doc": "NAND2Tetris",
    "title": "Week 4: Hack Programming",
    "content": " ",
    "url": "/notes/classes/nand-2-tetris#week-4-hack-programming",
    
    "relUrl": "/notes/classes/nand-2-tetris#week-4-hack-programming"
  },"546": {
    "doc": "Never Split the Difference",
    "title": "Never Split the Difference",
    "content": ". | Be A Mirror | Labelling | Beware “Yes”, Master “No” | That’s Right | Bending Reality | The Illusion of Control | Guarantee Execution | Bargain Hard | Black Swans | Negotiation One Sheet . | I: Goal | II: Summary | III: Labels/Accusation Audit | IV: Calibrated Questions . | Questions to identify behind-the-table deal killers | Questions to unearth deal-killing issues | . | V: Non-Cash Offers | . | . ",
    "url": "/notes/business_books/never-split-the-difference",
    
    "relUrl": "/notes/business_books/never-split-the-difference"
  },"547": {
    "doc": "Never Split the Difference",
    "title": "Be A Mirror",
    "content": "mirroring . | also called isopraxism, essentially imitation | we copy another’s speech patterns, body language, vocabulary, tempo, and tone of voice | in negotiation, we concentrate on words and nothing else | repeat the last three words (or critical one to three words) | . how to confront someone . | use the late-night FM DJ voice | start with “I’m sorry…” | mirror | silence. at least 4 seconds. | repeat | . | A good negotiator prepares, going in, to be ready for possible surprises; a great negotiator aims to use her skills to reveal the surprises she is certain to find. | Don’t commit to assumptions; instead, view them as hypotheses and use the negotiation to test them rigorously. | People who view negotiation as a battle of arguments become overwhelmed by the voices in their head. Negotiation is not an act of battle; it’s a process of discovery. The goal is to uncover as much information as possible. | To quiet the voices in your head, make your sole and all-encompassing focus the other person and what they have to say. | Slow. It. Down. Going too fast is one of the mistakes all negotiators are prone to making. If we’re too much in a hurry, people can feel as if they’re not being heard. You risk undermining the rapport and trust you’ve built. | Put a smile on your face. When people are in a positive frame of mind, they think more quickly, and are more likely to collaborate and problem-solve (instead of fight and resist). Positivity creates mental agility in both you and your counterpart. | . three voices to use . | late-night FM DJ – use selectively to make a point; inflect voice downward, and keep calm and slow | positive/playful voice – should be default voice; easygoing, good-natured | direct/assertive – use rarely; will create problems and pushback | . ",
    "url": "/notes/business_books/never-split-the-difference#be-a-mirror",
    
    "relUrl": "/notes/business_books/never-split-the-difference#be-a-mirror"
  },"548": {
    "doc": "Never Split the Difference",
    "title": "Labelling",
    "content": "tactical empathy . | understanding the feelings and mindset of another in the moment | also hearing what is behind those feelings so you can increase influence in all moments that follow | beyond just empathy, which is “the ability to recognize the perspective of a counterpart, and the vocalization of that recognition” | imagine yourself in your counterpart’s position | . labelling . | a way to validate a counterpart’s emotions by acknowledging them | allows you to reinforce the good aspect of a negotiation, and diffuse a bad | almost always begin with “it seems like…“ or “it sounds like…“ or “it looks like…“ | . accusation audit . | listing everything terrible your counterpart could say about you to diffuse it | best way to deal with a negative emotion is to observe it, without action or judgement | head off negative dynamics before they take root | . ",
    "url": "/notes/business_books/never-split-the-difference#labelling",
    
    "relUrl": "/notes/business_books/never-split-the-difference#labelling"
  },"549": {
    "doc": "Never Split the Difference",
    "title": "Beware “Yes”, Master “No”",
    "content": ". | No is the start of a negotiation, not the end of it | Break the habit of attempting to get people to say “yes.” Being pushed for “yes” makes people defensive. Our love of hearing “yes” makes us blind to the defensiveness we ourselves feel when someone is pushing us to say it. | “No” is not a failure. We have learned that “No” is the anti-“Yes” and therefore a word to be avoided at all costs. But it really often just means “Wait” or “I’m not comfortable with that.” Learn how to hear it calmly. It is not the end of the negotiation, but the beginning. | “Yes” is the final goal of a negotiation, but don’t aim for it at the start. Asking someone for “Yes” too quickly in a conversation—“Do you like to drink water, Mr. Smith?”—gets his guard up and paints you as an untrustworthy salesman. | Saying “No” makes the speaker feel safe, secure, and in control, so trigger it. By saying what they don’t want, your counterpart defines their space and gains the confidence and comfort to listen to you. That’s why “Is now a bad time to talk?” is always better than “Do you have a few minutes to talk?” | Sometimes the only way to get your counterpart to listen and engage with you is by forcing them into a “No.” That means intentionally mislabeling one of their emotions or desires or asking a ridiculous question—like, “It seems like you want this project to fail”—that can only be answered negatively. | Negotiate in their world. Persuasion is not about how bright or smooth or forceful you are. It’s about the other party convincing themselves that the solution you want is their own idea. So don’t beat them with logic or brute force. Ask them questions that open paths to your goals. It’s not about you. | If a potential business partner is ignoring you, contact them with a clear and concise “No”-oriented question that suggests that you are ready to walk away. “Have you given up on this project?” works wonders. | . ",
    "url": "/notes/business_books/never-split-the-difference#beware-yes-master-no",
    
    "relUrl": "/notes/business_books/never-split-the-difference#beware-yes-master-no"
  },"550": {
    "doc": "Never Split the Difference",
    "title": "That’s Right",
    "content": "behavioral change stairway model (BCSM) . | active listening | empathy | rapport | influence | behavioral change | . | creating positive regard is key to behavioral change – humans are driven towards socially constructive behavior; the more a person feels understood and positively affirmed in that understanding, the more likely the urge for constructive behavior | “that’s right” is better than yes – strive for it – in negotiations, it creates breakthroughs | use summary (a mix of labelling and paraphrasing) to get to a “that’s right” | . ",
    "url": "/notes/business_books/never-split-the-difference#thats-right",
    
    "relUrl": "/notes/business_books/never-split-the-difference#thats-right"
  },"551": {
    "doc": "Never Split the Difference",
    "title": "Bending Reality",
    "content": "path to effective negotiation . | anchor their emotions – start with basics of empathy | let the other guy go first … most of the time | establish a range | pivot to nonmonetary terms | when you do talk numbers, use odd ones | surprise with a gift | . | All negotiations are defined by a network of subterranean desires and needs. Don’t let yourself be fooled by the surface. Once you know that the Haitian kidnappers just want party money, you will be miles better prepared. | Splitting the difference is wearing one black and one brown shoe, so don’t compromise. Meeting halfway often leads to bad deals for both sides. | Approaching deadlines entice people to rush the negotiating process and do impulsive things that are against their best interests. | The F-word—“Fair”—is an emotional term people usually exploit to put the other side on the defensive and gain concessions. When your counterpart drops the F-bomb, don’t get suckered into a concession. Instead, ask them to explain how you’re mistreating them. | You can bend your counterpart’s reality by anchoring his starting point. Before you make an offer, emotionally anchor them by saying how bad it will be. When you get to numbers, set an extreme anchor to make your “real” offer seem reasonable, or use a range to seem less aggressive. The real value of anything depends on what vantage point you’re looking at it from. | People will take more risks to avoid a loss than to realize a gain. Make sure your counterpart sees that there is something to lose by inaction. | . ",
    "url": "/notes/business_books/never-split-the-difference#bending-reality",
    
    "relUrl": "/notes/business_books/never-split-the-difference#bending-reality"
  },"552": {
    "doc": "Never Split the Difference",
    "title": "The Illusion of Control",
    "content": ". | the secret to gaining the upper hand in a negotiation is to give your counterpart the illusion of control | Don’t try to force your opponent to admit that you are right. Aggressive confrontation is the enemy of constructive negotiation. | Avoid questions that can be answered with “Yes” or tiny pieces of information. These require little thought and inspire the human need for reciprocity; you will be expected to give something back. | Ask calibrated questions that start with the words “How” or “What.” By implicitly asking the other party for help, these questions will give your counterpart an illusion of control and will inspire them to speak at length, revealing important information. | Don’t ask questions that start with “Why” unless you want your counterpart to defend a goal that serves you. “Why” is always an accusation, in any language. | Calibrate your questions to point your counterpart toward solving your problem. This will encourage them to expend their energy on devising a solution. | Bite your tongue. When you’re attacked in a negotiation, pause and avoid angry emotional reactions. Instead, ask your counterpart a calibrated question. | There is always a team on the other side. If you are not influencing those behind the table, you are vulnerable. | . ",
    "url": "/notes/business_books/never-split-the-difference#the-illusion-of-control",
    
    "relUrl": "/notes/business_books/never-split-the-difference#the-illusion-of-control"
  },"553": {
    "doc": "Never Split the Difference",
    "title": "Guarantee Execution",
    "content": ". | negotiators are decision architects – need to gain consent and execution | calibrated questions - elegant way to say no and guide to your solution, e.g., “How am I supposed to do that?” | negotiation is the “art of letting someone else have your way” | yes is nothing without how | deal killers are more important than deal makers | . 7-38-55 Rule . | components of what makes us like someone: . | 7% words | 38% tone | 55% body language and face | . | . 3 types of yes . | commitment (strongest) | confirmation | counterfeit (weakest) | . Rule of 3 . | get someone to agree 3 times in a conversation to get commitment | vary tactics so doesn’t get repetitious | . Pinocchio Effect . | liars use more words than truth-tellers, and far more third-person pronouns . | I and me pronouns might mean someone isn’t as important than someone who uses we | Ask calibrated “How” questions, and ask them again and again. Asking “How” keeps your counterparts engaged but off balance. Answering the questions will give them the illusion of control. It will also lead them to contemplate your problems when making their demands. | Use “How” questions to shape the negotiating environment. You do this by using “How can I do that?” as a gentle version of “No.” This will subtly push your counterpart to search for other solutions—your solutions. And very often it will get them to bid against themselves. | Don’t just pay attention to the people you’re negotiating with directly; always identify the motivations of the players “behind the table.” You can do so by asking how a deal will affect everybody else and how on board they are. | Follow the 7-38-55 Percent Rule by paying close attention to tone of voice and body language. Incongruence between the words and nonverbal signs will show when your counterpart is lying or uncomfortable with a deal. | Is the “Yes” real or counterfeit? Test it with the Rule of Three: use calibrated questions, summaries, and labels to get your counterpart to reaffirm their agreement at least three times. It’s really hard to repeatedly lie or fake conviction. | A person’s use of pronouns offers deep insights into his or her relative authority. If you’re hearing a lot of “I,” “me,” and “my,” the real power to decide probably lies elsewhere. Picking up a lot of “we,” “they,” and “them,” it’s more likely you’re dealing directly with a savvy decision maker keeping his options open. | Use your own name to make yourself a real person to the other side and even get your own personal discount. Humor and humanity are the best ways to break the ice and remove roadblocks. | . ",
    "url": "/notes/business_books/never-split-the-difference#guarantee-execution",
    
    "relUrl": "/notes/business_books/never-split-the-difference#guarantee-execution"
  },"554": {
    "doc": "Never Split the Difference",
    "title": "Bargain Hard",
    "content": "3 types of bargainer . | analyst | accommodator | assertive | . | black swan rule - don’t treat others the way you want to be treated, treat them the way they need to be treated | I am normal paradox - assuming everyone sees the world the way you do, or is like you | strategic umbrage – well-timed, tactical, offense-taking – can increase gains but reduce cognitive ability | . The Ackerman System . | Set your target price (your goal). | Set your first offer at 65 percent of your target price. | Calculate three raises of decreasing increments (to 85, 95, and 100 percent). | Use lots of empathy and different ways of saying “No” to get the other side to counter before you increase your offer. | When calculating the final amount, use precise, non-round numbers like, say, $37,893 rather than $38,000. It gives the number credibility and weight. | On your final number, throw in a non-monetary item (that they probably don’t want) to show you’re at your limit. | . ",
    "url": "/notes/business_books/never-split-the-difference#bargain-hard",
    
    "relUrl": "/notes/business_books/never-split-the-difference#bargain-hard"
  },"555": {
    "doc": "Never Split the Difference",
    "title": "Black Swans",
    "content": ". | a black swan is something completely unexpected, an unknown unknown | potentially 3 black swans per negotiation | acts as a leverage multiplier | . leverage . | used to withhold gains, inflict loss . | positive (the ability to give someone what they want) | negative (the ability to hurt someone) | normative (using your counterpart’s norms to bring them around) | . | . paradox of power - the harder you push, the more likely someone is to resist similarity principle - we trust what is familiar – this is useful in building rapport . ",
    "url": "/notes/business_books/never-split-the-difference#black-swans",
    
    "relUrl": "/notes/business_books/never-split-the-difference#black-swans"
  },"556": {
    "doc": "Never Split the Difference",
    "title": "Negotiation One Sheet",
    "content": " ",
    "url": "/notes/business_books/never-split-the-difference#negotiation-one-sheet",
    
    "relUrl": "/notes/business_books/never-split-the-difference#negotiation-one-sheet"
  },"557": {
    "doc": "Never Split the Difference",
    "title": "I: Goal",
    "content": "Think through best/worst-case scenarios but only write down a specific goal that represents the best case. | Set an optimistic but reasonable goal and define it clearly. | Write it down. | Discuss your goal with a colleague (this makes it harder to wimp out). | Carry the written goal into the negotiation. | . ",
    "url": "/notes/business_books/never-split-the-difference#i-goal",
    
    "relUrl": "/notes/business_books/never-split-the-difference#i-goal"
  },"558": {
    "doc": "Never Split the Difference",
    "title": "II: Summary",
    "content": "Summarize and write out in just a couple of sentences the known facts that have led up to the negotiation . ",
    "url": "/notes/business_books/never-split-the-difference#ii-summary",
    
    "relUrl": "/notes/business_books/never-split-the-difference#ii-summary"
  },"559": {
    "doc": "Never Split the Difference",
    "title": "III: Labels/Accusation Audit",
    "content": "Prepare three to five labels to perform an accusation audit Some examples: . | It seems like _____ is valuable to you. | It seems like you don’t like _____. | It seems like you value ____. | It seems like _____ makes it easier. | It seems like you’re reluctant to _____. | . ",
    "url": "/notes/business_books/never-split-the-difference#iii-labelsaccusation-audit",
    
    "relUrl": "/notes/business_books/never-split-the-difference#iii-labelsaccusation-audit"
  },"560": {
    "doc": "Never Split the Difference",
    "title": "IV: Calibrated Questions",
    "content": "Prepare three to five calibrated questions to reveal value to you and your counterpart and identify and overcome potential deal killers. Some examples: . | What are we trying to accomplish? | How is that worthwhile? | What’s the core issue here? | How does that affect things? | What’s the biggest challenge you face? | How does this fit into what the objective is? | . Questions to identify behind-the-table deal killers . | How does this affect the rest of your team? | How on board are the people not on this call? | What do your colleagues see as their main challenges in this area? | . Questions to unearth deal-killing issues . | What are we up against here? | What is the biggest challenge you face? | How does making a deal with us affect things? | What happens if you do nothing? | What does doing nothing cost you? | How does making this deal resonate with what your company prides itself on? | . ",
    "url": "/notes/business_books/never-split-the-difference#iv-calibrated-questions",
    
    "relUrl": "/notes/business_books/never-split-the-difference#iv-calibrated-questions"
  },"561": {
    "doc": "Never Split the Difference",
    "title": "V: Non-Cash Offers",
    "content": "Prepare a list of non-cash items possessed by your counterpart that would be valuable . ",
    "url": "/notes/business_books/never-split-the-difference#v-non-cash-offers",
    
    "relUrl": "/notes/business_books/never-split-the-difference#v-non-cash-offers"
  },"562": {
    "doc": "Numbers Don't Lie",
    "title": "Numbers Don’t Lie",
    "content": " ",
    "url": "/notes/educational_books/numbers-dont-lie#numbers-dont-lie",
    
    "relUrl": "/notes/educational_books/numbers-dont-lie#numbers-dont-lie"
  },"563": {
    "doc": "Numbers Don't Lie",
    "title": "Summary",
    "content": "Smil presents 71 short chapters as a practicum on basic numeracy, going through topics as varied as what makes us happy, how many people did it actually take to build the pyramids, is America exceptional, and eventually to Smil’s favorite topic of energy. Most chapters are exceptionally short, spanning just a few pages, but chock full of numbers and facts. Smil takes numbers seriously. ",
    "url": "/notes/educational_books/numbers-dont-lie#summary",
    
    "relUrl": "/notes/educational_books/numbers-dont-lie#summary"
  },"564": {
    "doc": "Numbers Don't Lie",
    "title": "Quotes",
    "content": "But lifespan is a bodily characteristic that arises from the interaction of genes with the environment. Genes may themselves introduce biophysical limits, and so can environmental effects such as smoking […] the estimated heritability of lifespan is modest, between 15 and 30 percent. (26) . We are the superstars of sweating, and we need to be. An amateur running the marathon at a slow pace will consume energy at a rate of 700–800 watts, and an experienced marathoner who covers the 42.2 kilometers in 2.5 hours will metabolize at a rate of about 1,300 watts. And we have another advantage when we lose water: we don’t have to make up the deficit instantly. Humans can tolerate considerable temporary dehydration providing that we rehydrate in a day or so. In fact, the best marathon runners drink only about 200 milliliters per hour during a race. (29) . American readers might find these facts discomforting, but there is nothing arguable about them. In the United States, babies are more likely to die and high schoolers are less likely to learn than their counterparts in other affluent countries. Politicians may look far and wide for evidence of American exceptionalism, but they won’t find it in the numbers, where it matters.(60) . | Smil is looking for measures of what make a good society, and he zeroes in on infant mortality rate and educational achievement, and by both measures America is decidedly middle of the pack. | . The 1880s were miraculous; they gave us such disparate contributions as antiperspirants, inexpensive lights, reliable elevators, and the theory of electromagnetism—although most people lost in their ephemeral tweets and in Facebook gossip are not even remotely aware of the true scope of this quotidian debt. (100) . For a long time to come—until all energies used to produce wind turbines and photovoltaic cells come from renewable energy sources—modern civilization will remain fundamentally dependent on fossil fuels. (150) . In the past 70 years, the energy density of the best commercial batteries hasn’t even quadrupled. (169) . But even though Ford staked much on this one car, it didn’t quite become the bestselling vehicle in history. That primacy belongs to the “people’s car” of Germany—the Volkswagen. Soon after he came to power, Adolf Hitler decreed its specifications, insisted on its distinctive beetle-like appearance, and ordered Ferdinand Porsche to design it. (195) . In the US more than half of all tuna served in restaurants and sushi shops is mislabeled. (242) . The most impressive illustration of China’s unprecedented construction effort is that in just the last two years the country emplaced more cement (about 4.7 billion tons) than the US did cumulatively throughout the entire 20th century (about 4.6 billion tons)! (285) . Always keeping in mind that these are just broad statistical associations, not causal claims, we might conclude that through elimination of likely nutritional factors, we see lower fat and lower sugar intakes as possibly important co-determinants of longevity. The Paris Agreement of 2015 was lauded as the first accord containing specific national commitments to reduce future emissions. But actually, only a small number of countries made specific promises, there is no binding enforcement mechanism, and even if all those targets were met by 2030, carbon emissions would still rise to nearly 50 percent above the 2017 level. According to the 2018 study by the Intergovernmental Panel for Climate Change, the only way to keep the average world temperature rise to no more than 1.5°C would be to put emissions almost immediately into a decline steep enough to bring them to zero by 2050. That is not impossible—but it is very unlikely. Reaching that goal would require nothing short of a fundamental transformation of the global economy on scales and at a speed unprecedented in human history, a task that would be impossible to do without major economic and social dislocations. The greatest challenge would be how to lift billions from poverty without relying on fossil carbon. The affluent world has used hundreds of billions of tons of it to create its high quality of life, but right now we do not have any affordable non-carbon alternatives that could be rapidly deployed on mass scales in order to energize the production of enormous quantities of what I have called the four pillars of modern civilization—ammonia, steel, cement, and plastics—which will be needed in Africa and Asia in the decades to come. The contrasts between the expressed concerns about global warming, the continued release of record volumes of carbon, and our capabilities to change that in the near term could not be starker. ",
    "url": "/notes/educational_books/numbers-dont-lie#quotes",
    
    "relUrl": "/notes/educational_books/numbers-dont-lie#quotes"
  },"565": {
    "doc": "Numbers Don't Lie",
    "title": "Thoughts",
    "content": "Smil is a great thinker, and his power is to cut through the rhetoric and bias using as nearly unbiased data as possible to come to some conclusion about a hot button issue. You might disagree with the data, or how it was gathered, but the key part of using numbers in arguments is that the argument becomes assailable on some commonly agreed upon grounds. It is no longer an appeal to feelings, which are non-falsifiable. We can feel in our heart of hearts that American exceptionalism is a mirage, but until we define our terms and use some quantitative data in our assessment, we can only vaguely hand-wave towards euphemisms like “partisanship” or “quality of life”. One of the fundamental abilities of humans is to leverage metaphor and abstraction to reason about physical reality, and especially about abstract concepts. But this short-circuits logical arguments that can be understood and rebutted. It is impossible to argue against the idea that America is receding on the global stage if you don’t define your terms and then build an actual argument removed from rhetoric. Rhetoric sways though, and arguments live and die based on language rather than numbers. This is Smil’s plea to counterbalance that narrative force. At times, Smil can seem a curmudgeon as he snipes at the daze social media has cast over our intellectual capacities. This is the same sort of shouting at clouds most older folks do when they say anyone under 40 can’t go a whole conversation without looking at their phones. But within this book is a core animating principle that I’ve seen across Smil’s other work, and that is that there are truths in this world, icky ones in fact, that we need to divorce from rhetoric to make any meaningful progress on. ",
    "url": "/notes/educational_books/numbers-dont-lie#thoughts",
    
    "relUrl": "/notes/educational_books/numbers-dont-lie#thoughts"
  },"566": {
    "doc": "Numbers Don't Lie",
    "title": "Numbers Don't Lie",
    "content": " ",
    "url": "/notes/educational_books/numbers-dont-lie",
    
    "relUrl": "/notes/educational_books/numbers-dont-lie"
  },"567": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Operating Systems: Three Easy Pieces",
    "content": "Remzi Arpaci-Dusseau, Andrea Arpaci-Dusseau. 2015 . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces"
  },"568": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Key Links",
    "content": ". | https://pages.cs.wisc.edu/~remzi/OSTEP/Homework/homework.html | https://pages.cs.wisc.edu/~remzi/OSTEP/ | https://github.com/remzi-arpacidusseau/ostep-code | . | 4 - The Process | 5 - Process API | 6 - Limited Direct Execution | 7 - Scheduling | 8 - Multi-Level Feedback Queue | 9 - Scheduling - Proportional Share | 10 - Multiprocessor Scheduling (Advanced) | 13 - The Abstraction: Address Spaces | 14 - Memory API | 15 - Mechanism: Address Translation | 16 - Segmentation | 17 - Free Space Management | 18 - Paging | 18 - Translation-Lookaside Buffers | 20 - Paging: Smaller Tables | 21 - Beyond Physical Memory: Mechanisms | 22 - Beyond Physical Memory: Policies | 23 - Complete Virtual Memory Systems | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#key-links",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#key-links"
  },"569": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "4 - The Process",
    "content": ". | a process is a running program | in order to run multiple processes at once, the OS creates the illusion of multiple CPUs by virtualizing the CPU | achieves this by: . | mechanisms - low level methods or protocols that implement a needed piece of functionality | policies - algorithms for making some kind of decision within the OS | . | state of a process can be described by: . | the contents of memory in its address space, | the contents of CPU registers (including the program counter and stack pointer, among others), and | information about I/O (such as open files which can be read or written) | . | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#4---the-process",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#4---the-process"
  },"570": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Sharing",
    "content": ". | time sharing - allowing one entity to use a resource for a little while then context switching to allow another entity to use the resource (e.g., CPU, network link) | space sharing - a resource is divided in space among users (e.g., disk space) . | understanding process is understanding machine state . | memory - where programs instructions live via address space | registers - things like program counter/instruction pointer (what the next instruction is) | I/O info | . | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#sharing",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#sharing"
  },"571": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Process API",
    "content": ". | create - method to create new processes | destroy - method to destroy running processes | wait - method to pause a running process | misc. control - other special methods, like suspend or resume | status - get status info about process | . programs can either be loaded . | eagerly: all at once before running the program | lazily: loading pieces of code or data only as they are needed during program execution | . how are programs turned into processes? . | code and any static data loaded into memory . | this used to be done eagerly (load the whole program into memory), now it is typically done lazily (load only needed modules) | . | stack is provisioned . | in C programs, stack is used for variables, function parameters, etc | . | program might also allocate memory for program’s heap . | in C programs, memory for heap gets provisioned with malloc() and freed with free() | . | OS will do other initialization tasks such as setting up file descriptors (standard out, standard in, standard err) | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#process-api",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#process-api"
  },"572": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Process States",
    "content": "RUNNING - the process is using the CPU right now READY - the process could be using the CPU right now but (alas) some other process is BLOCKED - the process is waiting on I/O (e.g., it issued a request to a disk) DONE - the process is finished executing ZOMBIE - the process has completed executing but there is still an entry in the process table . | there are potentially other process states, for example | . enum proc_state { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE }; . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#process-states",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#process-states"
  },"573": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Data Structures",
    "content": ". | process list - aka task list, keeps track of all running programs | process control block - aka process descriptor, individual structure that stores information about each process, an entry in the process list | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#data-structures",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#data-structures"
  },"574": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "5 - Process API",
    "content": ". | process identifier - aka PID, used to identify a process | the separation of fork and exec enables features like input/output redirection, pipes, and other cool features | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#5---process-api",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#5---process-api"
  },"575": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "the fork system call",
    "content": ". | used to create a new process | creates almost an exact copy of the parent process as a child process, key difference is PID | not deterministic, as the parent or child might finish executing first | if you want to implement determinism, you implement a call to wait for the parent | . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 . | #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/wait.h&gt; int main(int argc, char*argv[]) { printf(\"hello world (pid:%d)\\n\", (int) getpid()); int rc = fork(); if (rc &lt; 0) { // fork failed; exit fprintf(stderr, \"fork failed\\n\"); exit(1); } else if (rc == 0) { // child (new process) printf(\"hello, I am child (pid:%d)\\n\", (int) getpid()); } else { // parent goes down this path (main) int rc_wait = wait(NULL); printf(\"hello, I am parent of %d (rc_wait:%d) (pid:%d)\\n\", rc, rc_wait, (int) getpid()); } return 0; } . | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#the-fork-system-call",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#the-fork-system-call"
  },"576": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "the wait system call",
    "content": ". | allows a parent to wait for its child to complete execution. | a way to introduce determinism into parent/child execution | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#the-wait-system-call",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#the-wait-system-call"
  },"577": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "the exec system call",
    "content": ". | useful when you want to run a program that is different from the calling program | . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 . | #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;fcntl.h&gt; #include &lt;sys/wait.h&gt; int main(int argc, char*argv[]) { int rc = fork(); if (rc &lt; 0) { // fork failed fprintf(stderr, \"fork failed\\n\"); exit(1); } else if (rc == 0) { // child: redirect standard output to a file close(STDOUT_FILENO); open(\"./p4.output\", O_CREAT|O_WRONLY|O_TRUNC, S_IRWXU); // now exec \"wc\"... char*myargs[3]; myargs[0] = strdup(\"wc\"); // program: wc (word count) myargs[1] = strdup(\"p4.c\"); // arg: file to count myargs[2] = NULL; // mark end of array execvp(myargs[0], myargs); // runs word count } else { // parent goes down this path (main) int rc_wait = wait(NULL); } return 0; } . | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#the-exec-system-call",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#the-exec-system-call"
  },"578": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Process Control",
    "content": ". | available in the form of signals which can cause jobs to stop, continue, or terminate | which processes can be controlled by whom is encapsulated in the idea of a user – a user can only control their own processes | a superuser can control all processes, as well as other privileged actions | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#process-control",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#process-control"
  },"579": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "6 - Limited Direct Execution",
    "content": ". | when virtualizing a CPU via time sharing, need to be concerned with . | performance - how to implement virtualization without excessive overhead | control - how can run processes while retaining control over CPU | . | . scheduler - part of the OS that decides what processes run on the CPU and when . limited direct execution - run a program directly on the CPU, with limits on how long a process can run on the CPU . when the OS wants to start a program, it . | creates a process entry in the process list | allocates memory | loads the program code into memory | locates the entry point | jumps to the entry point | starts running | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#6---limited-direct-execution",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#6---limited-direct-execution"
  },"580": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Processor Modes",
    "content": ". | user mode - code run here is restricted in what it can do | kernel mode - used for privileged operations like I/O or restricted instructions, and is the mode the OS runs in | . system calls - allow the kernel to carefully expose certain key pieces of functionality to user programs - accessing the file system - creating and destroying processes - communicating with other processes - allocating more memory . | a trap saves caller’s registers so it can return correctly by pushing data to the kernel stack; a return from trap operation will pop these values off the stack | trap instruction - program must execute this in order execute a system call; instruction jumps into kernel and raises the privilege to kernel mode | trap table - a table of what happens on exceptional events like keyboard interrupts, and is set up at boot time | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#processor-modes",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#processor-modes"
  },"581": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Switching Between Processes",
    "content": ". | cooperative - OS trusts processes to give up control to the CPU periodically | non-cooperative - OS implements a mechanism like a timer interrupt to take back control of CPU | . context switch - low-level technique to switch from one running process to another lmbench - useful to for measuring how long things take on linux . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#switching-between-processes",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#switching-between-processes"
  },"582": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "7 - Scheduling",
    "content": ". | scheduling is higher level policy for when to apply lower level mechanism (e.g., context switching) when virtualizing resources | in order to compare different scheduling policies, need metrics to compare | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#7---scheduling",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#7---scheduling"
  },"583": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Key Metrics",
    "content": "turnaround time . | time in which a job completes minus the time a job arrives | $ T_{turnaround} = T_{completion} - T_{arrival} $ | . fairness . | the equality with which jobs are treated | one example is Jain’s Fairness Index | often at odds with performance, as most fair way to run jobs isn’t often the most performant | . response time . | time when a job arrives to when it’s first scheduled | optimizations for turnaround time might not be helpful for response time | $ T_{response} = T_{firstrun} - T_{arrival} $ | . overlap . | when dealing with I/O (or any blocking task), it is good to kick off the blocking task then switch, or to overlap executions | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#key-metrics",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#key-metrics"
  },"584": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "First In, First Out (FIFO)",
    "content": ". | simplest algo for scheduling – job that arrives is first to be processed | suffers from convoy effect – large, expensive job blocks small, fast jobs | normally only works when all jobs run in same amount of time | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#first-in-first-out-fifo",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#first-in-first-out-fifo"
  },"585": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Shortest Job First (SJF)",
    "content": ". | jobs are organized based on job length at arrival | optimal if all jobs arrive at the same time, but bad for response time | if not all jobs arrive at same time, you need to add preemption (like an interrupt for new arrivals), called Shortest Time-to-Completion First (STCF) | most modern schedulers are preemptive | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#shortest-job-first-sjf",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#shortest-job-first-sjf"
  },"586": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Shortest Time-to-Completion First (STCF)",
    "content": ". | adds preemption to shortest job first scheduling | any time a new job enters the system, the scheduler determines which job has least time left and schedules that one | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#shortest-time-to-completion-first-stcf",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#shortest-time-to-completion-first-stcf"
  },"587": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Round Robin",
    "content": ". | aka time slicing | instead of running job to completion, jobs are run for a time slice (aka scheduling quantum) | need to amortize cost (spread cost out over long term) of context switching, so you don’t want to switch context too often or wait too long so as to remove all benefits of round robin algo | round robin is more fair and like any policy that is fair will perform more poorly on turnaround time – can run shorter jobs to completion if you are willing to be unfair, which might affect response time | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#round-robin",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#round-robin"
  },"588": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "8 - Multi-Level Feedback Queue",
    "content": ". | for most jobs, we won’t know length of jobs, so . | how do we optimize for turnaround time, and | how do we make a system feel responsive for interactive users? | . | multi-level feedback queue has multiple levels of queues, and uses feedback to determine priority of given job | instead of demanding a priori knowledge of the nature of a job, it observes the execution of a job and prioritizes it accordingly | manages to achieve the best of both worlds: it can deliver excellent overall performance (similar to SJF/STCF) for short-running interactive jobs, and is fair and makes progress for long-running CPU-intensive workloads | can be difficult to parameterize: how many queues should there be, how big should the time slice be | . | many systems, including BSD UNIX derivatives, Solaris, and Windows NT and subsequent Windows operating systems use a form of MLFQ as their base scheduler | some schedulers allow you to give advice to help set priority (can be used or ignored) - e.g., linux tool nice | other schedulers use a decay-usage algorithm to adjust priorities (instead of a table or exact rules below) . | two problems with MLFQ . | process starvation: interactive jobs will take all the CPU time from non-interactive processes | gaming the scheduler - a process tricking the scheduler into giving more time to the process | a process might change its behavior, increasing in interactivity but not treated as such | . | . priority boosts helps with process starvation by periodically bumping up the priority of jobs running in lower queues voodoo constants - constants that require some sort of black magic to set correctly . general rules outlined: . | Rule 1: If Priority(A) &gt; Priority(B), A runs (B doesn’t). | Rule 2: If Priority(A) == Priority(B), A &amp; B run in round-robin fashion using the time slice (quantum length) of the given queue. | Rule 3: When a job enters the system, it is placed at the highest priority (the topmost queue). | Rule 4: Once a job uses up its time allotment at a given level (regardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue). | Rule 5: After some time periodS, move all the jobs in the system to the topmost queue. | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#8---multi-level-feedback-queue",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#8---multi-level-feedback-queue"
  },"589": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "9 - Scheduling - Proportional Share",
    "content": "proportional share (fair-share) scheduling - instead of optimizing turnaround time, a scheduler might guarantee that each job obtain a certain percentage of CPU time . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#9---scheduling---proportional-share",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#9---scheduling---proportional-share"
  },"590": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "lottery scheduling",
    "content": ". | a non-deterministic, probabilistic fair share scheduling algorithm | every so often, hold a lottery to determine which process runs next | tickets - represent the share of a resource that a process should receive | . ways to manipulate tickets . | ticket transfer - allows a user with a set of tickets to allocate tickets among their own jobs in whatever currency they want, then those tickets are converted to global currency | ticket transfer - a process can temporarily hand off its tickets to another process | ticket inflation - a process can temporarily raise of lower the number of tickets it owns | . lottery scheduling uses randomness, which 1. often avoids strange corner-cases 2. is lightweight, requiring little state to manage 3. can be quite fast, as long as number generation is quick . | when job length isn’t very long, lottery isn’t very fair | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#lottery-scheduling",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#lottery-scheduling"
  },"591": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "stride scheduling",
    "content": ". | a deterministic fair share scheduling algorithm | each process has a stride value which determines how long they run; as they run, their pass value is incremented to track global progress | biggest drawback is that there is global state per process to manage; how do you handle new jobs that enter the system – can’t set the pass to 0 or it will monopolize CPU | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#stride-scheduling",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#stride-scheduling"
  },"592": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "linux’s completely fair scheduler (CFS)",
    "content": ". | scheduling uses about 5% of overall datacenter CPU time | virtual runtime (vruntime) simple counting-based technique to divide CPU time | each processes vruntime increases at the same rate in proportion to real time, and the scheduler will pick the process with the lowest vruntime to run next | . CFS parameters . | sched_latency - determines how long a process should run before considering a switch; typical value is 48 (ms) | min_granularity - CFS will never set the time slice of a process to less than this value; typical value is 6 (ms) | niceness - a way to weight jobs and give priority – positive values imply lower priority | . red-black trees . | CFS uses red-black trees (a balanced binary tree) to identify which job to run next | this is logarithmic (not linear) | only contains running jobs | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#linuxs-completely-fair-scheduler-cfs",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#linuxs-completely-fair-scheduler-cfs"
  },"593": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "10 - Multiprocessor Scheduling (Advanced)",
    "content": " ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#10---multiprocessor-scheduling-advanced",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#10---multiprocessor-scheduling-advanced"
  },"594": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "13 - The Abstraction: Address Spaces",
    "content": ". | in the early days, machines didn’t provide a memory abstraction – one process ran at a time and used all the memory | soon, people began to share machines thus beginning multiprogramming, where multiple processes were ready to run at any time and the OS would switch between them | later, many people wanted to time share machines | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#13---the-abstraction-address-spaces",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#13---the-abstraction-address-spaces"
  },"595": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Address Space",
    "content": ". | an easy to use abstraction of physical memory | the address space of a program contains all of the memory state of a running program | stack - stores where a process is in its function call chain, local variables, and for parameters and return values to and from routines | heap - used for dynamically-allocated, user-managed memory (e.g., malloc() or new) | stack and heap are placed at opposite ends of the address space to allow for negative and positive growth, although this is just a convention | . | virtual addresses - in virtualizing the memory, a process never has a physical address, just the virtual - every address you see is virtual | . Goals of the Address Space . | transparency - OS should implement virtual memory in a way that is invisible to the running program | efficiency - OS should make the virtualization efficient in time (not making programs run much more slowly) and space (not using too much memory for structures needed to support virtualization) | protection - OS should make sure to protect processes from one another as well as the OS – only a process should be allowed to change what it has stored in memory; important to delivery concept of isolation | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#address-space",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#address-space"
  },"596": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "14 - Memory API",
    "content": " ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#14---memory-api",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#14---memory-api"
  },"597": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Types of Memory",
    "content": "stack . | allocations and deallocations of stack memory are handled implicitly by the compiler | sometimes called automatic memory for this reason | when you return from function, the compiler deallocates this memory, so if you need data to survive the invocation of a function, don’t leave it on the stack | . | 1 2 3 4 . | void func() { int x; // declares an integer on the stack ... } . | . heap . | more long-lived memory | allocations and deallocations are handled explicitly by the programmer | . | 1 2 3 4 . | void func() { int *x = (int *) malloc(sizeof(int)); ... } . | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#types-of-memory",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#types-of-memory"
  },"598": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "malloc()",
    "content": ". | you pass the function a size of some room on the heap, it either succeeds and gives you a pointer to the newly-allocated space or fails and returns NULL | pass in size_t which describes how many bytes you need | NULL in C is just a macro for 0 | need to include header file stdlib.h | . double *d = (double *) malloc(sizeof(double)); . | using sizeof() is a compile-time operator and not a run-time function and is considered best practice because size of various primitives change on a per-system basis (most systems int is 4 bytes and double is 8, but not all) | for strings, use malloc(strlen(s) + 1), the + 1 for an end-of-string character | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#malloc",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#malloc"
  },"599": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "free()",
    "content": ". | takes one argument, a pointer returned by malloc | size of allocated region is tracked by the memory-allocation library itself | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#free",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#free"
  },"600": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Common Memory Errors",
    "content": ". | many new languages are garbage collected, meaning there is a process to reclaim/free memory that is no longer in use – this is an example of automatic memory management | segmentation fault - an error raised when you manage memory wrong | forgetting to allocate memory - if you don’t allocate, you’ll run into a segfault and the process will die, even if the program compiled correctly | not allocating enough memory - often called a buffer overflow; sometimes this won’t break a program but will cause some data to be unexpectedly overwritten | forgetting to initialize allocated memory - this will cause an uninitialized read where a program will read some unknown data from the heap | forgetting to free memory - also known as a memory leak, and affects GC languages too | freeing memory before you are done with it - aka a dangling pointer and can cause overwritten memory or a program crash | freeing memory repeatedly - aka a double free and the effects are undefined but often results in crashes | calling free() incorrectly - aka an invalid free and occurs when you pass free an unexpected value . | purify and valgrind are good tools for finding memory-related problems | break - the location of the end of the heap for a program and is changed via the system call sbrk or brk, but should never be done manually | calloc() allocates memory and zeroes it before returning | realloc() is useful when you’ve allocated space (e.g., for an array) and need to add something to it | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#common-memory-errors",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#common-memory-errors"
  },"601": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "15 - Mechanism: Address Translation",
    "content": "hardware-based address translation - hardware interposes on each memory access (e.g., an instruction fetch, load, or store) changing the virtual address to a physical address where the data actually resides . | OS must be involved to set up hardware to manage memory | objdump on Linux allows us to disassemble C to assembly | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#15---mechanism-address-translation",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#15---mechanism-address-translation"
  },"602": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "base and bounds (dynamic) relocation",
    "content": ". | two hardware registers, a base register and a bounds/limit register | this relocation happens at runtime and is thus dynamic (rather than static) | physical address = virtual address + base | if a process generates a virtual address that is greater than the bounds or one that is negative, the CPU will raise an exception | memory management unit - the part of the processor that helps with address translation | . hardware support . os support . free list - a data structure that lists free space available internal fragmentation - base and bounds leads to wasted space within the allocated unit . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#base-and-bounds-dynamic-relocation",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#base-and-bounds-dynamic-relocation"
  },"603": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "16 - Segmentation",
    "content": ". | approach of using base and bounds is wasteful | how can we support a large address space with free space between heap and stack? | we can have base and bounds pair per logical segment of address space | segment is a contiguous portion of address space of a particular length | sparse address spaces - large amounts of unused address space in a large address space | segmentation fault - violation from memory access on a segmented machine to an illegal address | . two approaches for hardware to determine which segment an address is in . | explicit . | chop up address space into segments based on top few bits of virtual address | first two bits are segment, remaining are offset into segment | using two bits leaves one segment unused (00, 01, 10, 11 &lt;- unused), so some systems put code in same section as heap and only use one bit to select | . | . | implicit . | hardware determines how the address was formed, e.g., addresses from program counter (instruction fetch) then address is within code segment | . | . | hardware also needs to know which way segment grows to accommodate stack in addition to base and bounds registers | to save memory, sometimes its useful to share memory segments between address spaces . | need protection bits to to indicate read or write permissions | . | . fine-grained segementation - many smaller segments, but requires a segment table as a map course-grained segmentation - only a few segments, i.e., code, stack, heap . | fine-grained segmentation gives more flexibility for more use cases . | external fragmentation - physical memory becomes full of little holes of free space, making it difficult to allocate or grow segments | compact physical memory - rearrange existing segments to ease fragmentation | compaction is expensive and copying segments is memory-intensive and uses a fair amount of processor time | free list management algorithm - keep large extents of memory available for allocation | other algorithms like best-fit, worst-fit, first-fit, buddy algorithm | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#16---segmentation",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#16---segmentation"
  },"604": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "17 - Free Space Management",
    "content": ". | managing space is easier if the space is divided into fixed-size units | much harder when sizes are variable, such as user-level memory-allocation libraries like malloc | problems are with external fragmentation | sbrk system call grows heap | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#17---free-space-management",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#17---free-space-management"
  },"605": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Low-Level Mechanisms",
    "content": ". | splitting - memory allocator will find a free chunk of memory that can satisfy request and split in two | coalescing - when memory is freed, the memory allocator looks at adjacent chunks to see if freed space can be merged to an existing chunk . | free() doesn’t take a size parameter, so a header block is used to track that extra information | header takes up a small amount of space on its own . | when a user requests N bytes of memory, the memory library searches for a free chunk of N bytes plus the header | . | . | 1 2 3 4 . | typedef struct { int size; int magic; // for integrity checking } header_t; . | . | a free list is created within the free space itself | . | if you need to grow the heap, one option is to just fail and return NULL | most traditional allocators start with a small heap and grow via sbrk in most UNIX systems | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#low-level-mechanisms",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#low-level-mechanisms"
  },"606": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Basic Strategies",
    "content": ". | ideal memory allocation strategy is fast and minimizes fragmentation | . Best Fit . | search through free list and find chunks that are as big or bigger than request, and return smallest of those | downsides are that you need to search the whole list | . Worst Fit . | search through free list and find the largest chunk and break off the requested amount | downsides are that you need to search the whole list, and most studies show it performs poorly and leads to excess fragmentation | . First Fit . | search through free list and find the first block that is big enough | fast, but can pollute the beginning of the free list with small objects | address-based ordering helps keep the beginning of the list clear by ordering the free list by address of free space . | coalescing is easier and fragmentation is reduced | . | . Next Fit . | keep an extra pointer to last location searched | searches through free space are more uniform | similar performance to first fit | . if searching for 15 bytes . | best fit picks 20 | worst picks 30 | first fit picks 30 | . Segregated Lists . | if application has popular-sized requests, keep a separate list to manage objects of that size | an example is slab allocator . | allocates object caches for kernel objects that are likely to be requested ferquently (e.g., locks, file-system inodes, etc) | when cache is running low, it asks for some slabs of memory from a general allocator | freed memory will go back to general memory | objects are kept in a pre-initialized state, as initialization and destruction of data structures is costly | . | . Buddy Allocation . | memory is one big space, and when memory is requested, space is divided by two until a suitable block is found | key is that when memory is freed, allocator will check its buddies to see if it can be coalesced all the way up the tree | . | most of these approaches have difficulty scaling, as searching can be quite slow | glibc allocator is an example of a C allocator in real use | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#basic-strategies",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#basic-strategies"
  },"607": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "18 - Paging",
    "content": ". | segmentation chops up data into variable-sized chunks, leading to fragmentation | paging divides memory into fixed-sized chunks, each called a page | physical memory is then an array of fixed-sized slots called page frames | paging has several benefits: . | flexibility - the address space abstraction is fully supported, and no assumptions about how stack and heap grow need to be handled | simplicity - just need to find free pages to use for address space | . | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#18---paging",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#18---paging"
  },"608": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "translation",
    "content": ". | split virtual address into virtual page number (VPN) and offset | replace the virtual page number with the physical frame number (PFN) (sometimes called the physical page number (PPN)) | offset tells us which byte within the page we want | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#translation",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#translation"
  },"609": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "page tables",
    "content": ". | page table - per process data structure that the OS keeps to store address translations, which lets OS know where in physical memory a page resides | page table entry (PTE) - stores actual physical translation . | 20 bit VPN implies 2^20 translations, and at 4 bytes per PTE that is 4MB for each page table, and if there are 100 processes, thats 400MB | . | they can get much larger than a small segment table or base/bounds pair | simplest form is a linear page table, which is just an array . | OS indexes array by virtual page number and looks up the page-table entry at that index to find the physical frame number | . | many different bits to to dictate behavior: . | valid bit - common to indicate whether the particular translation is valid | protection bit - can the page be read from, written to, or executed from | present bit - whether this page is in physical memory or on disk (i.e., has been swapped) | dirty bit - whether page has been modified since brought into memory | reference bit (accessed bit) - whether page has been accessed | . | without careful design of both hardware and software, page tables cause system to run too slowly and take up too much memory | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#page-tables",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#page-tables"
  },"610": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "18 - Translation-Lookaside Buffers",
    "content": ". | going to paging table for every address translation is costly | translation-lookaside buffer (TLB) - part of the chip’s memory management unit (MMU) and is a hardware cache of popular virtual-to-physical address translations | . TLB control flow algo . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 . | VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; SHIFT (Success, TlbEntry) = TLB_Lookup(VPN) if (Success == True) // TLB Hit if (CanAccess(TlbEntry.ProtectBits) == True) Offset = VirtualAddress &amp; OFFSET_MASK PhysAddr = (TlbEntry.PFN &lt;&lt; SHIFT) | Offset Register = AccessMemory(PhysAddr) else RaiseException(PROTECTION_FAULT) else // TLB Miss PTEAddr = PTBR + (VPN * sizeof(PTE)) PTE = AccessMemory(PTEAddr) if (PTE.Valid == False) RaiseException(SEGMENTATION_FAULT) else if (CanAccess(PTE.ProtectBits) == False) RaiseException(PROTECTION_FAULT) else TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits) RetryInstruction() . | . | extract virtual page number (VPN) from virtual address | check if VPN in TLB | if yes: . | extract page frame number (PFN) | concatenate onto the offset from the virtual address | access memory at physical address | . | if no: . | check the page table for translation | if not valid, raise exception | update TLB | retry from step 2 | . | . | hardware caches take advantage of spatial and temporal locality | spatial locality - if a program accesses memory at address x, it will likely soon access memory near x. | temporal locality - an instruction or data item that has been recently accessed will likely be re-accessed soon in the future | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#18---translation-lookaside-buffers",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#18---translation-lookaside-buffers"
  },"611": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Who handles a TLB miss?",
    "content": ". | either hardware or OS | . hardware . | in older systems, hardware had a complex set of instruction sets (complex-instruction set computers CISC) | hardware needs to know exactly where in memory a page table is via a page-table base register | on miss, hardware walks page table, finds the relevant page table entry, updates TLB, and tires again | example is Intel x86, which uses a multi-level page table | . software . | more modern systems have limited instruction sets | reduced-instruction set computers (RISC) | on miss, hardware raises exception, traps into kernel and jumps to a trap handler | unlike other traps which resume program excecution after the trap, when OS returns from trap it needs to start at where the call to memory started | also needs to prevent infinite TLB calls – could use wired translations or unmapped handlers | benefits are simplicity and flexibility | . fully-associative cache - any given translation can be anywhere in the TLB (compared to direct-mapped cache entries, which are indexed, or less permissive set-associative caches) . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#who-handles-a-tlb-miss",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#who-handles-a-tlb-miss"
  },"612": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "How to handle context switches",
    "content": ". | when a process is context switched, the TLB entries will be incorrect for the new process’s page table | can simply flush the TLB, but this is expensive and not performance | system can provide an address space identifer (ASID) to associate a TLB entry with process | processes can share code and thus point to same physical frame number | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#how-to-handle-context-switches",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#how-to-handle-context-switches"
  },"613": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Cache replacement",
    "content": ". | least recently used (LRU) | random - simpler, avoidance of corner-cases | . exceeding TLB coverage - if number of pages a program access exceeds number of pages that fit into TLB, many misses will occur . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#cache-replacement",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#cache-replacement"
  },"614": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "20 - Paging: Smaller Tables",
    "content": ". | page tables without any optimizations are too large and consume too much memory | simple solution: use bigger tables, but this leads to waste within each page (internal fragmentation, as waste is internal to the unit of allocation) | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#20---paging-smaller-tables",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#20---paging-smaller-tables"
  },"615": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Hybrid: Paging and Segments",
    "content": ". | have a page table for each logical segment instead of the whole address space | base (from base and bounds/limits) points to the physical address of the page table (rather than where in physical memory address space begins) | . cost of paging and segments . | segmentation is not as flexible as possible as it assumes a certain usage pattern of the address space | also causes external fragmentation to occur | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#hybrid-paging-and-segments",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#hybrid-paging-and-segments"
  },"616": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Multi-level Page Tables",
    "content": ". | turns the linear page table into something like a tree | chop up page table into page-sized units, then, if entire page-table entries (PTE) is invalid, don’t allocate that page | introduces a page directory which holds whether page table is valid and where it is in physical memory | . | page directory contains one entry per page of the page table (page directory entries (PDE)) | a page directory entry has a valid bit and a page frame number (PFN) | for a large page table, it is difficult to find continguous memory, but page directory allows for level of indirection where we can put page-tables anywhere in physical memory | you can also have more than two levels, but you need to increase VPN size . | how many page table entires fit within a page, and use that as index | . | . cost of multi-level page tables . | time-space trade-off: less time equals more space, and vice versa – on TLB miss, two loads from memory will be required (one for page directory, and one for page table entry (PTE)) | adds complexity in OS or hardware handling lookup | . PDEAddr = PageDirBase + (PDIndex * sizeof(PDE)) . PTEAddr = (PDE.PFN &lt;&lt; SHIFT) + (PTIndex * sizeof(PTE)) . multi-level page table control flow . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 . | VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; SHIFT (Success, TlbEntry) = TLB_Lookup(VPN) if (Success == True) // TLB Hit if (CanAccess(TlbEntry.ProtectBits) == True) Offset = VirtualAddress &amp; OFFSET_MASK PhysAddr = (TlbEntry.PFN &lt;&lt; SHIFT) | Offset Register = AccessMemory(PhysAddr) else RaiseException(PROTECTION_FAULT) else // TLB Miss // first, get page directory entry PDIndex = (VPN &amp; PD_MASK) &gt;&gt; PD_SHIFT PDEAddr = PDBR + (PDIndex * sizeof(PDE)) PDE = AccessMemory(PDEAddr) if (PDE.Valid == False) RaiseException(SEGMENTATION_FAULT) else // PDE is valid: now fetch PTE from page table PTIndex = (VPN &amp; PT_MASK) &gt;&gt; PT_SHIFT PTEAddr = (PDE.PFN &lt;&lt; SHIFT) + (PTIndex * sizeof(PTE)) PTE = AccessMemory(PTEAddr) if (PTE.Valid == False) RaiseException(SEGMENTATION_FAULT) else if (CanAccess(PTE.ProtectBits) == False) RaiseException(PROTECTION_FAULT) else TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits) RetryInstruction() . | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#multi-level-page-tables",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#multi-level-page-tables"
  },"617": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Inverted Page Tables",
    "content": ". | instead of having many page tables (one per process), use a single page table that has an entry for each physical page of the system | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#inverted-page-tables",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#inverted-page-tables"
  },"618": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "21 - Beyond Physical Memory: Mechanisms",
    "content": ". | in order to support larger address spaces, OS needs a place to stash additional portions of address space that isn’t in great demand | modern systems use hard disk drive for this | older systems used memory overlays, which required programmers to manually move pieces of code or data in and out of memory | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#21---beyond-physical-memory-mechanisms",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#21---beyond-physical-memory-mechanisms"
  },"619": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Swap Space",
    "content": ". | allows OS to support the illusion of large virtual memory for multiple concurrently-running processes | swap pages out of memory to a space, and swap pages into memory from it | . | present bit - additional piece of data in the page-table entry (PTE) that says whether data is in memory or in swap space . | if set to 1, the page is present in physical memory; 0, it is not in memory but on disk somewhere | . | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#swap-space",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#swap-space"
  },"620": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Page Faults",
    "content": ". | accessing a page that is not in physical memory triggers a page fault, and resolution is handled via a page-fault handler | page faults typically handled by operating system (rather than hardware) because: . | page faults to disk are slow, so additional overhead of OS instructions are minimal | hardware would need to understand swap space, how to issue I/Os to the disk, and other details | . | . 3 cases when a TLB miss occurs . | page present and valid -&gt; update TLB, try again | page not present -&gt; page-fault handler | page not valid -&gt; seg fault | . Page-Fault Control Flow Algorithm (Hardware) . | 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 . | VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; SHIFT (Success, TlbEntry) = TLB_Lookup(VPN) if (Success == True) // TLB Hit if (CanAccess(TlbEntry.ProtectBits) == True) Offset = VirtualAddress &amp; OFFSET_MASK PhysAddr = (TlbEntry.PFN &lt;&lt; SHIFT) | Offset Register = AccessMemory(PhysAddr) else RaiseException(PROTECTION_FAULT) else // TLB Miss PTEAddr = PTBR + (VPN * sizeof(PTE)) PTE = AccessMemory(PTEAddr) if (PTE.Valid == False) RaiseException(SEGMENTATION_FAULT) else if (CanAccess(PTE.ProtectBits) == False) RaiseException(PROTECTION_FAULT) else if (PTE.Present == True) // assuming hardware-managed TLB TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits) RetryInstruction() else if (PTE.Present == False) RaiseException(PAGE_FAULT) . | . Page-Fault Control Flow Algorithm (Software) . | 1 2 3 4 5 6 7 . | PFN = FindFreePhysicalPage() if (PFN == -1) // no free page found PFN = EvictPage() // run replacement algorithm DiskRead(PTE.DiskAddr, PFN) // sleep (waiting for I/O) PTE.present = True // update page table with present PTE.PFN = PFN // bit and translation (PFN) RetryInstruction() // retry instruction . | . Page-Replacement Policy . | if memory is full, need a way to evict/replace pages | typically an active process, handled by a swap/page daemon . | high watermark and low watermark – if there are fewer than LW pages, a background process evicts pages until there is HW pages available | . | many replacements happen at once, which allows for performance optimizations by clustering (which reduces seek and rotational overheads of a disk) | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#page-faults",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#page-faults"
  },"621": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "22 - Beyond Physical Memory: Policies",
    "content": " ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#22---beyond-physical-memory-policies",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#22---beyond-physical-memory-policies"
  },"622": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Cache Management",
    "content": "main memory holds some subset of all pages, can be though of as a cache for virtual memory pages in system goal is to minimize number of cache misses (how many times fetch a page from disk) average memory access time (AMAT) - AMAT = Tm + (Pmiss * Td) - Tm: cost of accessing memory - Pmiss: probability of cache miss - Td: the cost of accessing disk . 3 types of cache misses: . | cold-start/compulsory - cache is empty to begin with, and this is first reference to item | capacity - cache ran out of space and had to evict an item | conflict - results in hardware because of limits on where an item can be placed in hardware cache (due to set-associativity) – OS page cache is fully-associative so no conflict misses happen | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#cache-management",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#cache-management"
  },"623": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Optimal Replacement Policy",
    "content": ". | replace/evict page that will be accessed furthest in the future results in fewest cache misses, unfortunately really hard to implement | FIFO - performs poorly compared to optimal – doesn’t determine importance of blocks | Random - a little better than FIFO but worse than optimal | . Using History: Least Recently Used . | use history like frequency (how often a page is accessed) or recency (how recently a page was accessed) | principle of locality - programs tend to access certain code sequences and data structures quite frequently, and we should use history to determine what pages are or aren’t important . | spatial locality (data tends to be accessed in clusters) | temporal locality (data tends to be accessed close in time) | . | least frequently used (LFU) - how often a page is accessed | least recently used (LRU) - when a page was most recently used | . No Locality Workload . | each access is to a random page | when there is no locality in workload or the cache is large enough to fit all data, lru, lfu, random, and fifo perform the same | . 80-20 Workload . | 80% of accesses to 20% of pages (hot pages), 20% to the remaining 80% (cold pages) | LRU does the best, and while improvement might seem minor it would lead to substantial performance gains | . Looping Sequential Workload . | refer to n pages in sequence, then start again | common workload for databases | worst case for LRU and FIFO, random performs best | . LRU performance . | to implement LRU perfectly, you’d need a data structure that stores when a page was last accessed, and it would need to be updated every memory reference – this can be bad performance; even if you get hardware support to store last access, scanning all pages would take a long time | more performance algorithms are scan resistant - don’t need to scan entire data structure to find relevant data | can approximate LRU using a use bit - on page access, use bit is set to 1, and when searching for a page to evict, the OS checks each page and if use bit is set to 1, it sets it to 0 and moves on until it finds a page with a use bit set to 0 | also could consider dirty (modified) pages, as if memory structure has been modified, it needs to be written back to disk to evict, which is costly – could prefer clean pages to evict | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#optimal-replacement-policy",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#optimal-replacement-policy"
  },"624": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Other Memory Policies",
    "content": ". | demand paging - OS brings page into memory when it is accessed, compared to prefetching, where an OS guesses when a page might be accessed before it is demanded | when to write page to disk – clustering/grouping of writes is more performant | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#other-memory-policies",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#other-memory-policies"
  },"625": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Thrashing",
    "content": ". | when memory demands of running process exceeds available system memory, the system will be constantly paging | admission control - a system might decide not to run a subset of processes, with the idea that reducing a processes’s working sets would fit into memory – do less but better | out-of-memory killer - some Linux machines just kill off a memory-intensive process | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#thrashing",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#thrashing"
  },"626": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "23 - Complete Virtual Memory Systems",
    "content": " ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#23---complete-virtual-memory-systems",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#23---complete-virtual-memory-systems"
  },"627": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "VAX/VMS Virtual Memory",
    "content": ". | introduced in late 1970s by Digital Equipment Corporation (DEC) | uses a hybrid of paging and segmentation | . Address Space . | lower half of address space called “process space” and is unique to each process . | first half of process space (P0) contains user program and heap data and grows downwards | second half (P1) contains stack and grows upwards | . | upper half of address space called system space (S) . | only half used | contains OS data, and is shared across processes | . | page 0 is reserved to aid in finding NULL pointer accesses | because page tables can be allocated from kernel memory, translation is difficult – hopefully TLB handles each translation | . Page Replacement . | page table entry contains . | a valid bit | a protection field (4 bits) | a modify bit | an OS-reserved field (5 bits) | a physical frame number (PFN) to store location of page in physical memory | NO REFERENCE BIT! | . | uses a segmented FIFO policy . | each process has max pages it can keep in memory (resident set size RSS) | there is a second-chance list where pages that have fallen off the queue go (clean-page free list and dirty-page list) | if new process needs a page, it takes it off clean list (unless original process needs that page again first) | the bigger the second-chance lists are, the closer FIFO performs to LRU | . | . Other Optimizations . | demand zeroing - instead of clearing out a page immediately for another process to use, this happens lazily upon demand, which saves effort if the page is never read or written | copy-on-write - when OS needs to copy one page from one address to another, it maps it and marks as read-only – if it only needs to be read, it saves effort | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#vaxvms-virtual-memory",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#vaxvms-virtual-memory"
  },"628": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Linux",
    "content": ". | divided between user and kernel portions of address space | two types of kernel virtual addresses . | kernel logical addresses - contains most kernel data structures like page tables, per-process kernel stacks, apportioned by kmalloc and cannot be swapped to disk | kernel virtual address - usually not contiguous, apportioned by vmalloc and used to allow the kernel to address more than ~1GB of memory (limitation of 32 bit system not much relevant anymore) | . | . Page Tables . | provides hardware-managed, multi-level page table structure – one page table per process | OS sets up mappings in memory and points register at the start of the page directory, hardware handles the rest | OS is involved in process creation, deletion, context switches | support for huge pages beyond the typical 4KB page . | useful for certain workloads like databases | limits TLB misses and makes TLB allocation faster | could lead to large internal fragmentation, and swapping doesn’t work well as I/O is expensive | . | . Page Cache . | unified, and keeps pages in memory from three sources . | memory-mapped files | file data and metadata from devices (tracked from read() or write() calls) | heap and stack pages for processes (called anonymous memory because no named file backing store) | . | uses a 2Q replacement algorithm . | keeps two lists and divides memory between | first time pages are put into inactive list | when page is re-referenced, it is promoted to active list | replacements are pulled from inactive list | not typically managed in perfect LRU order, but typically uses a clock algo to prevent full scans | . | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#linux",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#linux"
  },"629": {
    "doc": "Operating Systems: Three Easy Pieces",
    "title": "Security",
    "content": ". | buffer overflow - allows attacker to insert arbitrary data into target’s address space, and usually occurs when developer assumes input won’t be overly long and inserts into a buffer – can trigger a privilege escalation, which gives attacker access to privileged mode | return-oriented programming - lots of pieces of code (gadgets) in program’s address space, and by changing return address, attacker can string together gadgets to execute arbitrary code – combatted by address space layout randomization (ASLR) which randomizes virtual address layout | . ",
    "url": "/notes/tech_books/operating-systems-three-easy-pieces#security",
    
    "relUrl": "/notes/tech_books/operating-systems-three-easy-pieces#security"
  },"630": {
    "doc": "Parable of the Sower",
    "title": "Parable of the Sower",
    "content": "Octavia Butler, 1993 . ",
    "url": "/notes/other_books/parable-of-the-sower",
    
    "relUrl": "/notes/other_books/parable-of-the-sower"
  },"631": {
    "doc": "Parable of the Sower",
    "title": "Summary",
    "content": "Lauren Olamina is a 15 year old girl living in a gated community in southern California in a civilization on the verge of collapse induced by climate change. Water is a rarity, food prices are steep and climbing, disease and destitution rampant outside the walls of Lauren’s home, and the wilderness of man breaking down the gates trying to get in. Lauren has rejected the God of her father, a local preacher, and has begun to tentatively expound the precepts of her own religion, one she calls Earthseed that holds that God is change. The novel is set up as a journal, tracking several years of Lauren’s life as her gated community is beset by robberies and death. Her younger brother, Keith, leaves the community to become a man and then a corpse in short order, as the unrelenting outside destroys him. Lauren tries to open people’s eyes to the reality of their plight, begging them to prepare as they sit on the precipice of a void. Her father agrees, but doesn’t want to scare anyone. One day, her father just disappears on his way back home from his job at the college. Despite the community’s best efforts to find him, they can’t, and he is presumed dead. Eventually, the community is completely overrun, leading to a near complete slaughter of all residents, including Lauren’s stepmother and brothers. Lauren barely escapes with her life, but her preparation has paid minor dividends. She has a survival pack, and the clothes on her back. Upon returning to her town to see if she can find news of her family, she encounters two survivors, Zahra, one of the wives of someone in town, and Harry, someone Lauren’s age. Together, they set out up north to find salvation. There are intimations that Canada is a haven. Along the way, they continue to grow their group, picking up a mother and her son, an older man named Bankole, who Lauren eventually becomes romantically entangled with, and a few others. As they head up north, Bankole reveals to Lauren that he has a homestead he owns, several hundred acres, where his sister is currently living. Bankole wants to escape there with Lauren, but she only agrees if the group can also come, and she can start the first Earthseed community there. Bankole, after some cajoling, agrees. When they finally reach Bankole’s homestead, they find that his sister and her entire family have perished in a house fire likely caused by pyro addicts, pyro being an addictive and widespread drug that makes fire orgasmic to watch for its users. Despite the setback, everyone agrees that they will stay on Bankole’s homestead to start the first Earthseed community. ",
    "url": "/notes/other_books/parable-of-the-sower#summary",
    
    "relUrl": "/notes/other_books/parable-of-the-sower#summary"
  },"632": {
    "doc": "Parable of the Sower",
    "title": "Thoughts",
    "content": "I had never read Octavia Butler before. Frankly, despite being what could generously be called a hardcore sci-fi nerd, I hadn’t really even heard of her, and while we are doing disclosures, I bought this book accidentally. I had wanted to purchase the graphic novel that had apparently come out this year and had won a Hugo, so imagine my surprise when this book showed up and there were no pictures, just a sea of words. But what this book did have, other than the sunk cost of an already debited purchase, was, emblazoned on the cover, the words “foreword […] N.K. Jemisin”. As an avid Jemisin fan, I thought, might as well give this a shot. I knew the follow up had won a Hugo as well, and Butler was a MacArthur fellow, so I figured why not. And I sure am happy I did. Butler crafts a convincing world, one that, while maybe not hitting the prophecy mark for ~2026 when the novel is set, does pass the smell test of believability. Written in 1993, Butler imagines a world that is on the cusp of disintegration, one not just staring out to an abyss of civilization-less chaos but teetering precipitously over that edge. Climate change has destroyed what we thought was a robust ecosystem, has exposed humanity’s fragility, reducing life to the base physiological needs of food, shelter, and water. Safety, love, belonging – these are fever dreams of a dying civilization. Butler’s protagonist, Lauren Olamina, at once self-assured and confident, on the other, vulnerable and frightened, is an interesting intersectional character, a black female in a world where there are no more protections from the pack ostracizing the Other. Implicit in any dystopian novel seems to be the argument that civilization is what protects the marginalized, that as soon as that civilization, that socially enforced decorum, goes away, the most savage pack wins, but within this novel, Lauren leads a new vestige of humanity, one that takes care of the physically weak or infirm, one that esteems loyalty and safety in numbers regardless of race or creed. When civilization collapses, little communist shangri-las blossom in the petri dish of the dissolution. Earthseed is that utopia. The writing is straight forward, and the narrative is told in epistolary format, with Lauren composing her journal entries sometimes days later. There is the sense of performance, of Lauren constantly aware that her writing and memory is for posterity, and so at times feels contrived and too heavily mytho-poetic. This of course isn’t a criticism of Butler, but rather, an interesting avenue of criticism of the text, how Lauren as author sees her role in her own reality and the reality she is trying to create through Earthseed. All said, the novel presents what feels an exceptionally timely world here on the dawn of 2022. The world was so compelling, its characters so realized, I had ordered the sequel before the 100th page, and I was already mourning the fact that a third in the series was never complete. I suppose I’ll have to settle for a two-sided triangle of a trilogy, and I can’t wait to see what Earthseed comes to next. ",
    "url": "/notes/other_books/parable-of-the-sower#thoughts",
    
    "relUrl": "/notes/other_books/parable-of-the-sower#thoughts"
  },"633": {
    "doc": "Parable of the Talents",
    "title": "Parable of the Talents",
    "content": "Octavia Butler, 1998 . ",
    "url": "/notes/other_books/parable-of-the-talents",
    
    "relUrl": "/notes/other_books/parable-of-the-talents"
  },"634": {
    "doc": "Parable of the Talents",
    "title": "Summary",
    "content": "The novel continues the story of Parable of the Sower but introduces an additional framing narrative of Lauren Olamina’s daughter reflecting back on her mother’s diary entries. Additionally, there are entries from Lauren’s husband, Bankole, and Lauren’s brother, Marcus. Things begin five years after the previous novel ends, with everyone settled in the first Earthseed community, Acorn. The population has grown and the settlement is transitioning from surviving to thriving. Olamina and Bankole are also trying to have a daughter. One day, when trying to find the sisters of a child that was rescued, Olamina finds her brother, Marcus, being sold as a slave in a local settlement. She rescues him and brings him back to Acorn. Eventually, he recounts his story to his sister, mentioning that he was a preacher before he was captured and enslaved. Finding the allure of preaching too persistent, he wants to preach at the next Earthseed Gathering. Olamina cautions that this isn’t a dictatorial pulpit but rather a discussion, and his ideas and sermon would be subject to questions. Marcus proceeds to preach anyway, lecturing the congregation on the unchanging nature of God. Of course, Earthseed’s God is change, and this leads to a substantial amount of questions from those in attendance. Marcus loses the thread of the sermon, and he departs Acorn a few days later in order to make his own way. Meanwhile, Christian demagogue Jarret, who wants to Make America Great Again, has been elected the next president of the United States. As bad as he is, his followers, the Crusaders, are worse. Eventually, these Crusaders show up to Acorn and enslave everyone while removing all the children to send to new Christian homes in lieu of being raised by heathens. Amongst these children are Olamina and Bankole’s new daughter. Bankole dies in the initial attack, leaving Olamina alone. She and the residents of Acorn endure nearly two years of “re-education”, brutal slavery at the hands of these Crusaders. Eventually, a landslide destroys the central control unit for all the enslavement collars, allowing the residents of Acorn to slay their captors and escape. Olamina then begins to search for her lost daughter, who could be anywhere. In her search, she stumbles upon her brother, Marcus, preaching at a Christian American shelter. She confronts him, asking him if he knew what his brethren, the Christian American Crusaders, have done. He plays coy, eventually disappearing from the shelter to another state before Olamina can question him again. Olamina, still trying to find her daughter, decides it’s time to start Earthseed in earnest, looking for teachers to go out and spread the word. The narrative eventually cuts to Olamina’s daughter, who is going to meet her mother for the first time. Her mother is 58 at this point, and Earthseed is wildly prosperous. Olamina’s daughter has met her Uncle Marcus, and is in fact staying at his house as he paid for her to go through college and then graduate school. The meeting between Larkin, Olamina’s daughter, and Olamina, does not go well. Marcus has firmly stolen Larkin from Olamina. The novel ends with Olamina, 81, watching as the first Earthseed colonists depart to outer space, to the destiny Earthseed always promised amongst the stars. ",
    "url": "/notes/other_books/parable-of-the-talents#summary",
    
    "relUrl": "/notes/other_books/parable-of-the-talents#summary"
  },"635": {
    "doc": "Parable of the Talents",
    "title": "Thoughts",
    "content": "This novel is a richer tale than the first, building on the world Butler has sketched. The plot still revolves around Olamina but adds in her daughter and brother as well. It’s hard not to feel the same compulsion towards Olamina as other characters do. This story is so many things, but first and foremost it is a story of betrayal, of a brother’s betrayal of his sister, of a mother’s betrayal of her daughter. We as readers are left to sift the wreckage, forced to side with mother over daughter or brother over sister. It is a cautionary tale, an ecological warning, an elegy, a creation story. The mythos of this world is nearly indistinguishable from ours; Butler’s Make America Great Again demagogue might be more elegant, and more handsome, but this world would pass for ours. Butler narrows the focus to two zealots and their followers, one espousing a story of creation, of destiny, of love, the other, a story of destruction, of division, of hatred, but nonetheless the book makes a distinction for the effects of faith as a tool for the wielder. Humans are capable of great kindness and great destruction, but also great apathy, and great mental pliability on when to exercise any of the above. Having read this book, Butler’s language is like everything in the world she has created – built for utility and effect. Her metaphors are not flights of fancy, her characterization sparse and understated. Much of the action happens via dialogue, or is reported after the event. Her central metaphor, the Parable of Talents, positions this book as a parable, a cautionary tale that says it matters what we do with the gifts we are given, even if that gift is one of manipulation. Manipulation isn’t a purely negative conduit of human interaction on a human scale, but it can destroy everything immediately around us. But when the world is on the brink, those gifts might be better given to the world rather than buried in the dirt of your own personal life. It’s just a shame Butler couldn’t continue giving and finish this trilogy before her death. ",
    "url": "/notes/other_books/parable-of-the-talents#thoughts",
    
    "relUrl": "/notes/other_books/parable-of-the-talents#thoughts"
  },"636": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Patterns of Enterprise Application Architecture",
    "content": " ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture"
  },"637": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "What is Architecture?",
    "content": ". | high level breakdown of system into parts | decisions that are hard to change | . In the end, architecture boils down to the important stuff – whatever that is. (2) . | most widely used technique is to break (decompose) the application into layers and how these layers work together | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#what-is-architecture",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#what-is-architecture"
  },"638": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Enterprise Applications",
    "content": ". | they involve persistent data around for multiple runs of an application | lots of data | many users access data concurrently which involves potential access issues | lots of user interface screens to interact with data | need to integrate with other apps in a variety of different languages/stacks | conceptual dissonance between technology and data – needs to be read, munged, &amp; written in a variety of syntactic and semantic flavors | complex business “illogic” to handle domain complexity | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#enterprise-applications",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#enterprise-applications"
  },"639": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Performance",
    "content": ". | any performance advice shouldn’t be treated as fact until actually tested | basic, universal advice - minimize remote calls | significant changes to config will invalidate assumptions about performance | some performance vocab . | response time - time it takes for system to process response fromt he outside | responsiveness - how quickly system acknowledges requests as opposed to processing | latency - minimum time required to get any form of response | throughput - how much stuff you can do in a given time | load - how much stress a system is under | load sensitivity - how response time varies under load (a system degrades under load) | efficiency - performance divided by resources | capacity - max effective throughput or load | scalability - how additional resources affect performance and can either be horizontal (scaling out, adding new machines) or vertical (scaling up, adding memory, CPU, storage to a machine) | . | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#performance",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#performance"
  },"640": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Pattern",
    "content": "Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in a way that you can use this solution a million times over, without ever doing it the same way twice. (9) . | focus of a pattern is a common and effective solution to a particular problem | don’t read all the details of each pattern, just enough to know what to look up | never apply a solution blindly | value isn’t giving you the idea of a pattern but rather helping you communicate it | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#pattern",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#pattern"
  },"641": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Layers",
    "content": ". | way to decompose complicated software systems | high level layer uses lower level services, but lower level should remain unaware of higher level | benefits: . | single layer as a coherent whole without knowing much about other layers | you can substitute layers | minimize dependencies between layers | layers are good places for standardization | lower layers can be reused for multiple higher level services | . | downsides: . | you can’t encapsulate everything (thinking adding an additional UI element requires database changes and corresponding changes to all intermediary layers) | performance hit for layering | . | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#layers",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#layers"
  },"642": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "3 Principal Layers",
    "content": ". | presentation - handles interaction between user and software - interprets actions/commands and displays info to user | data source - communicates with other systems that carry out task on behalf of the application | domain logic - business logic that is work the application does for the domain you’re working in | . | Layer | Responsibilities | . | Presentation | Provision of services, display of information (e.g., in Win-dows or HTML, handling of user request (mouse clicks, keyboardhits), HTTP requests, command-line invoca-tions, batch API) | . | Domain Logic | that is the real point of the system | . | Data Source | Communication with databases, messaging systems, trans-action managers, other packages | . | hexagonal architecture - any system as a core surrounded by interfaces to external systems – this is a symmetrical view that doesn’t distinguish between services you provide and services you consume | choose most appropriate for of separation for problem, but make sure there is separation | domain and data source should never be dependent on presentation | generally, we are talking about logical layers – typically physical layers break down to client vs. server | don’t separate layers into discrete processes unless needed. | complexity boosters: they all come at a cost. e.g., extreme performance requirements, explicit multi-threading, distribution, paradigm chasms | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#3-principal-layers",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#3-principal-layers"
  },"643": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Domain Logic",
    "content": "3 patterns to organize domain logic . | transaction script | domain model | table module | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#domain-logic",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#domain-logic"
  },"644": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Transaction Script",
    "content": ". | transaction here is used in the sense of a business operation, not an ACID-compliant database transaction | single procedure for each action a user might want to do | useful for very simple domains, since as logic increases in complexity, duplication increases, and application code becomes hard to untangle | all behavior for action is within the transaction script | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#transaction-script",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#transaction-script"
  },"645": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Domain Model",
    "content": ". | build a model of the domain around the nouns in the domain | behavior then is in the interactions between objects | moving to domain model involves a paradigm shift to object-oriented thinking | have to deal with more complex mapping to database | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#domain-model",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#domain-model"
  },"646": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Table Module",
    "content": ". | looks like domain model, but instead of object for all nouns, you get an object for every table in the database | pulls all records as a Record Set from the database, and in order to work on 1 you’d pass in an id to that Record Set | there needs to be special tooling for these Record Sets | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#table-module",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#table-module"
  },"647": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Record Set",
    "content": ". | in memory representation of tabular data | looks exactly like the result of a SQL query but can be manipulated by other parts of the system | can easily be manipulated by domain logic | typically a list of maps: [{...}, {...} ...] | can have an implicit or implicit interface (think person['name'] vs person.name) | can be connected (need active connection to database), or disconnected (can be manipulated offline) | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#record-set",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#record-set"
  },"648": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Service Layer",
    "content": ". | defines application boundary with a layer of services that establish a set of available actions (API) &amp; coordinates the applications response to each operation | lay over a Domain Model or a Table Module and provides a clean API &amp; a good spot to put things like transaction control and security | minimal case is to make it a Façade, maximal is to put business logic in it | controller entity - have logic and behavior exclusive to use case or transaction in a separate Transaction Script called a controller or service type | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#service-layer",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#service-layer"
  },"649": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Gateway (Base Pattern)",
    "content": ". | an object that encapsulates access to an external resource or system | in reality, this is a simple wrapper pattern | good spot to apply service stub | some overlap with Gang of Four patterns Façade and Adapter | useful for encapsulating an awkward interface for something rather than letting it affect rest of code | if you need to decouple subsystems, another choice is Mapper, but this is more complicated | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#gateway-base-pattern",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#gateway-base-pattern"
  },"650": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Mapper (Base Pattern)",
    "content": ". | an object that sets up communication between two independent objects | similar to Mediator | useful when you want neither subsystem to have dependency on their interaction, like with a database (Data Mapper) | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#mapper-base-pattern",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#mapper-base-pattern"
  },"651": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Service Stub",
    "content": ". | removes dependence on problematic services while testing | in extreme programming, this is called a “mock object” | should be as simple as possible | replace service with service stub that runs in memory and locally | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#service-stub",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#service-stub"
  },"652": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Managing Database Connections",
    "content": ". | connections act as the link between application code and the database | expensive to create, so preferable to use a pool (although verify a pool helps performance as with some modern data source tooling it doesn’t matter – best to use a connection manager to encapsulate the connection entirely) | connections must be closed as soon as you are done, and might be done in two ways: . | rely on garbage collection to close, but garbage collection isn’t immediate | explicit closing, which is riskier and more prone to forgetting | . | a good approach is to tie connection open and close with a transaction | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#managing-database-connections",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#managing-database-connections"
  },"653": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Table Data Gateway",
    "content": ". | an object that acts as a gateway to a table – one object handles all rows in a table | way to stop mixing SQL into application logic | simple interface with several find, update, insert, delete methods | useful to think of as a wrapper for SQL statements | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#table-data-gateway",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#table-data-gateway"
  },"654": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Row Data Gateway",
    "content": ". | an object that acts as a gateway to a single row in the database – one instance per row | exactly mimics a single record | if there is any domain logic in this object, then it is Active Record | useful with Transaction Script and less so with Domain Model | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#row-data-gateway",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#row-data-gateway"
  },"655": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Active Record",
    "content": ". | an object that wraps a row in a database table or view, encapsulates database access, and adds domain logic to that object | each Active Record is responsible for saving to and loading from the database, and also any behavior (domain logic) that exercises on that object | should exactly match the database | good for domain logic that isn’t that complex – create, read, update, delete operations | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#active-record",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#active-record"
  },"656": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Data Mapper",
    "content": ". | a layer of mappers that moves data between objects and a database while keeping them independent of each other and the mapper itself | separate in memory objects from the database via a layer of software | primary occasion to use is when you want the database schema and the object model to evolve independently | price is the extra layer required to maintain | more complicated business logic leads to Domain Model or Data Mapper | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#data-mapper",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#data-mapper"
  },"657": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Unit of Work",
    "content": ". | maintains a list of objects affected by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems | when it comes time to commit, the Unit of Work decides what to do – i.e., open a transaction, concurrency checks, writes changes to a database | keeps track of all objects you modify, so all you need to worry about are the objects altered in synching in memory data to database | great strength is that it keeps all info in one place | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#unit-of-work",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#unit-of-work"
  },"658": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Identity Map",
    "content": ". | ensures that every object only gets loaded once, and keeps each object in a map – looks up objects in the map when referring to them | primary key or surrogate key (any column or set of columns that can be used as a PK instead of natural key e.g., incrementing integer) | either explicit (each data point has access method) or generic (one access method for all data) | useful if any data needs to be pulled from the database and modified | also useful as transactional cache | won’t help for cross-session concurrency protections, as this is meant for single session | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#identity-map",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#identity-map"
  },"659": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Lazy Load",
    "content": ". | an object that doesn’t contain all the data you need but knows where to get it | lazy initialization - use NULL to signal field hasn’t been loaded yet | value holder object that wraps other object – ask the value holder for data and it goes to the data source (useful for avoiding identity problems of virtual proxy) | virtual proxy - object that looks like object in the field but doesn’t contain anything – only returns data when one of its methods are called | ghost - a real object in a partial state | ripple loading - when you cause more database accesses than needed, hurting performance | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#lazy-load",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#lazy-load"
  },"660": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Web Server",
    "content": ". | web server’s job to interpret URL of request and hand over control to a web server program | 2 ways of structuring program in a web server - as a script or as a server page | script works best for interpreting the request, server page for formatting a response | this leads to Model-View-Controller pattern | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#web-server",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#web-server"
  },"661": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Model-View-Controller",
    "content": ". | request comes to input controller | input controller pulls info from request | forwards business logic to model object | model object talks to data source and does what is indicated in request, as well as gathers info for response | control passed to input controller from model, which decides what view to select | control is passed to view along with response data for dipslay | most important reason for MVC is to separate models from presentation | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#model-view-controller",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#model-view-controller"
  },"662": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Application Controller",
    "content": ". | different from input controller in MVC – controls the flow of the application | good rule of thumb is if machine is in control of screen flow, it is useful, and if the user is in control, it is not | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#application-controller",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#application-controller"
  },"663": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Offline Concurrency",
    "content": ". | concurrency control for data that’s manipulated during multiple database transactions | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#offline-concurrency",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#offline-concurrency"
  },"664": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Lost Updates",
    "content": ". | when someone starts an update after someone &amp; finishes before them, the first transaction will wipe out the second | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#lost-updates",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#lost-updates"
  },"665": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Inconsistent Reads",
    "content": ". | when a transaction reads object x twice and x has different values – between the two reads, someone modified x | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#inconsistent-reads",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#inconsistent-reads"
  },"666": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Correctness vs. Liveness",
    "content": ". | correctness (or safety, consistency) vs. liveness (how much concurrent activity can go on) | these concepts are in contention (think CAP theorem) | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#correctness-vs-liveness",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#correctness-vs-liveness"
  },"667": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Execution Contexts",
    "content": ". | request - a single call from outside world that the software works on a potentially sends a response back | session - a long-running interaction between client and service in which multiple requests can happen | process - a heavy weight execution context that provide isolation with internal data | thread - lighter weight active agent that’s set up for multiple threads in a single process but memory is often shared so there can be concurrency problems | isolated threads - threads that don’t share memory | transaction - pulls together several requests the client wants to treat as a single request | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#execution-contexts",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#execution-contexts"
  },"668": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Isolation",
    "content": ". | partition data so it can only be access by one active agent, e.g., OS memory or file locks | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#isolation",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#isolation"
  },"669": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Immutability",
    "content": ". | if data can’t be modified there is no concurrency problem | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#immutability",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#immutability"
  },"670": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Optimistic vs Pessimistic Concurrency Control",
    "content": ". | optimistic allows multiple users to edit data and only reconciles differences on save | pessimistic allows one agent to edit data and gives others read only access | optimistic is conflict detection while pessimistic is conflict prevention | pessimistic reduces concurrency while optimistic makes conflict resolution tricky | choice comes down to frequency and severity of conflicts | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#optimistic-vs-pessimistic-concurrency-control",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#optimistic-vs-pessimistic-concurrency-control"
  },"671": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Deadlocks",
    "content": ". | occurs with pessimistic control when 2 or more processes need to acquire locks the others are holding | can use victims, or when deadlocks appear the process that will lose data | also can use timeouts, or enforce all locks are acquired at the beginning | deadlocks are easy to get wrong so simple, conservative schemes work best | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#deadlocks",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#deadlocks"
  },"672": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Transaction",
    "content": ". | a transaction is a bounded sequence of work with the start and end well-defined | all participating resources in a consistent state at the beginning and end | must complete on all or nothing basis | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#transaction",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#transaction"
  },"673": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Transaction Isolation",
    "content": "| Isolation Level | Dirty read | Non-repeatable read | Phantom Read | . | READ UNCOMMITTED | Possible | Possible | Possible | . | READ COMMITTED | Not Possible | Possible | Possible | . | REPEATABLE READ | Not Possible | Not Possible | Possible | . | SERIALIZABLE | Not Possible | Not Possible | Not Possible | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#transaction-isolation",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#transaction-isolation"
  },"674": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "ACID",
    "content": ". | atomicity - all steps in sequence must complete or be rolled back | consistency - system’s resources must be in a consistent, non-corrupt state | isolation - results of transaction must not be visible to any other transaction until the transaction is complete | durability - any results must be made permanent | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#acid",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#acid"
  },"675": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Process Per Session",
    "content": ". | one way of handling concurrency is to have a single process per session | avoids all the problems of multi-threading, and is equally isolated memory-wise | downside is processes are expensive, so you can use pooled process-per-request | need to ensure all resources are released at end of request | thread-per-request if further performance is needed – this has a fair bit of multi-threading overhead, so process-per-request is often sufficient | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#process-per-session",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#process-per-session"
  },"676": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Session State",
    "content": ". | state (data) retained in between requests or across business transactions | different from record data, which is session state persisted to disk | session state might not be consistent (ACID consistent) at any point | biggest problem with session state is isolation | three ways to store session state . | client session state - stores on client, e.g., cookies, encoding in URL, hidden forms | server session state - store on server e.g., in memory, or more durably as a serialized object | database session state - stored in a database | . | with client, data needs to be transferred over the wire, so ideal for smaller payloads | also need to deal with security and encryption, so client-side presume all data is available | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#session-state",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#session-state"
  },"677": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Session Migration vs. Server Affinity",
    "content": ". | session migration allows a session to move from server to server as it handles a request | server affinity forces one server to handle all requests . | might be problematic if all requests are clustered and go to same server | . | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#session-migration-vs-server-affinity",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#session-migration-vs-server-affinity"
  },"678": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Other Session State Concerns",
    "content": ". | what happens when a user cancels requests or leaves? cleaning up state might be tricky on the server or the database side | development effort – database and client side are the heaviest lifts | if server session data stored so it can survive a crash, this might be ideal | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#other-session-state-concerns",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#other-session-state-concerns"
  },"679": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Fine-Grained Interface",
    "content": ". | separate setters and getters for each property | optimized for future extensibility (OO principle) | not useful for objects used remotely because of number of calls | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#fine-grained-interface",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#fine-grained-interface"
  },"680": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Coarse-Grained Interface",
    "content": ". | grouped setters and getters | minimize calls - optimized for remote calls | lose flexibility and extensibility | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#coarse-grained-interface",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#coarse-grained-interface"
  },"681": {
    "doc": "Patterns of Enterprise Application Architecture",
    "title": "Distributed Object Design",
    "content": ". | Don’t distribute objects - a procedure call within a process is fast, across 2 processes is slower, and processes running on separate machines is slower still | Minimize distribution boundaries and use clustering as much as possible - sometimes there are needs for boundaries e.g., client-server, app-db | use remote facade pattern - use coarse-grained at the distribution boundaries, fine-grained internally . | this advice based on Remote Procedure Call synchronous architecture, and message-based async might be preferable | . | . ",
    "url": "/notes/tech_books/patterns-of-enterprise-application-architecture#distributed-object-design",
    
    "relUrl": "/notes/tech_books/patterns-of-enterprise-application-architecture#distributed-object-design"
  },"682": {
    "doc": "Pillars of the Earth",
    "title": "Pillars of the Earth",
    "content": " ",
    "url": "/notes/other_books/pillars-of-the-earth",
    
    "relUrl": "/notes/other_books/pillars-of-the-earth"
  },"683": {
    "doc": "Pillars of the Earth",
    "title": "the good",
    "content": "the story moves right along at a jaunty pace, and is compelling enough to make the nearly 1,100 pages not paralyzingly daunting. this one reminds me of the count of monte cristo; a tale of revenge with stark lines between good and bad. the good eventually triumphs, and the bad is really bad. the characters are decently fleshed out, and the author doesn’t pull punches for describing violence. as a work of historical fiction it is somewhat interesting – thematically a bit similar to a Doctorow novel where fictional characters are interspersed and interacting with historical figures who actually lived. also, some interesting dualities, between church and state, brother and brother, men and women. really an epic novel in . ",
    "url": "/notes/other_books/pillars-of-the-earth#the-good",
    
    "relUrl": "/notes/other_books/pillars-of-the-earth#the-good"
  },"684": {
    "doc": "Pillars of the Earth",
    "title": "the bad",
    "content": "the language is a bit simplistic. try not to pay attention to the sentence variations, otherwise you will be severely distracted by the fact that 80% of the sentences in this book are simple declarative sentences. also, while the characters do have decent, believable characterization, sometimes they can devolve into plot devices. i’m also not sure how historically accurate the social descriptions are though; beyond references to eating knives, the characters feel wholly modern. the women seem to expect some social equality, and maybe that was true, but i have no context here. aliena seems to be able to reinvent herself as a successful business person and then earl-in-stead for her brother. ",
    "url": "/notes/other_books/pillars-of-the-earth#the-bad",
    
    "relUrl": "/notes/other_books/pillars-of-the-earth#the-bad"
  },"685": {
    "doc": "Pillars of the Earth",
    "title": "the ugly",
    "content": "the sex scenes are over the top. i’m no prude, but some of them go on for several pages and are super masculine gaze feeling, like soft core pornos. lots of torquing of nipples, penetration, fucking in public, etc. and how many times does one of the big bads, william, need to rape someone for us to get the idea that he is an unequivocally bad man. also, the plot is contrived. obstacle, overcoming obstacle. over and over. the dramatic tension in building the cathedral is hollow because you know the cathedral gets built; you know the good guys overcome the bad guys because you can tell it’s that sort of novel. you can tell in the way the sentences roll, in the way the first few obstacles by our heroes are overcome, in the pattern of these novels generally. ",
    "url": "/notes/other_books/pillars-of-the-earth#the-ugly",
    
    "relUrl": "/notes/other_books/pillars-of-the-earth#the-ugly"
  },"686": {
    "doc": "Pillars of the Earth",
    "title": "the verdict",
    "content": "i liked the book, and will probably read the next one. it is pure cotton candy though, but perfect if you are looking for a mindless sort of action adventure type historical fiction thing like the count of monte cristo. i couldn’t help but compare it the name of the rose in the genre of “monastery novels”, a comparison that doesn’t reflect favorably on follett’s novel, but most comparisons to Eco don’t end up a favorable comparison. ",
    "url": "/notes/other_books/pillars-of-the-earth#the-verdict",
    
    "relUrl": "/notes/other_books/pillars-of-the-earth#the-verdict"
  },"687": {
    "doc": "Piranesi",
    "title": "Piranesi",
    "content": "Susanna Clarke, 2020 . ",
    "url": "/notes/other_books/piranesi",
    
    "relUrl": "/notes/other_books/piranesi"
  },"688": {
    "doc": "Piranesi",
    "title": "Summary",
    "content": "Piranesi lives in a place called the House, a world composed of infinite halls and vestibules lined with statues, no two of which are alike. The upper level of the House is filled with clouds, and the lower level with an ocean, which occasionally surges into the middle level following tidal patterns that Piranesi meticulously tracks. He believes he has always lived in the House, and that there are only fifteen people in the world, most of whom are long-dead skeletons. Piranesi records every day in his journals, the text of which comprises the novel. Twice a week, Piranesi meets with the Other, a well-dressed man who enlists his help to search for a “Great and Secret Knowledge” hidden somewhere in the House. The Other occasionally brings Piranesi supplies that seem to originate from outside the House, such as shoes, electric torches, and multivitamins. When Piranesi suggests that they abandon the quest for the Great and Secret Knowledge, the Other says they have had this conversation before, and warns Piranesi that the House slowly erodes one’s memories and personality. The Other warns Piranesi that a sixteenth person, whom both call “16,” may enter the House to do him harm, and that he must not approach 16 under any circumstances or he will lose his sanity. Piranesi meets an elderly stranger he calls the Prophet, who identifies the Other as Ketterley, a rival who stole his ideas about the Knowledge. The Prophet claims that the House is a “distributary world,” formed by ideas flowing out of another world. He declares he will lead 16 to the House in order to hurt Ketterley. While indexing his journals, Piranesi discovers references to entries he doesn’t remember writing which include terms mentioned by the Prophet. The entries tell the story of an occultist from the modern world named Laurence Arne-Sayles who posited that other worlds existed and could be accessed; Ketterley was one of his students. Arne-Sayles fostered a cult-like mentality among his followers and was eventually imprisoned for kidnapping a man named James Ritter. Ritter later described being held captive in a place resembling the House. Piranesi discovers that 16 has entered the House, and leaves a message for them. Piranesi avoids reading 16’s reply, but interactions with the Other reveal that she is a woman named Raphael. After learning that a rare confluence of tides will soon flood the middle level of the House, Piranesi leaves a warning for 16, and discovers a message from her asking “are you Matthew Rose Sorensen?” Reading the name gives Piranesi a vision of standing in a modern city. Further research in Piranesi’s journals reveals that someone has destroyed all entries relating to Ketterley. Piranesi pieces the destroyed pages back together from scraps he finds in gull nests, and learns the true story of how he came to the House: he was Matthew Rose Sorensen, a journalist writing a book about Arne-Sayles. When Sorensen went to interview Ketterley, Ketterley used a ritual to imprison him in the House, where he slowly lost his memory and constructed a new identity which Ketterley mockingly named Piranesi. On the day of the flood, Piranesi confronts Ketterley with his reclaimed memories just as Raphael returns to find him. Ketterley tries to kill them both, but drowns in the floodwaters. After the water recedes, Raphael explains that she is a police detective investigating disappearances related to the Arne-Sayles cult. She asks Piranesi to return to his home world. After long deliberation, he elects to leave the House. In an epilogue, the narrator has adjusted to living in his home world, but often returns to the House. The narrator brings James Ritter back to visit the House, tends to Ketterley’s body, and joins Raphael when she visits the House. He reflects that he is no longer quite Sorensen or Piranesi, but must construct a third identity from the remnants of the other two. ",
    "url": "/notes/other_books/piranesi#summary",
    
    "relUrl": "/notes/other_books/piranesi#summary"
  },"689": {
    "doc": "Piranesi",
    "title": "Thoughts",
    "content": "Clarke’s novel is a fine act of world-building by suggestion – the halls and statues and tides that populate its surreal world are sculpted in relief, and with each page the background slowly gains detail and clarity as the mystery of Piranesi’s world unfolds. This novel is as tightly scoped and narrowly told as Clarke’s previous novel, Jonathan Strange &amp; Mr Norrell, is sweeping. The narrative thrust seems inversely proportional to Piranesi’s desire to understand his own story. He is curious though, building complex tide charts and an encyclopedia of halls and their statues. He is a selfless, anti-ego hero, one whose memory only has space for the world he inhabits and not the person he is. There are many ways to read the novel, an ode to a simpler time when nature and life were inextricably linked, or as a meditation on the ephemerality of selfhood, a willful amnesiac imprisoned in a labyrinth of statues and birds. Regardless of how you read it, it is immensely readable; and in a complex world vying for precious attention, the world that Clarke builds is well worth spending time in, even if only briefly. ",
    "url": "/notes/other_books/piranesi#thoughts",
    
    "relUrl": "/notes/other_books/piranesi#thoughts"
  },"690": {
    "doc": "Project Hail Mary",
    "title": "Project Hail Mary",
    "content": "Andy Weir, 2021 . ",
    "url": "/notes/other_books/project-hail-mary",
    
    "relUrl": "/notes/other_books/project-hail-mary"
  },"691": {
    "doc": "Project Hail Mary",
    "title": "Thoughts",
    "content": "Andy Weir can do plot. You can tell Weir was a developer in a past life; the eddies and whorls of dramatic tension and resolution are crafted into tight feedback loops, the peaks and valleys of success and failure for our protagonist an EKG across nearly 500 pages. Flow state, a heightened mental acuity you get from threading work between not too easy and not too hard tasks, is built on these tight feedback loops, and is a built into the fabric of Weir’s fiction. To past readers of Weir and specifically The Martian, this book will fit like a sports metaphor to a corporate powerpoint. It is immensely readable, and there is plenty of genuine surprise at the many turns of the plot, mostly centered around a particular problem solved by a particular piece of science, science a junior high school teacher might know. Which is fortunate, since the protagonist assures us multiple times that he, Ryland Grace, is a junior high school teacher. Peer behind the curtain of plot, however, and there isn’t much beyond the dazzling veneer. What I’ve always liked about the best science fiction is that plot was always in service of asking bigger ontological questions, questions about what it means to be human, our place in the universe. Asimov’s robots or Dick’s androids force us to reckon with our own existence and autonomy. Butler’s stories were about racism, sexism, and culture as much as they were about aliens or religious cults. Instead, here we have the masculinist story of lone man facing an unconquered wilderness: Hillary and Everest, McCandless and Alaska, Shackleton and Antarctica. Weir is keen to play the enthusiastic instructor, outlining two stories, one in the amnesiatic present, and one in the recent past that explains how we came to be in the present. It works as a plot device, as the ping-ponging back and forth building frothed tension. But the two halves aren’t balanced, and like most other things, seem solely in service of plot. The cowardice of the final act doesn’t feel authentic, undermined by the previous 400 pages of characterization. The linguistic precocity of the protagonist is frankly unbelievable. There isn’t a tidiness of structure, no hint of complexity in construction. Not that I expect the labyrinthine creations of Umberto Eco or Borges, but I suppose I like my stories told like puzzles to solve in their assembly. What you end up with is a alluring two dimensional Walter White doing science in space. ",
    "url": "/notes/other_books/project-hail-mary#thoughts",
    
    "relUrl": "/notes/other_books/project-hail-mary#thoughts"
  },"692": {
    "doc": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "title": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "content": ". | Chapter 1: Build Radically Candid Relationships | Chapter 2: Get, Give, And Encourage Guidance | Chapter 3: Understand What Motivates Each Person on your Team | Chapter 4: Drive Results Collaboratively | Chapter 5: Relationships | Chapter 6: Guidance | Chapter 7: Team | Chapter 8: Results | . ",
    "url": "/notes/business_books/radical-candor",
    
    "relUrl": "/notes/business_books/radical-candor"
  },"693": {
    "doc": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "title": "Chapter 1: Build Radically Candid Relationships",
    "content": "We undervalue the “emotional labor” of being the boss” (4) . Bosses guide a team to achieve results. Three areas of responsibility for a boss: . | guidance - often referred to as feedback | team-building - ensure you have a team of rockstars and superstars | results - teams getting things done | . Radical Candor Matrix: . There are two dimensions to Radical Candor: . | Care Personally: | . To have a good relationship, you have to be your whole self and care about each of the people who work for you as a human being. It’s not just business; it is personal, and deeply personal. (9) . There are a few things more damaging to human relationships than a sense of superiority. (12) . Only when you actually care about the whole person with your whole self can you build a relationship. (13) . | Challenge Directly: | . […] delivering hard feedback, making hard calls about who does what on a team, and holding a high bar for results (9) . You don’t need to say every unimportant thing: a good rule of thumb is to leave three unimportant things unsaid each day (16) . [Radical Candor] gets measured at the listener’s ear, not at the speaker’s mouth. (16) . ",
    "url": "/notes/business_books/radical-candor#chapter-1-build-radically-candid-relationships",
    
    "relUrl": "/notes/business_books/radical-candor#chapter-1-build-radically-candid-relationships"
  },"694": {
    "doc": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "title": "Chapter 2: Get, Give, And Encourage Guidance",
    "content": "There are two dimensions to good guidance: care personally and challenge directly. Obnoxious Aggression . If you criticize someone without showing you care, it feels obnoxiously aggressive to the recipient. If you can’t be radically candid with someone, you can at least be obnoxiously aggressive, so at least people know where you stand. Most people prefer the challenging “jerk” to the boss whose “niceness” gets in the way of candor. It’s not mean, it’s clear! (25) . | front-stabbing - belittling in public. | belittling compliments - praise that is belittling | . Manipulative Insincerity . What happens when you don’t care enough about a person to challenge directly. Normally results in empty praise and ignoring of problems, or even praise of problems. | false apology - agreeing with a person just to remove tension | . Ruinous Empathy . Responsible for the vast majority of managerial mistakes. An effort to avoid tension and discomfort. | just trying to say something nice - trying to find an excuse to give praise when praise might need to be distributed or might not be merited. | . when giving praise, investigate until you really understand who did what and why it was so great. Be as specific and thorough with praise as with criticism. Go deep into the details. (33) . If a person is bold enough to criticize you, do not critique their criticism. If you see somebody criticize a peer inappropriately, say something. But if somebody criticizes you inappropriately, it’s your job is to listen with the intent to understand and then reward the candor. (34) . Balance praise and criticism – worry more about praise, less about criticism, but above all be sincere. ",
    "url": "/notes/business_books/radical-candor#chapter-2-get-give-and-encourage-guidance",
    
    "relUrl": "/notes/business_books/radical-candor#chapter-2-get-give-and-encourage-guidance"
  },"695": {
    "doc": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "title": "Chapter 3: Understand What Motivates Each Person on your Team",
    "content": "Teams are made up of rockstars and superstars. Rockstars want to excel in their niche while superstars need new challenges and opportunities to grow constantly. | steep growth trajectory | gradual growth trajectory | . | change agent | force for stability | . | ambitious at work | ambitious outside of work or simply content in life | . | want new opportunities | happy in the current role | . | \"superstar\" | \"rockstar\" | . shift from talent management to growth management, with “growth” substituting for “potential”, as “low potential” demonizes the rockstars who are essential for stability. The most important thing you can do for your team collectively is to understand what growth trajectory each person wants to be on at a given time and whether that matches the needs and opportunities of the team. (48) . Growth Trajectory: . The idea of getting people who are “passionate” for their jobs is misguided, as people are motivated for different reasons. […] your job is not to provide purpose but instead to get to know each of your direct reports well enough to understand how each on derives meaning from their work. (51) . Excellent Performance . You should keep your top performers top of mind, and spend the majority of time making sure they continue to do good work. You want to be a “partner”, to make sure people doing the best work can overcome obstacles. You need to understand the details of their work, to roll up the sleeves. excellent performance/gradual growth trajectory . | recognize, reward, but don’t promote. fair performance ratings - sometimes rockstars don’t get the performance ratings they deserve, so ensure that this isn’t the case recognition - designate as “gurus” or “go-to” experts respect - retain individuals who keep team stable, cohesive, and productive | . “up or out” policy harmful for these individuals . excellent performance/steep growth trajectory . keep superstars challenged (and figure out who will replace them when they move on), don’t squash or block them, and recognize that not every superstar wants to manage. Poor Performance . poor performance/negative growth trajectory . For these individuals, you should part ways. Managers typically wait too long to fire someone, so you can ask three questions to determine if the time is right to fire someone: . | Have you given Radically Candid guidance? - have you been humble and direct in your criticism? | How is this person’s poor performance affecting the rest of the team? - does it affect peers? | Have you sought out a second opinion, spoken to someone whom you trust and with whom you can talk the problem through? - seek a different perspective | . Common lies managers tell themselves to avoid firing someone . | It will get better | Somebody is better than nobody | A transfer is the answer | It’s bad for morale | . When firing someone, it might help to recall a job you were not well suited for and the relief you experienced when you no longer had to do that job. poor performance/steep growth trajectory . There are a few reasons someone might not be suited for a role but might still be an asset: . | wrong role | new to role: too much, too fast | personal problems (outside of work) | poor fit | . Important to understand some might switch from rockstar to superstar and back again, so one label isn’t forever. ",
    "url": "/notes/business_books/radical-candor#chapter-3-understand-what-motivates-each-person-on-your-team",
    
    "relUrl": "/notes/business_books/radical-candor#chapter-3-understand-what-motivates-each-person-on-your-team"
  },"696": {
    "doc": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "title": "Chapter 4: Drive Results Collaboratively",
    "content": "Get Stuff Done (GSD) wheel: . Listen . Ensure that everyone is heard; give the quiet ones a voice. quiet listening - not giving your opinion vehemently; comfortable with the silences loud listening - put a strong view on things but insist on a response; “strong opinions, weakly held” . You want to create a culture of listening: . | have a simple system for employees to use to generate ideas and voice complaints | make sure that at least some of the issues raised are quickly addressed | regularly offer explanations as you why other issues aren’t being addressed | . Clarify . As the boss, you are the editor, not the author. (89) . Push to understand and convey thoughts and ideas more clearly. It’s important to be clear in your own mind before you can explain to others, and that might involve nurturing ideas in a smaller 1:1 environment. Debate . The point of spending all the time in clarifying mode is to get an idea ready for debate (the rock tumbler of ideas). You need to ensure there is a culture of debate on the team. Keep the conversation focused on ideas, not egos. Egos have a way of corrupting ideas and argument, twisting it to ad hominem. Also, important for folks to dissent, not just all agree. Use humor and have fun. Set a clear “decide-by” date. to prevent argument from dragging out. Decide . Typically, as boss you are not the “decider”. The decider should be the one with the best information, not the highest paid person’s opinion’ (HiPPO). You want to empower people who are closest to the facts to make as many decisions as possible. Decider should get facts, not recommendations (which tend to be imbued with ego) . Important to go to source of information and not have that info filtered through several managers (the person doing the job) . Persuade . You can use Aristotle’s ideas of persuasion in Rhetoric: . | pathos (emotion) - the listener’s emotions, not the speakers | logos (logic) - demonstrate expertise and humility | ethos (credibility) - show your work | . Execute . | minimize the collaboration tax | don’t waste your team’s time - make sure you clear obstacles for team’s time | keep the “dirt under your fingernails” - integrate executing directly into your daily work so you stay sharp | . Learn . You need to learn from your previous actions, either as successes or failures. denial is actually the more common reaction to imperfect execution than learning. (108) . ",
    "url": "/notes/business_books/radical-candor#chapter-4-drive-results-collaboratively",
    
    "relUrl": "/notes/business_books/radical-candor#chapter-4-drive-results-collaboratively"
  },"697": {
    "doc": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "title": "Chapter 5: Relationships",
    "content": "You can’t give a damn about others if you don’t take care of yourself. (115) . Don’t think of work-life balance, as some kind of zero-sum game where anything you put into your work robs your life and anything you put into your life robs your work. Instead, think of it as a work-life integration. One of the most important aspects is relinquishing unilateral authority so you can build trusting relationships. This isn’t abdication or anarchy, but rather, building a relationship based on trust so people feel free at work. When organizing a social event, even non-mandatory events can feel mandatory. You need to respect other people’s values when they do share them with you. (122) . Exercise the platinum rule, which says that you should figure out what makes the other person comfortable and do that. Recognize your own emotions and be open and honest about them (“I’m having a bad day, and I’m trying not to be grouchy but I apologize if I slip”) . | Acknowledge emotions | Ask questions | Don’t add your guilt | Don’t tell them how to feel | If you can’t handle emotional outbursts, excuse yourself | Keep tissues a short walk away (allows them to compose themselves) | Have bottled water (the simple act of unscrewing the bottle and drinking, often gives enough time to regain composure) | Walk, don’t sit — walking in the same direction helps with difficult situations | . ",
    "url": "/notes/business_books/radical-candor#chapter-5-relationships",
    
    "relUrl": "/notes/business_books/radical-candor#chapter-5-relationships"
  },"698": {
    "doc": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "title": "Chapter 6: Guidance",
    "content": "In order to build a culture of radical candor you need to get, give, and encourage both praise and criticism. Solicit Impromptu Guidance . You as the boss are the exception to the criticize in private adage. You should encourage teams to criticize in public, which leads to the message that “everyone should embrace criticism that helps us do our jobs better”. Don’t fear public challenges as a challenge to your authority – in fact, it helps establish credibility. A helpful question might be “What could I do or stop doing that would make it easier to work with me” . Embrace the discomfort, and listen with the intent to understand, not to respond. You can try saying “So What I hear you saying is…” . Reward criticism to get more of it. Employees won’t feel free if you don’t take specific actions to ensure that its not just safe but expected to make suggestions and complaints. (135) . Management fix it weeks, might work like bug bashes but for management tickets (a board, voting on solutions, etc.) . Give Impromptu Guidance . Be humble – a helpful paradigm can be the situation, behavior, impact. Outline a situation, describe the behavior, good or bad, and identify the impact. e.g., “I’ve been waiting for that spot for five minutes (situation) and you just zipped in front of me (behavior) and now I’m going to be late (impact). Separate what you think from what you said, and see if what you thought impinged on what you said. | Ontological Humility - separate subjective experience from objective reality | be helpful | state intentions to lower defenses | show, don’t tell | finding help is better than offering it yourself | guidance is a gift, not a whip or a carrot | . Additionally, you should try and give feedback immediately, before it is lost in the haze of time when you might forget the situation or behavior. If you can, say it in person (perhaps between meetings). Don’t save it up for performance reviews, or for the perfect opportunity. Praise in public, criticize in private. (145) . Don’t personalize your criticism, don’t use the “fundamental attribution error” - he is dumb therefore his idea is dumb. You might swap “you’re wrong” with “that’s wrong”. Being Radically Candid with your boss . Can use the paradigm of Listen, Challenge, Commit to voice disagreement, then pivot to executing if your boss doesn’t change their mind. A strong leader has the humility to listen, the confidence to challenge, and the wisdom to know when to quit arguing and get on board. Slowly introduce the concept of radical candor, and if your boss doesn’t seem receptive to it after a few efforts, it might be time to find a new job. Gender and Guidance . Might be harder for men managing women, as there is a punches pulled effect. Gender politics might also get in the way of honest and open communication. Radical candor might be harder for women; might be construed as ‘abrasive’ or ‘shrill’, or as a ‘likeability’ concern. For men, don’t pull punches. For women, demand criticism. For men and women, when you think a women is being ‘too aggressive’: . | switch gender roles | be more specific | don’t use gendered language | never just say ‘be more likeable’ | . If you are a women who is told you are abrasive: . | never stop challenging directly (often, women back off, which harms their careers) | care personally, but kill the “angel in the office” (paving over the gap with doing office chores”) | the competence/likeability has not concluded that you weren’t out of line | don’t kick up and kiss down | don’t write men off | . Skip level meetings are a good way to understand how your direct reports are managing. You set up a meeting with your direct reports direct reports to understand how they might be managing, to solicit honest feedback. ",
    "url": "/notes/business_books/radical-candor#chapter-6-guidance",
    
    "relUrl": "/notes/business_books/radical-candor#chapter-6-guidance"
  },"699": {
    "doc": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "title": "Chapter 7: Team",
    "content": "This chapter is all about creating a team where everyone loves their job and loves working together. You can build a team like that if you have career conversations with each of the people on your team, create growth-management plans for each person who works for you once a year, hire the right people, fire the appropriate people, promote the right people, and reward the people who are doing great work but who shouldn’t be promoted, and offer yourself as a partner to your direct reports. Career Conversations . When rolling out radical candor to your teams, this is the very first thing you should do. It’s your job to understand people’s motivations and ambitions to help them take a step in the direction of their dreams. This all boils down to giving a damn, and companies can’t give a damn about people – only bosses can. Conversation One: Life Story . | Learn what motivates them. Starting from Kindergarten, have them tell you about their life, then focus on moments of change. Values are often revealed in moments of change. Pull out what you see as their motivators and ask them to affirm your understanding. | There may be times when you touch on something too personal. It’s okay to drop it if they seem uncomfortable. | . Conversation Two: Dreams . | What do they want to achieve at the apex of their career? How do they imagine life at its best? | . Conversation Three: Eighteen-month plan . | Guide them, don’t do it for them. Here are some questions they can ask themselves: What do I need to learn in order to move in the direction of my dreams? How should I prioritize the things I need to learn? Whom can I learn from? | Once you get to the bottom of it all, make a list of how the person’s role can change to help them learn the skills needed to achieve each dream; whom they can learn from; and classes they could take or books they could read. Then, next to each item, note who does what by when – and make sure you have some action items. | . Growth Management. Figure out who needs what opportunities, and how you’re going to provide them. Make sure you understand how each person’s aspirations are lining up with the needs of the team, and help them come up with a growth-management plan for each person. Growth Management Plans . | Three to five bullet points – don’t spend more than fifteen minutes on these. You should know them well enough by now to do this quickly. | . Hiring . You’re building a team that needs a good balance of rock stars and superstars. Don’t forget that when hiring. Process . | Job description: define team “fit” as rigorously as you define “skills” to minimize bias o Blind skills assessments can also minimize bias. | Use the same interview committee for multiple candidates, to allow for meaningful comparisons. Usually composed of about four people. | Casual interviews reveal more about team fit than formal ones. In unguarded moments, candidates will do or say revealing things. | Jot down your thoughts right away. | In person debrief/decision – don’t make an offer if you’re not dying to hire them | . Firing . Firing people is never easy, but sometimes it’s very necessary. | Don’t wait too long. This is the only way to be fair to the person who’s failing, yourself, the company, and especially to the people who are performing really well. | Don’t make the decision unilaterally. Avoid making decisions out of anger or frustration. Getting outside input can help prevent this. | Give a damn. Fire people with humility. Remember that the reason your firing them is not because they suck, it’s because the job you gave them sucks for them. | Follow up. Email people about a month later to check in. You may never hear back, and that’s okay. | . Reward your rock stars . | Avoid promotion/status obsession. Praise the things you want more of in creative ways. Good work should not always be rewarded with a new management role, especially for rock stars. | Gurus. If you have someone with a niche area of expertise, allow them to be the go-to person for this area. You might even allow them to spend work hours developing a class. | Public presentations. This is an easy way to help people feel seen and heard, while allowing them to explain the work they do to their colleagues. | . Management is a partnership . ",
    "url": "/notes/business_books/radical-candor#chapter-7-team",
    
    "relUrl": "/notes/business_books/radical-candor#chapter-7-team"
  },"700": {
    "doc": "Radical Candor: Be a Kick-Ass Boss without Losing Your Humanity",
    "title": "Chapter 8: Results",
    "content": "This all sounds like a ton of work, but the idea is to create a culture where people communicate with each other, and problems solve themselves. This frees up time and energy for you to focus on your team getting great results! . How to Operationalize the GSD Wheel . 1:1 Conversations . Employees set the agenda, you listen and help them clarify. These meetings give perspective on what’s working and what’s not working, and allows you to get to know your direct reports better. Listen and clarify to understand what direction each person working for you wants to head in, and what is blocking them. Tips for 1:1s . | Mind-set Quit thinking of them as meetings, and more as lunch or coffee to get to know someone better. | Frequency This depends on how many direct reports you have. The goal is to meet with each for fifty minutes each week. If you have more than five direct reports, you may need to have 1:1s for twenty-five minutes every other week. If you have too many direct reports, start thinking of ways to give leadership opportunities. | Show up! You’re only going to have seven or eight of these per quarter, so DO NOT CANCEL. | Your direct report’s agenda, not yours This way, you are listening to what matters to them. Set some basic expectations for how they deliver the agenda – night before, written out, or not written out at all. (Realistically, will you look at it if you have them send it to you the day before?) | Ask good follow-up questions Show that you’re really interested, but don’t become a micromanager. | Encourage new ideas in the 1:1 New ideas are fragile, so invite these ideas so you might help them clarify their thinking and understanding before communicating these ideas to others. | . Signs from 1:1s that you’re failing as a boss . | Cancellations This is a sign your partnership isn’t that meaningful, or that you’ve been using the meeting inappropriately. | Updates Don’t waste this time letting people give updates that could be emailed to you. | Good news only This is a sign people don’t feel comfortable coming to you with their problems or think you can’t help. Specifically ask for bad news. | No criticism If they don’t criticize you, beware. | No agenda If they keep forgetting to have an agenda, they may be overwhelmed, or may not understand the purpose of the meeting, or they may not think it’s useful at all. Be direct but polite when addressing this. | . Staff Meetings . An effective staff meeting has three goals: it reviews how things have gone the previous week, allows people to share important updates, and forces the team to clarify the most important decisions and debates for the coming week. Here’s a sample agenda: . | Learn: review key metrics (twenty minutes) . | What went well this week and why? What went badly? | . | Listen: put updates in a shared document (fifteen minutes) . | Keep everyone aware of what’s going on so they’re not blindsided and won’t do work someone else is already doing. | Study hall snippets: give 5-7 minutes at the beginning of the meeting for everyone to write down what they’re working on, then 5-7 minutes to pass it around. This will save you time in the long run. | . | Clarify: identify key decisions and debates (thirty minutes) . | Remember to separate big debate meetings and big decision meetings, and identify owners for each of these. Identify a group of people who have to be there, but ideally anyone who wants to attend them should be free to. | . | . Think Time . Block some time on your calendar just to think every day, and don’t cancel this time for anything! If you don’t do this, the only time you will have to clarify your thinking is at home when you should be sleeping. Hold this blocked think time sacred and get really, seriously angry if anyone tries to schedule over it. Encourage your team to do the same. “Big Debate” Meetings . Make it clear that you’re debating, not deciding! There are three purposes of these meetings: . | They lower tension. | Self-organizing criticality: a lot of little corrections create stability but one huge correction creates catastrophe. | . | They allow you to slow down key decisions when appropriate. | They foster a larger culture of debate. | . Ask your team to switch roles halfway through the debate, which makes sure people are listening to each other and trying to come up with the best solution. Product of these meetings: . | Careful summary of the facts and issues that emerged | Clearer definition of the choices going forward | Recommendation to keep debating or to move on to a decision (NOT a recommendation for what the decision should be) | . “Big Decision” Meetings . Make very clear to your team that the decisions of this meeting are FINAL, otherwise they’ll just keep appealing them and debating into perpetuity. Feel free to either attend the meeting or let the decider know you have veto power – use it VERY sparingly. Product of this meeting: . | Careful summary of the meeting distributed to all relevant parties | . All-Hands Meeting Now that a decision has been made by the relevant parties, it’s time to bring others along. These meetings have two parts: . | Presentation . | To persuade people the company is making good decisions and headed in the right direction | Focus on one or two initiatives | These are given by the team working on the initiative, not the boss | . | Q&amp;A . | This allows leaders to hear dissent and address it head-on. The answers to these questions are usually more persuasive than the presentations. | This portion should be handled by the CEO/founders. There is a real power in explaining important decisions and encouraging dissent. | . | . Execution Time (No Meeting Time) . Be absolutely ruthless about making sure your team has time to execute. Encourage them to block execution time just like they would block think time. Kanban Boards . This is a great way to create a visible workflow so nothing falls through the cracks. It’s a board with three columns: To Do, In Progress, and Done. Then, buy a bunch of post-its and assign each person a color. They can then put their tasks and move them around on the board, which will help you see who is really driving results and who’s just along for the ride. Walk Around. Spend time with the people on your team simply by walking around and asking what they’re working on. This is a great way to connect with the whole company, not just your direct reports. You’re going to notice things you wouldn’t have otherwise noticed: . | They’ll help you find the devil in the details. You don’t want to be the last person to know when there’s an issue. | Being aware of these problems allows you to roll up your sleeves and fix them, squashing the “that’s beneath me” mentality bosses often get. | . ",
    "url": "/notes/business_books/radical-candor#chapter-8-results",
    
    "relUrl": "/notes/business_books/radical-candor#chapter-8-results"
  },"701": {
    "doc": "Replacing a generator battery",
    "title": "Replacing a generator battery",
    "content": " ",
    "url": "/notes/projects/replacing-a-generator-battery",
    
    "relUrl": "/notes/projects/replacing-a-generator-battery"
  },"702": {
    "doc": "Setting up a mostly automated home media server",
    "title": "Setting up a mostly automated home media server",
    "content": " ",
    "url": "/notes/projects/setting-up-an-automated-home-media-server",
    
    "relUrl": "/notes/projects/setting-up-an-automated-home-media-server"
  },"703": {
    "doc": "The Seven Moons of Maali Almeida",
    "title": "The Seven Moons of Maali Almeida",
    "content": " ",
    "url": "/notes/other_books/seven-moons-of-maali-almeida",
    
    "relUrl": "/notes/other_books/seven-moons-of-maali-almeida"
  },"704": {
    "doc": "The Seven Moons of Maali Almeida",
    "title": "Summary",
    "content": "Set against the backdrop of the civil war, the story chronicles the challenges and ethical dilemmas of a war photographer tasked to solve his own murder mystery. It is a story of a ghost trapped navigating the afterlife and coming to terms with his life, his work, his relationships and his death. Structured as a whodunit, the story follows renegade war photographer Maali Almeida, who is tasked with solving his own murder. Embroiled in red tape, memories of war, his own ethical dilemmas, and his awkward relationship with his mother, his official girlfriend and his secret boyfriend Maali is constantly interrupted by the overly chatty dead folks breezing through the afterlife, as he struggles to unravel his own death. The author set the book in 1989, as this was when “The Tigers, The Army, The Indian peacekeepers, The JVP terrorists and State death squads were all killing each other at a prolific rate.” A time of curfews, bombs, assassinations, abductions and mass graves seemed to the author to be “a perfect setting for a ghost story, a detective tale or a spy thriller. Or all three.” . ",
    "url": "/notes/other_books/seven-moons-of-maali-almeida#summary",
    
    "relUrl": "/notes/other_books/seven-moons-of-maali-almeida#summary"
  },"705": {
    "doc": "The Seven Moons of Maali Almeida",
    "title": "Quotes",
    "content": "Evil is not what we should fear. Creatures with power acting in their own interest: that is what should make us shudder. How else to explain the world’s madness? If there’s a heavenly father, he must be like your father: absent, lazy and possibly evil. For atheists there are only moral choices. Accept that we are alone and strive to create heaven on earth. Or accept that no one’s watching and do whatever the hell you like. The latter is by far easier. You think of the lottery of birth and how everything else is mythology, stories the ego tells itself to justify fortune or explain away injustice. You think of dead lakes overflowing with corpses, of police stations where the rich lock up the poor, of palaces where those who follow orders torture those who refuse to. You think of distraught lovers, abandoned friends and absent parents. Of lapsed treaties and photographs that are seen and forgotten, regardless of the walls they hang on. How the world will go on without you and will forget you were even here. You think of the mother, the old man and the dog, of the things you did, or failed to do, for the ones you loved. You think about evil causes and about worthy ones. That the chances of violence ending violence are one in nothing, one in nada, one in squat. Being a ghost isn’t that different to being a war photographer. Long periods of boredom interspersed with short bursts of terror. As action-packed as your post-death party has been, most of it is spent watching people staring at things. People stare a lot, break wind all the time, and touch their genitals much too much. All stories are recycled and all stories are unfair. Many get luck, and many get misery. Many are born to homes with books, many grow up in the swamps of war. In the end, all becomes dust. All stories conclude with a fade to black. ",
    "url": "/notes/other_books/seven-moons-of-maali-almeida#quotes",
    
    "relUrl": "/notes/other_books/seven-moons-of-maali-almeida#quotes"
  },"706": {
    "doc": "The Seven Moons of Maali Almeida",
    "title": "Thoughts",
    "content": "I didn’t know Arthur C Clarke would be considered a Sri Lankan author. Maali in the book struggles with naming famous Sri Lankans, and it’s telling the author he chooses is someone who only started living in Sri Lanka at 40 and represents the sort of cultural imperialism that plants itself in foreign culture and sucks the nutrients out of all surrounding culture, and the only thing that can catch a single ray of sunshine is the aping mimicry of the British literary tradition. Another mirroring that happens is that Maali starts the story dead and unable to influence the very real day-to-day of the world without him. As a war photographer, he needs to stat neutral, and yet, on one of Maali’s last jaunts, he gives the cyanide pills he found on a dead soldier to a mother who had lost her child and a dying dog, after a bombing in the city he is in. This all mirrors Shehan, the author, who was 14 when the semi-fictionalized events of the novel took place, and likely frustrated at his teenage inefficacy in getting through life, let alone easing the suffering of those around you as they are embroiled in the swamps of war. The book is strongly magical realist, and reminds me of Master and Margarita or Mayazaki a la Spirited Away. Maali finds himself in a spirit world with it’s own logic and rules and governance, and no one cares to explain it to Maali. The novel wrestles with questions of what we owe our fellow man, how we find peace with the action or inaction we take, whether we can let go of the petty that when held on to can only fester into catastrophe. Maali finds peace in his afterlife, in his realization that life has no path, and the choices you make are what in turn make you, no more, no less. ",
    "url": "/notes/other_books/seven-moons-of-maali-almeida#thoughts",
    
    "relUrl": "/notes/other_books/seven-moons-of-maali-almeida#thoughts"
  },"707": {
    "doc": "Shuggie Bain",
    "title": "Shuggie Bain",
    "content": " ",
    "url": "/notes/other_books/shuggie-bain",
    
    "relUrl": "/notes/other_books/shuggie-bain"
  },"708": {
    "doc": "Shuggie Bain",
    "title": "Why I read this book",
    "content": ". The book won the Booker Prize in 2020, and these sorts of things are how I populate my reading list. ",
    "url": "/notes/other_books/shuggie-bain#why-i-read-this-book",
    
    "relUrl": "/notes/other_books/shuggie-bain#why-i-read-this-book"
  },"709": {
    "doc": "Shuggie Bain",
    "title": "One key takeaway",
    "content": ". Alcoholism is fucking grim. ",
    "url": "/notes/other_books/shuggie-bain#one-key-takeaway",
    
    "relUrl": "/notes/other_books/shuggie-bain#one-key-takeaway"
  },"710": {
    "doc": "Shuggie Bain",
    "title": "Summary",
    "content": ". The novel recounts Shuggie Bain’s upbringing in dealing with both his mother Agnes’s swirling alcoholism, toxic fatherhood, and his own queerness. The novel is also very much about Glasgow, taking place through a downward escalator of increasingly degraded locations filled with the cast aside and forgotten. The novel begins and ends with Shuggie in the novel’s present, away from his mother’s cyclonic need, but the majority is Shuggie and Agnes, hurtling through life as each family member fights endlessly to leave the orbit of addiction. Sister Catherine escapes to South Africa and is never heard from again, Brother Leek finally gets “papped”, Glaswegian for persona non grata. Agnes abandons first husband then her second abandons her. Grandparents Lizzie and Wullie escape into a synchronized death, and finally Agnes falls off this mortal coil. ",
    "url": "/notes/other_books/shuggie-bain#summary",
    
    "relUrl": "/notes/other_books/shuggie-bain#summary"
  },"711": {
    "doc": "Shuggie Bain",
    "title": "How was the book",
    "content": ". A novel born of experience: dire, grim, ghastly, and lived. Addiction hollows you like termites, eating at your pulpy soul until the surface is the depth, painted skin thin-stretched over emptiness. In reading, you cheer the underdogs cheer that this is the time that things get better, that the person you have seen glimmers of in winks of sobriety can finally crest the mountaintop of their addiction, can finally be the mother her children so clearly need. But that is not this novel. That is not the addict’s plight. The novel moves with the unrelenting pace of a mudslide, careering from one familial disaster to the next. Douglas Stuart has crafted a novel filled with the reedy lyricism of Scottish dialect; children are weans (wee-ones elided), vomity boak will fill your throat after a night of drinking. Wino jakeys roam the streets, and you best bring a wee carry-out to drink if you stop in somewhere. The novel is of Scotland, but its themes of abandonment, maternal, economic, paternal, national, are of everywhere. You don’t need to be Scottish to have your country abandon you, your Iron leader leave you behind, your mother to descend further into the throes of alcoholism until she finally declares you “papped”, Glaswegian for persona non grata. Not only in Scotland are there toxically masculine fathers and the dereliction of fatherhood, childhood bullies who single out the boy who is not like other boys. And in spite of that, this is a Scottish novel, another in the litany of Scottish literary tragedies. I think what remains to be seen is how Stuart takes what is an ear for dialog and feet for pacing and walks the precipitous steps away from the lived into invention, away from autobiography. ",
    "url": "/notes/other_books/shuggie-bain#how-was-the-book",
    
    "relUrl": "/notes/other_books/shuggie-bain#how-was-the-book"
  },"712": {
    "doc": "Shuggie Bain",
    "title": "Any other reading",
    "content": ". Irvine Welsh by Trainspotting, 1993. ",
    "url": "/notes/other_books/shuggie-bain#any-other-reading",
    
    "relUrl": "/notes/other_books/shuggie-bain#any-other-reading"
  },"713": {
    "doc": "The X-Factor: Six Steps to Leading High-Performing X-Teams",
    "title": "The X-Factor: Six Steps to Leading High-Performing X-Teams",
    "content": "Article Link (behind a paywall, try: https://booksc.eu/) . ",
    "url": "/notes/articles/six-steps-to-leading-high-performing",
    
    "relUrl": "/notes/articles/six-steps-to-leading-high-performing"
  },"714": {
    "doc": "Software Engineering at Google",
    "title": "Software Engineering at Google",
    "content": ". | 1: What is Software Engineering? . | Chapter Summary | . | 2: How to Work Well on Teams . | Three Pillars of Social Interaction | Being “Googley” | Chapter Summary | . | 3: Knowledge Sharing | 12: Unit Testing . | TL;DR | . | 13: Test Doubles . | TL;DR | . | . ",
    "url": "/notes/tech_books/software-engineering-at-google",
    
    "relUrl": "/notes/tech_books/software-engineering-at-google"
  },"715": {
    "doc": "Software Engineering at Google",
    "title": "1: What is Software Engineering?",
    "content": "We see three critical differences between programming and software engineering: time, scale, and the trade-offs at play . | need to ask yourself: “What is the expected life span1 of your code?” | Your project is sustainable if, for the expected life span of your software, you are capable of reacting to whatever valuable change comes along, for either technical or business reasons. | When you are fundamentally incapable of reacting to a change in underlying technology or product direction, you’re placing a high-risk bet on the hope that such a change never becomes critical. | Somewhere along the line between a one-off program and a project that lasts for decades, a transition happens: a project must begin to react to changing externalities | must be aware of difference between “happens to work” and “is maintainable” | . hyrum’s law: With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody. | cannot assume perfect adherence to published contracts or best practices | . We’ve taken to saying, “It’s programming if ‘clever’ is a compliment, but it’s software engineering if ‘clever’ is an accusation.” . Change is not inherently good. We shouldn’t change just for the sake of change. But we do need to be capable of change . churn rule: policy at google that says infrastructure teams must do the work to move their internal users to new versions themselves or do the update in place, in backward-compatible fashion . Beyonce rule: policy at google: “If a product experiences outages or other problems as a result of infrastructure changes, but the issue wasn’t surfaced by tests in our Continuous Integration (CI) system, it is not the fault of the infrastructure change.” . Knowledge is viral, experts are carriers, and there’s a lot to be said for the value of clearing away the common stumbling blocks for your engineers. | the more you change your infrastructure, the easier it is to do so | factors that affect the flexibility of a codebase: expertise, stability, conformity, familiarity, policy | shift left - as with other shift left movements, the earlier you catch bugs, the easier it is to resolve them | . types of costs . | Financial costs (e.g., money) | Resource costs (e.g., CPU time) | Personnel costs (e.g., engineering effort) | Transaction costs (e.g., - what does it cost to take action?)- Opportunity costs (e.g., what does it cost to not take action?) | Societal costs (e.g., what impact will this choice have on society at large?) . | should rely on data, but when there is no data, you have evidence, precedent, and argument | . Jevons Paradox - consumption of a resource may increase as a response to greater efficiency in use . Chapter Summary . | “Software engineering” differs from “programming” in dimensionality: programming is about producing code. Software engineering extends that to include the maintenance of that code for its useful life span. | There is a factor of at least 100,000 times between the life spans of short-lived code and long-lived code. It is silly to assume that the same best practices apply universally on both ends of that spectrum. | Software is sustainable when, for the expected life span of the code, we are capable of responding to changes in dependencies, technology, or product requirements. We may choose to not change things, but we need to be capable. | Hyrum’s Law: with a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody. | Every task your organization has to do repeatedly should be scalable (linear or better) in terms of human input. Policies are a wonderful tool for making process scalable. | Process inefficiencies and other software-development tasks tend to scale up slowly. Be careful about boiled-frog problems. | Expertise pays off particularly well when combined with economies of scale. | “Because I said so” is a terrible reason to do things. | Being data driven is a good start, but in reality, most decisions are based on a mix of data, assumption, precedent, and argument. It’s best when objective data makes up the majority of those inputs, but it can rarely be all of them. | Being data driven over time implies the need to change directions when the data changes (or when assumptions are dispelled). Mistakes or revised plans are inevitable. | . ",
    "url": "/notes/tech_books/software-engineering-at-google#1-what-is-software-engineering",
    
    "relUrl": "/notes/tech_books/software-engineering-at-google#1-what-is-software-engineering"
  },"716": {
    "doc": "Software Engineering at Google",
    "title": "2: How to Work Well on Teams",
    "content": ". | software dev is a team endeavor | The Genius Myth is the tendency that we as humans need to ascribe the success of a team to a single person/leader . | need to avoid, since best creations are mostly group activities | . | the bus factor - the number of people that need to get hit by a bus before your project is completely doomed. | Ensuring that there is at least good documentation in addition to a primary and a secondary owner for each area of responsibility helps future-proof your project’s success and increases your project’s bus factor. | . | key to software delivery - get feedback as early as possible, test as early as possible, think about security and the production environments as early as possible | working alone is inherently riskier than working with others | . Three Pillars of Social Interaction . Pillar 1: Humility . | You are not the center of the universe (nor is your code!). You’re neither omniscient nor infallible. You’re open to self-improvement. | . Pillar 2: Respect . | You genuinely care about others you work with. You treat them kindly and appreciate their abilities and accomplishments. | . Pillar 3: Trust . | You believe others are competent and will do the right thing, and you’re OK with letting them drive when appropriate. | . It’s not about tricking or manipulating people; it’s about creating relationships to get things done. The trick is to make sure you (and those around you) understand the difference between a constructive criticism of someone’s creative output and a flat-out assault against someone’s character. if you’re not failing now and then, you’re not being innovative enough or taking enough risks. Failure is viewed as a golden opportunity to learn and improve for the next go-around . | blameless post-mortems are really important to learning – always need to contain an explanation of what was learned and what is going to change as a result of the learning experience | . The more open you are to influence, the more you are able to influence; the more vulnerable you are, the stronger you appear. Being “Googley” . rubric of behaviors for what is “googley”: . Thrives in ambiguity . | Can deal with conflicting messages or directions, build consensus, and make progress against a problem, even when the environment is constantly shifting. | . Values feedback . | Has humility to both receive and give feedback gracefully and understands how valuable feedback is for personal (and team) development. | . Challenges status quo . | Is able to set ambitious goals and pursue them even when there might be resistance or inertia from others. | . Puts the user first . | Has empathy and respect for users of Google’s products and pursues actions that are in their best interests. | . Cares about the team . | Has empathy and respect for coworkers and actively works to help them without being asked, improving team cohesion. | . Does the right thing . | Has a strong sense of ethics about everything they do; willing to make difficult or inconvenient decisions to protect the integrity of the team and product. | . Chapter Summary . | Be aware of the trade-offs of working in isolation. | Acknowledge the amount of time that you and your team spend communicating and in interpersonal conflict. A small investment in understanding personalities and working styles of yourself and others can go a long way toward improving productivity. | If you want to work effectively with a team or a large organization, be aware of your preferred working style and that of others. | . ",
    "url": "/notes/tech_books/software-engineering-at-google#2-how-to-work-well-on-teams",
    
    "relUrl": "/notes/tech_books/software-engineering-at-google#2-how-to-work-well-on-teams"
  },"717": {
    "doc": "Software Engineering at Google",
    "title": "3: Knowledge Sharing",
    "content": " ",
    "url": "/notes/tech_books/software-engineering-at-google#3-knowledge-sharing",
    
    "relUrl": "/notes/tech_books/software-engineering-at-google#3-knowledge-sharing"
  },"718": {
    "doc": "Software Engineering at Google",
    "title": "12: Unit Testing",
    "content": "After preventing bugs, the most important purpose of a test is to improve engineers’ productivity. properties of unit tests . | tend to be small, which makes them fast and deterministic and can be run often | easy to write at the same time as the code they are testing | promote high levels of test coverage because they are quick and easy to write | easy to understand what is wrong with them when they fail | can serve as documentation and examples . | shoot for a mix of 80% unit tests, 20% broader-scoped tests | when writing tests, you want maintainability, and want to avoid: . | brittle: breaking in response to harmless or unrelated changes | unclear: difficult to determine what is wrong and how to fix it | . | strive for unchanging tests – after a test is written, it never needs to change unless the requirements of the system change | . four kinds of change . | pure refactorings – shouldn’t require unit test changes because you shouldn’t be changing the API, just implementation underneath | new features – should just be adding new unit tests, not changing what already exists | bug fixes – an uncaught bug means a test didn’t exist, so additive | behavior changes – only case where you need to update unit tests | . write tests that invoke the system being tested in the same way its users would; that is, make calls against its public API rather than its implementation details. state and interaction testing . | state testing: you observe the system itself to see what it looks like after invoking with it | interaction testing: check that the system took an expected sequence of actions on its collaborators in response to invoking it | . | you should prefer state testing because we generally don’t care how a system arrives at state, just that it is in a particular state | . Two high-level properties that help tests achieve clarity are completeness and conciseness. A test is complete when its body contains all of the information a reader needs in order to understand how it arrives at its result. A test is concise when it contains no other distracting or irrelevant information. behavior testing . | rather than write tests for each method, write tests for each behavior | a behavior is a guarantee that a system makes about how it will respond to a series of inputs while in a particular state | behaviors can often be expressed via “given”, “when”, and “then” | name and structure tests around the behaviors being tested . | don’t put logic in tests | write clear failure messages | . Instead of being completely DRY, test code should often strive to be DAMP—that is, to promote “Descriptive And Meaningful Phrases.” A little bit of duplication is OK in tests so long as that duplication makes the test simpler and clearer. TL;DR . | Strive for unchanging tests. | Test via public APIs. | Test state, not interactions. | Make your tests complete and concise. | Test behaviors, not methods. | Structure tests to emphasize behaviors. | Name tests after the behavior being tested. | Don’t put logic in tests. | Write clear failure messages. | Follow DAMP over DRY when sharing code for tests. | . ",
    "url": "/notes/tech_books/software-engineering-at-google#12-unit-testing",
    
    "relUrl": "/notes/tech_books/software-engineering-at-google#12-unit-testing"
  },"719": {
    "doc": "Software Engineering at Google",
    "title": "13: Test Doubles",
    "content": ". | test double - an object or function that can stand in for a real implementation . | sometimes referred to as “mocking”, but often mocking refers to more specific type of test double | . | key concepts: . | testability: it should be possible for tests to swap out real implementations with test doubles | applicability: there is a tradeoff between engineer velocity introduced by applying test doubles, and over-usage resulting in brittle, complex, ineffective tests | fidelity: how closely a behavior a test double tests to the actual implementation | . | Code is said to be testable if it is written in a way that makes it possible to write unit tests for the code. A seam is a way to make code testable by allowing for the use of test doubles—it makes it possible to use different dependencies for the system under test rather than the dependencies used in a production environment. | Dependency injection is a common technique for introducing seams. In short, when a class utilizes dependency injection, any classes it needs to use (i.e., the class’s dependencies) are passed to it rather than instantiated directly, making it possible for these dependencies to be substituted in tests. | a mock is a test double whose behavior is specified inline in a test | . | a fake is a lightweight implementation of an API that behaves similar to the real implementation but isn’t suitable for production | . | a stub is the process of giving behavior to a function that otherwise has no behavior on its own | . | interaction testing: a way to validate how a function is called without actually calling impl. of the function | classical testing: preferring real impl. in tests, and generally a more robust and diagnostic way to test | a real implementation is preferred if it is fast, deterministic, and has simple dependencies . | a test is deterministic if, for a given version of the system under test, running the test always results in the same outcome | hermetic: self-contained; dependencies on external services outside the control of the test means it might not be deterministic | . | . TL;DR . | A real implementation should be preferred over a test double. | A fake is often the ideal solution if a real implementation can’t be used in a test. | Overuse of stubbing leads to tests that are unclear and brittle. | Interaction testing should be avoided when possible: it leads to tests that are brittle because it exposes implementation details of the system under test. | . ",
    "url": "/notes/tech_books/software-engineering-at-google#13-test-doubles",
    
    "relUrl": "/notes/tech_books/software-engineering-at-google#13-test-doubles"
  },"720": {
    "doc": "Speak, Memory",
    "title": "Speak, Memory",
    "content": " ",
    "url": "/notes/other_books/speak-memory",
    
    "relUrl": "/notes/other_books/speak-memory"
  },"721": {
    "doc": "Speak, Memory",
    "title": "memory",
    "content": "Many descriptions of memory - “luminous disc” and “magic lantern projections” (154), “glass cell” (148), and longer description: . I witness with pleasure the supreme achievement of memory, which is the masterly use it makes of innate harmonies when gathering to its fold the suspended and wandering tonalities of the past. I like to imagine, in consummation and resolution of those jangling chords, something as enduring, in retrospect, as the long table that on summer birthdays and namedays used to be laid for afternoon chocolate out of doors, in an alley of birches, limes and maples at its debouchment on the smooth-sanded space of the garden proper that separated the park and the house. I see the tablecloth and the faces of seated people sharing in the animation of light and shade beneath a moving, a fabulous foliage, exaggerated, no doubt, by the same faculty of impassioned commemoration, of ceaseless return, that makes me always approach that banquet table from the outside, from the depth of the park—not from the house—as if the mind, in order to go back thither, had to do so with the silent steps of a prodigal, faint with excitement. Through a tremulous prism, I distinguish the features of relatives and familiars, mute lips serenely moving in forgotten speech. I see the steam of the chocolate and the plates of blueberry tarts. I note the small helicopter of a revolving samara that gently descends upon the tablecloth, and, lying across the table, an adolescent girl’s bare arm indolently extended as far as it will go, with its turquoise-veined underside turned up to the flaky sunlight, the palm open in lazy expectancy of something—perhaps the nutcracker. The entire autobiography is an extended musing on memory, and the title suggests that it is the third person in the room – Nabokov, the reader, and memory. He attributes his good memory to his father: “The act of vividly recalling a patch of the past is something that I seem to have been performing with the utmost zest all my life, and I have reason to believe that this almost pathological keenness of the retrospective faculty is a hereditary trait.” (75) . ",
    "url": "/notes/other_books/speak-memory#memory",
    
    "relUrl": "/notes/other_books/speak-memory#memory"
  },"722": {
    "doc": "Speak, Memory",
    "title": "humor",
    "content": "Nabokov is pretty funny, or devastating, when he wants to be. He offers no kindness to a description of a nanny: . A large woman, a very stout woman, Mademoiselle rolled into our existence in December 1905 when I was six and my brother five. There she is. I see so plainly her abundant dark hair, brushed up high and covertly graying; the three wrinkles on her austere forehead; her beetling brows; the steely eyes behind the black-rimmed pince-nez; that vestigial mustache; that blotchy complexion, which in moments of wrath develops an additional flush in the region of the third, and amplest, chin so regally spread over the frilled mountain of her blouse. And now she sits down, or rather she tackles the job of sitting down, the jelly of her jowl quaking, her prodigious posterior, with the three buttons on the side, lowering itself warily; then, at the last second, she surrenders her bulk to the wicker armchair, which, out of sheer fright, bursts into a salvo of crackling. ",
    "url": "/notes/other_books/speak-memory#humor",
    
    "relUrl": "/notes/other_books/speak-memory#humor"
  },"723": {
    "doc": "Speak, Memory",
    "title": "thoughts on his life",
    "content": "He draws on Hegel’s dialectic to describe his life (in beginning, there is a thesis, which is negated by antithesis to form a new thesis together via synthesis) . A colored spiral in a small ball of glass, this is how I see my own life. The twenty years I spent in my native Russia (1899–1919) take care of the thetic arc. Twenty-one years of voluntary exile in England, Germany and France (1919–1940) supply the obvious antithesis. The period spent in my adopted country (1940–1960) forms a synthesis—and a new thesis. For the moment I am concerned with my antithetic stage, and more particularly with my life in Continental Europe after I had graduated from Cambridge in 1922. ",
    "url": "/notes/other_books/speak-memory#thoughts-on-his-life",
    
    "relUrl": "/notes/other_books/speak-memory#thoughts-on-his-life"
  },"724": {
    "doc": "Speak, Memory",
    "title": "being a parent",
    "content": "There is a long description of fatherhood in chapter 15 that was really compelling, especially given where I was when I read this, as a new father myself. The description of a baby’s eyes was great (in a larger description of the wonder of parental discovery) . You remember the discoveries we made (supposedly made by all parents): the perfect shape of the miniature fingernails of the hand you silently showed me as it lay, stranded starfish-wise, on your palm; the epidermic texture of limb and cheek, to which attention was drawn in dimmed, faraway tones, as if the softness of touch could be rendered only by the softness of distance; that swimming, sloping, elusive something about the dark-bluish tint of the iris which seemed still to retain the shadows it had absorbed of ancient, fabulous forests where there were more birds than tigers and more fruit than thorns, and where, in some dappled depth, man’s mind had been born; and, above all, an infant’s first journey into the next dimension, the newly established nexus between eye and reachable object, which the career boys in biometrics or in the rat-maze racket think they can explain. It occurs to me that the closest reproduction of the mind’s birth obtainable is the stab of wonder that accompanies the precise moment when, gazing at a tangle of twigs and leaves, one suddenly realizes that what had seemed a natural component of that tangle is a marvelously disguised insect or bird. ",
    "url": "/notes/other_books/speak-memory#being-a-parent",
    
    "relUrl": "/notes/other_books/speak-memory#being-a-parent"
  },"725": {
    "doc": "Speak, Memory",
    "title": "his work",
    "content": "Nabokov doesn’t expressly address his work up until that point, but you get the sense that he was a collector of more than just butterflies. He claims he doesn’t have many personal friends, and he was always on the lookout to file bits of people away for future use (279). You can also see the germ of Lolita in his childhood paramour Colette who he met at a French resort. ",
    "url": "/notes/other_books/speak-memory#his-work",
    
    "relUrl": "/notes/other_books/speak-memory#his-work"
  },"726": {
    "doc": "Speak, Memory",
    "title": "on sleep",
    "content": "I really like his diatribe on sleep. Nabokovian hot takes: . All my life I have been a poor go-to-sleeper. People in trains, who lay their newspaper aside, fold their silly arms, and immediately, with an offensive familiarity of demeanor, start snoring, amaze me as much as the uninhibited chap who cozily defecates in the presence of a chatty tubber, or participates in huge demonstrations, or joins some union in order to dissolve in it. Sleep is the most moronic fraternity in the world, with the heaviest dues and the crudest rituals. It is a mental torture I find debasing. The strain and drain of composition often force me, alas, to swallow a strong pill that gives me an hour or two of frightful nightmares or even to accept the comic relief of a midday snooze, the way a senile rake might totter to the nearest euthanasium; but I simply cannot get used to the nightly betrayal of reason, humanity, genius. No matter how great my weariness, the wrench of parting with consciousness is unspeakably repulsive to me. I loathe Somnus, that black-masked headsman binding me to the block; and if in the course of years, with the approach of a far more thorough and still more risible disintegration, which nowanights, I confess, detracts much from the routine terrors of sleep, I have grown so accustomed to my bedtime ordeal as almost to swagger while the familiar ax is coming out of its great velvet-lined double-bass case, initially I had no such comfort or defense: I had nothing—except one token light in the potentially refulgent chandelier of Mademoiselle’s bedroom, whose door, by our family doctor’s decree (I salute you, Dr. Sokolov!), remained slightly ajar. Its vertical line of lambency (which a child’s tears could transform into dazzling rays of compassion) was something I could cling to, since in absolute darkness my head would swim and my mind melt in a travesty of the death struggle. ",
    "url": "/notes/other_books/speak-memory#on-sleep",
    
    "relUrl": "/notes/other_books/speak-memory#on-sleep"
  },"727": {
    "doc": "Speak, Memory",
    "title": "other quotes",
    "content": "Nabokov is a brilliant writer and intermingles poetry and prose as well as anyone. He spent his youth composing verse, so it shows, although as he says, “The kind of poem I produced in those days was hardly anything more than a sign I made of being alive, of passing or having passed, or hoping to pass, through certain intense human emotions. It was a phenomenon of orientation rather than of art, thus comparable to stripes of paint on a roadside rock or to a pillared heap of stones marking a mountain trail.” . He also has a bunch of lovely turns of phrases . a caterpillarian metaphor for a return to eden: . And a tiny looper caterpillar would be there, too, measuring, like a child’s finger and thumb, the rim of the table, and every now and then stretching upward to grope, in vain, for the shrub from which it had been dislodged. picture day: . On a summer morning, in the legendary Russia of my boyhood, my first glance upon awakening was for the chink between the white inner shutters. If it disclosed a watery pallor, one had better not open them at all, and so be spared the sight of a sullen day sitting for its picture in a puddle. bird shit: . She also remembered the touch nature added from its own palette—the white mark a bird left on the painter’s gray top hat. and the fantastic opening lines: . The cradle rocks above an abyss, and common sense tells us that our existence is but a brief crack of light between two eternities of darkness. Although the two are identical twins, man, as a rule, views the prenatal abyss with more calm than the one he is heading for (at some forty-five hundred heartbeats an hour). ",
    "url": "/notes/other_books/speak-memory#other-quotes",
    
    "relUrl": "/notes/other_books/speak-memory#other-quotes"
  },"728": {
    "doc": "Start With Why",
    "title": "Start With Why",
    "content": " ",
    "url": "/notes/business_books/start-with-why",
    
    "relUrl": "/notes/business_books/start-with-why"
  },"729": {
    "doc": "Stuff You Should Know",
    "title": "Stuff You Should Know",
    "content": "Josh Clark , Chuck Bryant, 2020 . ",
    "url": "/notes/other_books/stuff-you-should-know",
    
    "relUrl": "/notes/other_books/stuff-you-should-know"
  },"730": {
    "doc": "Stuff You Should Know",
    "title": "Summary",
    "content": "27 Chapters of interesting things you might not know about, like various histories (facial hair, guns, Kevorkian) or other factlets about Americana, child prodigies, and cargo cults. Adapted from a popular podcast called Stuff You Should Know. ",
    "url": "/notes/other_books/stuff-you-should-know#summary",
    
    "relUrl": "/notes/other_books/stuff-you-should-know#summary"
  },"731": {
    "doc": "Stuff You Should Know",
    "title": "Thoughts",
    "content": "Full disclosure, I’ve never listened to Stuff You Should Know. It theoretically is up my alley, but the market for trivial bits of interesting information wrapped up in narrative and banter is saturated. I picked this book up because my partner had purchased it. She is a fan of the show. I have no qualms with it. Just saturated with trivial pursuits already, like I said. Despite the claim that this is knowledge you should possess, this isn’t a field guide to distinguishing poisonous berries from their similarly berry-hued and berry-shaped and nutritious brethren. There are no guides to the best knot for each securing fishing hook to fishing line, or how to gut a fish, or anything about fish at all, really. On how one might handle a tricky interpersonal problem at work, this book is silent. I can’t imagine ever needing to employ knowledge of the history of Mr Potato Head unless stuck in an elevator with a particularly deranged fan of Hasbro toys. Toys and jokes are alike in that explanation of their genesis saps any fun they might be. Despite the exhortation that we should, in fact, know these things, the book is a good “compendium of mostly interesting things”. I enjoyed the history of Kevorkian, or the history of guns. The tone is tongue in cheek, the authors of course don’t take themselves seriously, and both seem to have a good rapport that occasionally translates onto the page via snippy footnotes. The artwork enhances the flow, and the typesetting is consistent and visually alluring. That said, for me there is a ceiling of enjoyment for these type of factlet books; I find myself reading in snippets and putting down for days or weeks before compelling myself for the sake of completeness to come back. The subject matter is interesting enough, and I do enjoy random and mostly trivial pieces of information, gathering them up like one of those birds who scavenges string or pieces of newspaper or candy wrappers to build a nest. But I think I am a sucker for throughline narrative. I’ve written this review a little while after reading this book, and while that distance might not blur my memory of a book, I found it disturbingly hard to remember the sections of this book, let alone their interesting contents. While this might be stuff you should know, I’ve found it was more like mental cotton candy – airy and disappears quick. ",
    "url": "/notes/other_books/stuff-you-should-know#thoughts",
    
    "relUrl": "/notes/other_books/stuff-you-should-know#thoughts"
  },"732": {
    "doc": "The Actual Star",
    "title": "The Actual Star",
    "content": " ",
    "url": "/notes/other_books/the%20actual_star",
    
    "relUrl": "/notes/other_books/the%20actual_star"
  },"733": {
    "doc": "The Actual Star",
    "title": "Summary",
    "content": "The novel braids three stories, each 1,000 years apart and the first starting in 1012 in the fictional Mayan city of Tzoyna as twin brother and sister Ajul and Ixul prepare to become king and queen, and their younger sister, Ket, seeks to help the royal cause with a bloodletting and psilocybin-induced vision. Jumping forward 1,000 years gives us Leah from Anoong, Minnesota, departing to her paternal ancestral roots in Belize and encountering twin tour guides Javier and Xander. The final story concerns Niloux and Taanaj, diametrically opposed charismatics in a world that has embraced identity choice and renounced capitalism’s stationary hoarding. The story spans these three centuries as each triad of characters is seeking Xibalba, the world behind the world, a paradise of authenticity where the stars are actual stars and not projections. ",
    "url": "/notes/other_books/the%20actual_star#summary",
    
    "relUrl": "/notes/other_books/the%20actual_star#summary"
  },"734": {
    "doc": "The Actual Star",
    "title": "Thoughts",
    "content": "This one was conflicting. Advertised as David Mitchell meets Octavia Butler, the novel tells a story in three parts across 3 millennia. And sure, it might be a Mitchellian construction to span a story across drastic time skips, but what makes a Mitchell novel isn’t necessarily its neatly entangled plots but rather a facility with language, how genre and voice and character are bent to the whim of plot. Mitchell also largely eschews symbolism and parable, but The Actual Star is all symbol, its three characters Sun, Moon, and first human awaken anew in each story as a set of twins, one mercurial and passionate and the other rational, as well as the visionary observer. The plot revolves around the conflict between Sun and Moon told across those millennia. The Actual Star does feel closer to Butler’s Parable novels; they both concern a charismatic leader who builds a religion or has one built around her. Both tell stories of a world cleaved by climate change, of a future of human wanderers and refugees. In Byrne’s novel, that wandering has been elevated to a religion. Instead of God being changed, God here is entropy. And Leah, the Instead of raising your own children, they are raised by a series of zadres. You don’t have brothers and sisters as such, but hermanix. Everyone is born with male and female genitalia, and are free to choose their nationality and ethnicity, herein called a manera. A note on language, Byrne’s future imagines that English is spoken commonly with Spanish idioms sprinkled throughout. This is mostly innocuous, but there are long sections rendered in Kriol, which is a Belizean creole of English slang, and reading it is like trying to read text speak while someone shoots a squirt gun directly into your eyes. I mostly skipped these dialog sections and hoped the salient plot points would be rendered in a more readable format subsequently. The future Byrne envisions here feels a little imbued with an agenda and the novel teeters occasionally into manifesto. Leah, for someone who a religion is built around, is insufferable at times. Men frequently get erections at the slightest prompting, and walk around with them unperturbed. The novel feels overlong. Sometimes, the Spanish is incorrect (jugador doesn’t mean actor). But all that said, it is ambitious, and at times compelling, and a worthy read despite those shortcomings. ",
    "url": "/notes/other_books/the%20actual_star#thoughts",
    
    "relUrl": "/notes/other_books/the%20actual_star#thoughts"
  },"735": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "The Alliance: Managing Talent in the Networked Age",
    "content": ". | Chapter 1: Employment in the Networked Age | Chapter 2: Tours of Duty | Chapter 3: Building Alignment in a Tour of Duty | Chapter 4: Implementing Transformational Tours of Duty | Chapter 5: Employee Network Intelligence | Chapter 6: Implementing Network Intelligence Programs | Chapter 7: Corporate Alumni Networks | Chapter 8: Implementing an Alumni Network | Book Notes . | Why I read this book | One key takeaway | Summary | How was the book | Any other reading | . | . ",
    "url": "/notes/business_books/the-alliance",
    
    "relUrl": "/notes/business_books/the-alliance"
  },"736": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Chapter 1: Employment in the Networked Age",
    "content": "The employee-employer relationship is based on a dishonest conversation, one where the employee can be fired “at-will” but the employer is asking for loyalty. This is an old model of employment, meant for an era of stability, when an employee would stay at a company for life. As a result of shareholder capitalism that valued short term profits that required “rightsizing” (firing) to meet short term goals, this paradigm changed. This old way is too rigid, so companies have often reduced the employee-employer relationship to a legal, binding contract, but this changes companies most valuable resource (talent) to a fungible one in the name of quick profits. A business without loyalty is a business without long-term thinking. A business without long-term thinking is a business that’s unable to invest in the future. And a business that isn’t investing in tomorrow’s opportunities and technologies—well, that’s a company already in the process of dying. The business world needs a new employment framework that facilitates mutual trust, mutual investment, and mutual benefit. This book’s goal is outlining a framework, an alliance, between employees and employers. The idea that a company’s culture is “family” is flawed – imagine firing a poorly performing child. The right paradigm is team, which has a specific mission, and its members come together to accomplish that mission. […] the idea of a family still has relevance because it defines how we treat each other—with compassion, appreciation, and respect. The real value of Silicon Valley is that it is all about the people. In the new economy, the “founder mind-set” or entrepreneurial thinking are the most important. In old world, efficiency was paramount, but that led to higher and higher degrees of specialization, or the infamous buggy-whip manufacturer. Today, entrepreneurial thinking and doing are the most important capabilities companies need from their employees. Two examples: . | John Lasseter started at Disney and after seeing computer-generated animation pitched the idea of making a completely computer-generated movie to Disney. Disney promptly fired him, and he went on to found Pixar. Eventually, Disney bought Pixar for &gt;$7 billion. | The idea from AWS didn’t come from Bezos or the executive team, but a regular employee, Benjamin Black. Eventually Bezos greenlit the project so Black could develop AWS, which is hugely profitable. | . Some important questions this book asks: . | How do I build trust and loyalty with my employees if I can’t guarantee lifetime employment? | How does the alliance apply to different types and levels of employees? | How do I build a relationship with my entrepreneurial employees when our ultimate goals and values might differ? | What kind of networking and personal brand building should I allow my employees to do in the workplace? | How can I run an effective corporate alumni network given limited time and resources? | . ",
    "url": "/notes/business_books/the-alliance#chapter-1-employment-in-the-networked-age",
    
    "relUrl": "/notes/business_books/the-alliance#chapter-1-employment-in-the-networked-age"
  },"737": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Chapter 2: Tours of Duty",
    "content": "In the context of the alliance, the tour of duty represents an ethical commitment by employer and employee to a specific mission. […] By recasting careers at your company as a series of successive tours of duty, you can better attract and retain entrepreneurial employees. Some might be worried that tours of duty framework gives employees permission to leave, but that is a dishonest relationship that an employer should give “permission” for any employee to leave. These ideas were tested in Silicon Valley, one of the fastest moving, most competitive economies on the planet, where retaining talent is immensely difficult. If they work there, they can work anywhere. | The tour of duty framework || |   |   |   |   | . |   | Design | Deal | Duration | Transition | . | Rotational | Incoming employees are onboarded programmatically | Assessment of potential future fit at the company; predictable employment | For typical analyst programs, usually on to three years, for other rotational tours, ongoing | Employee may start another rotation or shift to a Transformational tour; little to no moral onus for leaving the company afterward | . | Transformational | Negotiated individually | Transformation of employee’s career, transformation of company | Determined by the specific mission, usually two to five years | Prior to completing the mission, employee negotiates new tour at existing company or transition out | . | Foundational | Negotiated individually | For company, a steward of core values, for employee, deep purpose and meaning from work | Ongoing | Both parties anticipate the relationship will be permanent and make their best efforts to stay together | . Rotational tours provide scalability by helping companies hire large numbers of employees into stable, well-understood roles. Transformational tours provide adaptability by helping companies bring in the specific skills and experiences required. Foundational tours provide continuity by helping companies retain employees who focus on the long term. stars vs middle class . |   | : **stars** : | : **middle class** : | . | **job title** | Regular upgrades | Not necessarily any change | . | **who leads the process** | Their managers | Managers, but with employees taking a more active, proactive role | . | **employee goal** | Advancing the company and their career by achieving aggressive goals | Maintaining employability by helping the company adapt | . ",
    "url": "/notes/business_books/the-alliance#chapter-2-tours-of-duty",
    
    "relUrl": "/notes/business_books/the-alliance#chapter-2-tours-of-duty"
  },"738": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Chapter 3: Building Alignment in a Tour of Duty",
    "content": "Aligning Employee Goals and Values with the Company’s . In the Industrial Age, the company subsumed an employee’s individual identity. Today, a modern company cannot expect its corporate purpose to become the sole purpose of the employee. Alignment means that managers should explicitly seek and highlight the commonality between the company’s purpose and values and the employee’s career purpose and values. For the different tours (Rotational, Transformational, and Foundational), there is increasing overlap between employee interests and company interests that intersect in mission alignment. three steps to building alignment . | establish and disseminate the company’s core mission and values . | A good mission and values statement should be specific and rigorous enough so that some competent players will feel a strong alignment, while others will understand that the company just isn’t a good fit. | . | learn each individual employee’s core aspirations and values . | Ask ‘Who do you look at and say, “I want to be her someday?”’ | . | work together to align employee, manager, and company . | collaborative, rather than top-down exercise | . | . The process for alignment can be a long one, so advice for managers: . | define values in a group | define personal values one-on-one | build trust by opening up | . ",
    "url": "/notes/business_books/the-alliance#chapter-3-building-alignment-in-a-tour-of-duty",
    
    "relUrl": "/notes/business_books/the-alliance#chapter-3-building-alignment-in-a-tour-of-duty"
  },"739": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Chapter 4: Implementing Transformational Tours of Duty",
    "content": "Tactics and techniques for using the framework . Both manager and employee have an explicit (albeit nonbinding) agreement with shared objectives and realistic expectations. This agreement provides the criteria for regular, mutual performance measurement and management. | Start the Conversation and Define the Mission | . Every employee gets hired for a rotational or transformational tour. | what is the objective of the tour? | what do results of a successful tour of duty look like for the company? for the employee? how will the employee transform and be transformed by this tour? | . | Set Up a System of Regular Checkpoints for Both Sides to Exchange Feedback with Each Other | Before a Tour of Duty Draws to a Close, Begin Defining the Next Tour of Duty . | define a new tour within the company, or plan a transition as the employee will pursue a tour at a different company | . | Managing for the Unexpected: When There’s a Change in the Middle of a Tour . | what happens if one party breaks the alliance? breaking an alliance part way through should be seen as a breach of ethics, as the betrayal of a relationship if either party does it. | . | . Advice for managers having the conversation: . | mold the conversation to the type of tour | be sensitive to power imbalances | choose metrics that are leading indicators | apply moral suasion ethically | regularly check in on how the tour is evolving | establish a basis for trust through openness and transparency | assure your employees that you’re not about to fire them | . Also, remember some tactical advice: . | be structured | share the agenda in advance | be as concrete and specific as possible | . ",
    "url": "/notes/business_books/the-alliance#chapter-4-implementing-transformational-tours-of-duty",
    
    "relUrl": "/notes/business_books/the-alliance#chapter-4-implementing-transformational-tours-of-duty"
  },"740": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Chapter 5: Employee Network Intelligence",
    "content": "Bringing the world into your company . Old employment model encouraged everyone to look inward when problem solving, to convene the smartest people in the office to solve particular problems. Bill Gates quote: . “The most meaningful way to differentiate your company from your competition, the best way to put distance between you and the crowd, is to do an outstanding job with information. How you gather, manage, and use information will determine whether you win or lose.” . An individual career accelerates with the strength of their network. Network intelligence and the associated willingness to seek help from people outside the company is one of the key factors in the success of Silicon Valley. Network intelligence has several functions: . | connect a company with outside info sources | provide access to “hidden data” – knowledge that isn’t publicly available | generate serendipity, which is a major driver of innovation, as most innovation is an application of existing tech to a new problem | help you see opportunities you would have otherwise missed | . ",
    "url": "/notes/business_books/the-alliance#chapter-5-employee-network-intelligence",
    
    "relUrl": "/notes/business_books/the-alliance#chapter-5-employee-network-intelligence"
  },"741": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Chapter 6: Implementing Network Intelligence Programs",
    "content": "Tactics and techniques for investing in employee networks . | recruit connected people | teach employees how to mine intelligence from their networks via conversations and social media | roll out programs and policies that help employees build their individual networks . | encourage employees to be active on social media and make themselves discoverable in a professional context by pushing their brands and building thought leadership | set up a “networking fund” for employees so employees can expense lunches with interesting people or conference attendance | facilitate speaking gigs for employees in order to establish them as thought leaders in the industry | host events at your company office to increase exposure | . | have employees share what they learn with the company . | lunch in learn or brown bag lunches to share info | . | . Advice for managers who want to talk to employees about network intelligence: . | make the case for why network intelligence is important for employer and employee | personally explain the company’s programs | model proper usage of individual networks | ask every employee to furnish a list of the smartest people he knows who do not work at the company | . ",
    "url": "/notes/business_books/the-alliance#chapter-6-implementing-network-intelligence-programs",
    
    "relUrl": "/notes/business_books/the-alliance#chapter-6-implementing-network-intelligence-programs"
  },"742": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Chapter 7: Corporate Alumni Networks",
    "content": "The mutual benefits of a lifelong alliance . Establishing a corporate alumni network, which requires relatively little investment, is the next logical step in maintaining a relationship of mutual trust, mutual investment, and mutual benefit in an era where lifetime employment is no longer the norm. A company should clearly articulate the bidirectional value both parties get from the continuing relationship. Professional service firms and colleges and universities provide a good model on how these networks can be created and maintained. Four Reasons to Invest in an Alumni Network . | alumni networks help you hire great people . | makes it easier to hire “boomerang” people who come back after short leave of absence | helps in referrals | . | alumni provide useful information . | great sources of network intelligence, competitive information, etc. | . | alumni refer customers . | alumni can refer customers or become them | . | alumni are brand ambassadors . | cheaper than advertising indirectly | . | . Three Levels of Investment in Alumni Networks . | ignore | support | invest | . ",
    "url": "/notes/business_books/the-alliance#chapter-7-corporate-alumni-networks",
    
    "relUrl": "/notes/business_books/the-alliance#chapter-7-corporate-alumni-networks"
  },"743": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Chapter 8: Implementing an Alumni Network",
    "content": "Tactics and techniques for setting up a corporate alumni network . | decide who you want to include in your alumni network . | should participation be broad, or more selective? should it be “distinguished” or every ex-employee? | . | explicitly define the expectations and benefits of the relationship . | what are the programs? e.g. referral bonuses, product discounts and whitelist access, hosted events, official recognition for selected alumni, information for alumni | . | establish a comprehensive exit process . | how do you maintain contact with departing employee after they leave (exit interview)? | . | build links between current employees and alumni . | Senior managers should set up formal programs and processes for tapping alumni intelligence before the need for their contribution arises. | . | . Advice for managers having the conversation about setting up an alumni network: . | use the alumni network as a selling point during the hiring process | make it easy and obvious for current employees to tap the alumni network for network intelligence | reinforce the career-long nature of the alliance upon exit | . ",
    "url": "/notes/business_books/the-alliance#chapter-8-implementing-an-alumni-network",
    
    "relUrl": "/notes/business_books/the-alliance#chapter-8-implementing-an-alumni-network"
  },"744": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Book Notes",
    "content": " ",
    "url": "/notes/business_books/the-alliance#book-notes",
    
    "relUrl": "/notes/business_books/the-alliance#book-notes"
  },"745": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Why I read this book",
    "content": "Ruben Harris (founder of Career Karma) mentioned this on the Software Engineering Daily podcast, among a few other books, so I added most of the books to the backlog. This one was short enough to be picked up in a bit of downtime between some other, longer books. ",
    "url": "/notes/business_books/the-alliance#why-i-read-this-book",
    
    "relUrl": "/notes/business_books/the-alliance#why-i-read-this-book"
  },"746": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "One key takeaway",
    "content": "The era of lifetime employment is over, giving way to a free-agency style interaction between employees and employers, a transactional relationship that prioritizes instant gratification over long-term dedication and planning, to no one’s benefit. This book posits an ‘alliance’, a model already taking over Silicon Valley, where employee and employer mutually invest in each other and define clearly the terms of their mutually beneficial relationship. ",
    "url": "/notes/business_books/the-alliance#one-key-takeaway",
    
    "relUrl": "/notes/business_books/the-alliance#one-key-takeaway"
  },"747": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Summary",
    "content": "The book is broken up into four general parts: . | defining tours of duty | defining and aligning on interests and goals | building network intelligence | creating and leveraging an alumni network | . Most every chapter ends with “advice to the manager” for implementing the theme of the chapter. ",
    "url": "/notes/business_books/the-alliance#summary",
    
    "relUrl": "/notes/business_books/the-alliance#summary"
  },"748": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "How was the book",
    "content": "It’s hard to tell who this book is for: the entrepreneurial founder to be, looking to create a talent pool, the manager looking to establish an honest and open and mutually beneficial relationship with employees, or the employee, looking to maximize their input on a team. I suspect those markets are probably too small on their own to justify the publication cost. The book certainly can certainly count brevity amongst its cardinal virtues; you can put it away in under 3 hours unless you insist on taking notes. I like to play a game with any business book, which is, to reduce it to a sentence or key takeaway, and see how much is lost. Maybe in the future I’ll have a more clever name for that heuristic, but for now, it applies with this book. Reading a synopsis and a few bullet points essentially encompasses all there is to be gained here. Not every pamphlet needs a book, although the career heft of the authors seems to compel a listen. The recipe is simple enough: found a start-up, live in the Silicon Valley bubble and spend every waking hour networking or blogging or learning or improving your brand, and you will reach career enlightenment. We need separate careers to maintain our first career relevancy. ",
    "url": "/notes/business_books/the-alliance#how-was-the-book",
    
    "relUrl": "/notes/business_books/the-alliance#how-was-the-book"
  },"749": {
    "doc": "The Alliance: Managing Talent in the Networked Age",
    "title": "Any other reading",
    "content": "Both mentioned in the podcast above, the first by the same authors as The Alliance. | The Startup of You | The Starfish and the Spider | . ",
    "url": "/notes/business_books/the-alliance#any-other-reading",
    
    "relUrl": "/notes/business_books/the-alliance#any-other-reading"
  },"750": {
    "doc": "The Anthropocene Reviewed",
    "title": "The Anthropocene Reviewed",
    "content": "John Green. 2021 . ",
    "url": "/notes/other_books/the-anthropocene-reviewed",
    
    "relUrl": "/notes/other_books/the-anthropocene-reviewed"
  },"751": {
    "doc": "The Anthropocene Reviewed",
    "title": "Summary",
    "content": "A series of essays framed as reviews on a wide-ranging set of topics, from Diet Dr. Pepper to sunsets to Green’s obsessive love of the band The Mountain Goats. Each essay concludes with Green giving the topic a rating of 1 to 5 stars. Some memorable reviews: . | Harvey – meditation on Green’s depression | Auld Lang Syne – friend’s death | Sycamore Trees - on fatherhood | Staphylococcus aureus – diseases and life and the miracle of science | . ",
    "url": "/notes/other_books/the-anthropocene-reviewed#summary",
    
    "relUrl": "/notes/other_books/the-anthropocene-reviewed#summary"
  },"752": {
    "doc": "The Anthropocene Reviewed",
    "title": "Thoughts",
    "content": "Ostensibly a book of essays each reviewing a separate topic (I’ll resist the urge here to make a “joke” about reviewing a book of reviews in the same way I need to remind myself not to say to a grocery store clerk upon difficulty in ringing up an item that that must mean it’s free), this is, by the author’s own admission, more suitably read as a memoir. And what a vulnerable, wonderful, sad, and exuberant memoir it is. Green intertwines a phenomenology of the mundane with the wonder of the profound, jumping from reviews of Diet Dr Pepper (“a soda that tastes like everything and also like nothing”) to a bout of depression bookended with a breakup and the Jimmy Stewart movie Harvey, to a meditation on the death of a friend, dying, and Auld Lang Syne, with a cornucopia of topics in between. Most serve as portals both to introspect his own condition as well as to extrospect human’s place in the world, to understand “why life wants to be”. Green reminds of Vonnegut – they both can affect a terse, witty style. Simple, sturdy, meat and potatoes prose that is equally to the task of wistful reminiscences as it is light-hearted banter. Both Green and Vonnegut are “of Indianapolis”, although Green notes that “it’s telling that from the time [Vonnegut] could choose where to live, he did not choose to live here”. The book is filled with literary references and quotes, “maybe overfilled with them”, as Green notes, but I’ve always thought a great author is first and foremost a great reader, and Green’s wide reading list is on display. I’ve never listened to Green’s podcast which served as the petri dish for these essays, nor have I read his novels. But I quite enjoy the way he thinks and sees the world, and I might pick some of his work up in the future. ",
    "url": "/notes/other_books/the-anthropocene-reviewed#thoughts",
    
    "relUrl": "/notes/other_books/the-anthropocene-reviewed#thoughts"
  },"753": {
    "doc": "The Bone Clocks",
    "title": "The Bone Clocks",
    "content": " ",
    "url": "/notes/other_books/the-bone-clocks",
    
    "relUrl": "/notes/other_books/the-bone-clocks"
  },"754": {
    "doc": "The Bone Clocks",
    "title": "Why I read this book",
    "content": ". This is my 4th Mitchell novel, having read Cloud Atlas, Ghostwritten, and The Thousand Autumns of Jacob de Zoet before this. He might be the best writer I’ve read currently writing in English – blending an entertainer’s flourish for narrative and the stylistic virtuosity of a “serious” fiction writer. ",
    "url": "/notes/other_books/the-bone-clocks#why-i-read-this-book",
    
    "relUrl": "/notes/other_books/the-bone-clocks#why-i-read-this-book"
  },"755": {
    "doc": "The Bone Clocks",
    "title": "Summary",
    "content": ". The Bone Clocks is grouped into six novellas circling the same characters and world, set to a backdrop of a gods and men final brawl between immortal atemporals in the Horologists, immortal by birthright, and the Anchorites, acolytes of the Shaded Way who nourish their immortality by “decanting” the souls of those with some psychosoteric ability – soul vampires. The first narrative follows Holly Sykes as a child running away from home, the second jumps to Hugo Lamb, an overly-smart Cambridge student on a vacation to the Swiss Alps and who dalliances with Holly Sykes. The third narrative follows Ed Brubeck, husband to Holly Sykes and foreign war reporter caught between his love of family and his compulsion to live life on the edge. After Brubeck, we get fading author Crispin Hershey, a facsimile of Martin Amis, David Mitchell, and perhaps Salman Rushdie, as his career hurdles towards oblivion. Again, his narrative hinges on Holly, as they develop a friendship after Holly has published her book Radio People to great acclaim. In the penultimate narrative, we occupy Marinus’s world, an ancient atemporal currently living in the body of a psychiatrist, as she and her fellow atemporals gear up for the final showdown with the soul vampires. In the last narrative, we return to an elderly Holly Sykes as the world has descended into climate crisis and on the cusp of regression back to the Stone Ages. ",
    "url": "/notes/other_books/the-bone-clocks#summary",
    
    "relUrl": "/notes/other_books/the-bone-clocks#summary"
  },"756": {
    "doc": "The Bone Clocks",
    "title": "How was the book",
    "content": ". Most people have rendered some version of the following thought after reading more than a few Mitchell novels: is there anything he can’t do? The Bone Clocks is a cinder block of a novel, my version’s odometer clocking in at a voluminous 624. The plot revolves around Holly Sykes, first as a wayward child acting the part of a rebellious youth and running away from home, then four more narratives that helix-like intersperse with Holly’s life, before finally returning to an elderly Holly Sykes. Mitchell buffets the narrative with his typically mealful prose. He is that rare virtuoso of both style and narrative; The Bone Clocks showcases him at his best, from the the feng shui of the six neatly nested matryoshka-like novellas, to the visceral and bodily styles of his metaphor: “cheekbones you’d slice your thumb on”, laughs like “a sequence of glottal stops, like the noise a body might make as it falls down wooden stairs into a basement”. That isn’t to say everything here is great. The penultimate section depicts a psychosoteric battle between the big bad, the Anchorites, soul vampires who feed their immortality on the blood “decanted” from those who showcase some mental superpowers, and the magnanimous and ageless Horologists, who have “immortality as a birthright” who are trying to defeat the Anchorites, a scene that might uncharitably be read like an MCU fan-fic. Seeing my dead body against the wall, the Anchorites reason that no psychosoteric can now attack them, and their red shield flickers out. They’ll pay for this mistake. Incorporeally, I pour psychovoltage into a neurobolas and kinetic it at our assailants. It smacks into Imhoff and Westhuizen, the Fifth and Seventh Anchorites, respectively, and down they go. Three against seven. I ingress into Arkady to help him repair the shield, which turns a stronger blue and pushes back the remaining Anchorites. When Arkady glances back at Ōshima, however, I see his fight is lost. His body is evaporating as we look. Go to Holly, suborders Arkady. I obey without even thinking to bid him goodbye, an omission I regret even as I transverse to Holly, ingress, evoke an Act of Total Suasion, and … Now what? . Despite this brief departure, a turn that might not suit Mitchell’s talents as well as other styles (is laser beam shooting action an answer to this review’s initial question?), the denouement of the novel returns to the immensely personal reality of life, a now elderly Holly Sykes forced to live in a world that never beat climate change, to a world on the cusp of becoming a hellscape of barbarism, and returning to Mitchell the reins he is much more capable of wielding: exceptionally well-crafted dialogue, perfect pacing, and a fine eye for the twitches of humanity that enfleshes his characters. While most of Mitchell’s work defies genre, The Bone Clocks might be said to occupy that rarefied place of literary science fiction, and he has more than a passing similarity to writers like Marukami, Ishiguro, or Rushdie, all of whom have to varying degrees embraced the fantastic in their fiction. The Bone Clocks represents the most concentrated dive for Mitchell into the fantastic. In the past, the ethereal occupied a “tree in a school play” role in his fiction, but The Bone Clocks is almost entirely foregrounded with this otherworldly-ness, sometimes drowning the humanity of his fully realized characters. The way Mitchell adds in this psychic showdown between immortals feels almost like when Bob Ross would draw a gigantic tree in the middle of his painting with two minutes left in an episode, painting over the painstakingly rendered bushes and trees and rocks and shorelines, and there is nothing that makes the literati more squeamish than a science fiction or fantasy plot. Perhaps we can call it magical realism, and perhaps this is another thing in the ever-growing list of things Mitchell can do in the (definitely not) dead novel. ",
    "url": "/notes/other_books/the-bone-clocks#how-was-the-book",
    
    "relUrl": "/notes/other_books/the-bone-clocks#how-was-the-book"
  },"757": {
    "doc": "The Bone Clocks",
    "title": "Favorite quotes",
    "content": ". A writer flirts with schizophrenia, nurtures synesthesia, and embraces obsessive-compulsive disorder. Your art feeds on you, your soul, and, yes, to a degree, your sanity. Writing novels worth reading will bugger up your mind, jeopardize your relationships, and distend your life. You have been warned. (390) . I put my hand on the altar rail. “What if … what if heaven is real, but only in moments? Like a glass of water on a hot day when you’re dying of thirst, or when someone’s nice to you for no reason, or …” Mam’s pancakes with Mars Bar sauce; Dad dashing up from the bar just to tell me, “Sleep tight don’t let the bedbugs bite”; or Jacko and Sharon singing “For She’s a Squishy Marshmallow” instead of “For She’s a Jolly Good Fellow” every single birthday and wetting themselves even though it’s not at all funny; and Brendan giving his old record player to me instead of one of his mates. “S’pose heaven’s not like a painting that’s just hanging there forever, but more like … like the best song anyone ever wrote, but a song you only catch in snatches, while you’re alive, from passing cars, or … upstairs windows when you’re lost …” (35) . ",
    "url": "/notes/other_books/the-bone-clocks#favorite-quotes",
    
    "relUrl": "/notes/other_books/the-bone-clocks#favorite-quotes"
  },"758": {
    "doc": "The Bone Clocks",
    "title": "Any other reading",
    "content": ". Anything else by Mitchell . ",
    "url": "/notes/other_books/the-bone-clocks#any-other-reading",
    
    "relUrl": "/notes/other_books/the-bone-clocks#any-other-reading"
  },"759": {
    "doc": "The Code Breaker: Jennifer Doudna, Gene Editing, and the Future of the Human Race",
    "title": "The Code Breaker: Jennifer Doudna, Gene Editing, and the Future of the Human Race",
    "content": "I first heard of Walter Isaacson on an episode of The Knowledge Project podcast where he was talking about how curiosity fuels creativity. He was recounting a few of the more prominent people he was written biographies for and the common characteristic they all have in common: creativity. It’s what aligns Steve Jobs, or Leonardo da Vinci, or Albert Einstein, or Jennifer Doudna. That’s what groups all the principal players in The Code Breaker. Ostensibly a story about Jennifer Doudna, the 2020 Nobel Prize winning biochemist, and her pioneering work with the gene-editing tool CRISPR, there is a full ensemble cast of dedicated science professionals jockeying to make the next big biochemistry discovery. The book naturally pits Doudna against Feng Zhang, but there are dozens of earnest and brilliant scientists who opened the door to the ability to edit our own genes. There are a few things that are striking about this new world we now occupy. Firstly, things are moving fast. Like exceptionally fast. CRISPR was discovered around 2012, and here we are on the outset of 2022 and it has already begun to realize its amazing potential. 10 years from theory to practice is quantum speed in science. Secondly, the cast of characters who came together to contribute to this brave new world are globally diverse. We live in a world where science recognizes no bounds, no national lines or creed. It strikes me as a real danger to America’s scientific supremacy that we are so willing to close our doors to immigration. We are very likely closing the door on the next Feng Zhang. Isaacson writes like a reporter: simple sentences, no verbal stunt pilotry. He wants his prose to be as invisible as possible, his characters shining through. And Doudna is a compelling one. Prompted into scientific pursuit by a reading of Watson’s Double Helix as a 14 year old child (Isaacson shares the same origin story, albeit one that didn’t end him up as a Nobel prize winning chemist, or a chemist at all), Doudna combines competitiveness, scientific brilliance, and worldliness to create a potent combination. Isaacson’s contention that the next frontier is the marriage of biology and technology, much like computer science was at the outset of this century, feels true if not a bit fanatical. Surely we live on the cusp of a revolution in what it means to be human (I had thought this might be a tad overblown until reading this novel and seeing that the tech is already here), but tech companies still run the world. That being said, the interesting work might be happening in biotech, and I’m excited to see where we will be in the very near future. ",
    "url": "/notes/educational_books/the-code-breaker",
    
    "relUrl": "/notes/educational_books/the-code-breaker"
  },"760": {
    "doc": "The Demon-Haunted World",
    "title": "The Demon-Haunted World",
    "content": " ",
    "url": "/notes/educational_books/the-demon-haunted-world",
    
    "relUrl": "/notes/educational_books/the-demon-haunted-world"
  },"761": {
    "doc": "The Demon-Haunted World",
    "title": "Takeaways",
    "content": "Anti-science thought is an historical force that predates the current climate – we can trace it back to witch hunts and likely far before that. That said, Carl Sagan wrote this book just before the internet, which really multiplies the effects of echo chambers. In the past, there was a friction to surrounding yourself with people who agreed with your marginal views; you’d need to fly to conferences or seek out groups or sign up for mailing lists. This friction served as some inoculation against the virality of fringe views – laziness and inertia as the firebreak to their adoption. But the internet engenders an effortless self-selection for group membership that allows people to fashion their identity on their views because they have ready-made groups to endorse it. Identity is not an individual action but rather is about group membership. ",
    "url": "/notes/educational_books/the-demon-haunted-world#takeaways",
    
    "relUrl": "/notes/educational_books/the-demon-haunted-world#takeaways"
  },"762": {
    "doc": "The Demon-Haunted World",
    "title": "Brief Thoughts",
    "content": "Rating: 7.5/10 . Carl Sagan weaves a deft argument against anti-science ideals, starting with alien abductions but tracing a line back to witch hunts of the Middle Ages. The argument is compelling to those who already view the importance of the scientific method as paramount, although a book on viral fringe ideas feels somewhat incomplete without reckoning with the Internet, a place where any fringe idea has an identity-affirming community ready-made, to be slipped on like a jacket. Inertia and laziness are no longer a firebreak against the virality of any idea. But this book can hardly be faulted for its publication date, 1995. If nothing else, it makes you wish Sagan were still around to build ironclad arguments about the world we currently live in. ",
    "url": "/notes/educational_books/the-demon-haunted-world#brief-thoughts",
    
    "relUrl": "/notes/educational_books/the-demon-haunted-world#brief-thoughts"
  },"763": {
    "doc": "The Design of Everyday Things",
    "title": "The Design of Everyday Things",
    "content": " ",
    "url": "/notes/educational_books/the-design-of-everyday-things",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things"
  },"764": {
    "doc": "The Design of Everyday Things",
    "title": "1: The Psychopathology of Everyday Things",
    "content": "Chapter Summary . Every object has certain abilities (affordances) that object allows dependent upon the user of that object. There are ways to signal what those abilities are (signifiers), and how to create those is the key insight of designing. We should design for humans through human-centered design, without the rosy-colored idea that humans are perfect agents and should bend to the machines contours rather than the other way around. norman doors - poorly designed doors where it isn’t clear if you should push or pull . two most important parts of design . | discoverability - is it even possible to figure out what actions are possible and where and how to perform them? | understanding - what does it all mean? how is the product supposed to be used? what do all the different controls and settings mean? | . All artificial things are designed (4) . Three Types of Design . | industrial design - The professional service of creating and developing concepts and specifications that optimize the function, value, and appearance of products and systems for mutual benefit of both user and manufacturer | interactive design - The focus is upon how people interact with technology. The goal is to enhance people’s understanding of what can be done, what ishappening, and what has just occurred. Interaction design draws upon principles of psychology, design, art, and emotion to ensure a positive, enjoyable experience. | experience design - The practice of designing products, processes, services, events, and environments with a focus placed on the quality and enjoyment of the total experience | . It is the duty of machines and those who design them to understand people […] We have to accept human behavior the way it is, not the way that we would wish it to be. (6) . Human-Centered Design . | a design philosophy that puts human needs, capabilities, and behavior first, then designs to accommodate those needs, capabilities, and ways of behaving | . Great designers produce pleasurable experiences. (10) . Fundamental Principles of Design . | discoverability - It is possible to determine what actions are possible and the current state of the device | affordances - The proper affordances exist to make the desired action possible . | the relationship between the properties of an object and the capabilities of the agent that determine how the object could be used | e.g., a chair affords sitting, but a heavy chair might only afford lifting to a few | importantly, it is not a property but a relationship – key is knowing who will use what you design | are the possible interactions between people and the environment – some are perceivable, some are not | perceived affordances often act as signifiers, but they can be ambiguous | . | signifiers - Effective use of signifier ensures discoverability, and that the feedback is well communicated and intelligible . | refers to any mark or sound, any perceivable indicator that communicates the appropriate behavior to a person | affordances determine what actions are possible, signifiers communicate where the action should take place | more important than affordances because they communicate how to use the design | must be perceivable, otherwise they fail to function | . | constraints - Providing physical, logical, semantic, and cultural constraints guides actions and eases interpretations | mappings - The relationship between controls and their actions follows the principles of good mapping, enhanced as much as possible through spatial layout and temporal contiguity . | the relationship between the elements of two sets of things | e.g., a set of light switches and the lights they control, or the controls that move a car seat | related controls should be grouped together, controls should be close to the item being controlled | . | feedback - There is full and continuous information about the results of actions and the current state of the product or service. After an action has been executed, it is easy to determine the new state. | some way of letting you know the system is working on your request | must be immediate | must be informative | . | conceptual model - The design projects all the information needed to create a good conceptual model of the system, leading to understanding and a feeling of control. The conceptual model enhances both discoverability and evaluation of results . | an explanation, usually highly simplified, of how something works | depending on your expertise, your conceptual model might be more or less right | . | . system image . | the combined information available to us | informed by the designer’s conceptual model, and informs the user’s conceptual model | . the paradox of technology . The same technology that simplifies life by providing more functions in each device also complicates life by making the device harder to learn, harder to use. (34) . ",
    "url": "/notes/educational_books/the-design-of-everyday-things#1-the-psychopathology-of-everyday-things",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things#1-the-psychopathology-of-everyday-things"
  },"765": {
    "doc": "The Design of Everyday Things",
    "title": "2: The Psychology of Everyday Actions",
    "content": "Chapter Summary . In addition to the affordances and signifiers of any given object, there is also the way humans interact with the object. There are three interaction modes, from the visceral to the behavioral to the reflective, and these follow along cognitive models of fast and slow thinking. Key to designing is understanding how cognition and emotion factor into the way people interact with objects. Two Gulfs of Action . | Gulf of Execution - where people try to figure out how it operates | Gulf of Evaluation - where they try and figure out what happened | . Seven Stages of Action . | Goal (form the goal) - What do I want to accomplish? | Plan (the action) - What are teh alternative action sequences? | Specify (an action sequence) - What action can I do now? | Perform (the action sequence) - How do I do it? | Perceive (the state of the world) - What happened? | Interpret (the perception) - What does it mean? | Compare (the outcome with the goal) - Is this okay? Have I accomplished my goal? | . For many everyday tasks, goals and intentions are not well specified: they are opportunistic rather than planned. Opportunistic actions are those in which the behavior takes advantage of circumstances. (43) . | people don’t want a quarter-inch drill, they want a quarter-inch hole – but really they want to hang a picture, and they want their house to feel welcoming, or they want to do what others do to make their house welcoming | . we like to think we understand ourselves. But the truth is, we don’t. Most of human behavior is a result of subconscious processes. (44) . two types of memory . | declarative memory – for factual information | procedural memory – recalling activities performed | . Three Levels of Processing . a conceptual model not to be taken too literally, but helpful grounding framework for thinking about what a designer needs to think about when designing . | visceral . | basic protective mechanism of the human affective system | quick judgments based on environment | fast and completely subconscious | great designers use aesthetic sensibilities to drive visceral responses | . | behavioral . | learned skills, triggered by situations that match appropriate patterns | for designers, most critical aspect is that every action is associated with an expectation | . | reflective . | home of conscious cognition | where deep understanding develops, where reasoning and conscious decision-making take place | most important for designer, because memories last far longer than the immediate experience | . | . learned helplessness . | a situation where people experience repeated failures at a task, and they decide the task can’t be done – can be overcome with positive psychology | we need to remove failure from our vocabulary – every failure is a learning opportunity | . human error is usually a result of poor design: it should be called system error. (66) . It is easy to design devices that work well when everything goes as planned. The hard and necessary part of design is to make things work well even when things do not go as planned. (68) . ",
    "url": "/notes/educational_books/the-design-of-everyday-things#2-the-psychology-of-everyday-actions",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things#2-the-psychology-of-everyday-actions"
  },"766": {
    "doc": "The Design of Everyday Things",
    "title": "3: Knowledge in the Head and in the World",
    "content": "Chapter Summary . We don’t need the entirety of knowledge of how to precisely use something entirely within our head – it is a combination of knowledge in our head and in the world that we can gather. Memory in the head takes several different forms and serves several different purposes. Understanding how memory works, how short-term and long-term memory differ, and how we can build constraints and cues into the world to overcome shortcomings with memory, is key to successful design. Knowledge in the Head vs Knowledge in the World . | knowledge in the world | knowledge in the head | . | information is readily and easily available whenever perceivable | marterial in morking memory is readily available. otherwise, considerable search and effort may be required | . | interpretation substitutes for learning. How easy it is to interpret knowledge in the world depends upon the skills of the designer | Requires learning, which can be considerable. Learning is made easier if there is meaning or structure to the material or if there is a good conceptual model | . | Slowed by the need to find and interpret the knowledge. | Can be efficient, especially if so well-learned that it is automated | . | Ease of use at first encounter is high | Ease of use at first encounter is low | . | Can be ugly and inelegant, especially if there is a need to maintain a lot of knowledge. This can lead to clutter. Here is where the skill of the graphics and industrial planner play major roles | Nothing needs to be visible, which gives more freedom to the designer. This leads to cleaner, more pleasing appearance – at the cost of ease of use at first encounter, learning, and remembering. | . The Structure of Memory . | short-term memory . | retains most recent experiences and material | is fragile | design implications: 1) don’t count on STM retaining much, 2) use multiple sensory modalities (sight, sound, haptics, hearing, spatial locations, gestures) to deliver different information | . | long-term memory . | memory for the past | not immediately codified, but is through sleep or rehearsal | design implications: create approximate models/heuristics to aid in retaining info | . | . [The] combination of technology and people that creates super-powerful beings. Technology doesn’t make us smarter. People do not make technology smart. It is the combination of the two, the person plus the artifact, that is smart. (112) . ",
    "url": "/notes/educational_books/the-design-of-everyday-things#3-knowledge-in-the-head-and-in-the-world",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things#3-knowledge-in-the-head-and-in-the-world"
  },"767": {
    "doc": "The Design of Everyday Things",
    "title": "4: Knowing What to Do: Constraints, Discoverability, and Feedback",
    "content": "Chapter Summary . Not all knowledge needs to exist in the head, and there are several ways to convey knowledge in the world, including various flavors of constraints and forcing functions. Additionally, feedback via sound can also guide desired behavior. It is the task of the designer to understand how to leverage these sorts of mechanisms to impart knowledge to the users of their products. Four Kinds of Constraints . | physical - physical limitations constrain possible operations | cultural - each culture has a set of allowable actions for social situations that are likely to change with time | semantic - rely on the meaning of the situation to constrain possible actions | logical - a relationship between the spatial or functional aspects of a component and the things they control | . A usable design starts with careful observations of how the tasks being supported are actually performed, followed by a design process that results in a good fit to the actual ways the tasks get performed. (137) . Forcing Functions . Forcing functions are a form of physical constraint: situations in which the actions are constrained so that failure at one stage prevents the next step from happening. (141) . | interlock - forces operations to take place in a proper sequence, e.g., opening a microwave door and cutting microwave power | lock-in - keeps an operation active, preventing someone from prematurely stopping it, e.g., jail cells or exit dialogs in word processors or vendor lock-in | lock-out - prevents someone from entering a space that is dangerous, or prevents an event from occurring, e.g., stairways that have a fire barrier to the basement so people escaping fire don’t go all the way to the basement | . | conventions are a special kind of cultural constraint, but often conventions make it hard to adopt new systems – change is hard | use sound as a signifier when vision isn’t enough, e.g., the backup warning on trucks | skeuomorphic - the technical term for incorporating old, familiar ideas into new technologies, even though they no longer play a functional role | . ",
    "url": "/notes/educational_books/the-design-of-everyday-things#4-knowing-what-to-do-constraints-discoverability-and-feedback",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things#4-knowing-what-to-do-constraints-discoverability-and-feedback"
  },"768": {
    "doc": "The Design of Everyday Things",
    "title": "5: Human Error? No, Bad Design",
    "content": "Chapter Summary . We need design not only for when the system works perfectly, but also for when things do not go to plan. Understanding common error patterns, as well as the mechanisms to counteract them, is key to good design. [W]hen an error happens, we should determine why, then redesign the product or procedure being followed so that it will never occur again or, if it does, so that it will have minimal impact. (164) . Root Cause Analysis . | investigate the accident until the single underlying cause is found | most problems don’t have a single underlying cause, and we can’t stop as soon as the first cause is uncovered | leverage the five whys (came out of Toyota) to get to the real root cause – keep asking why until there are no more answers | important to resist urge to blame people – most often, the system is to blame | . Types of Errors: Slips and Mistakes . Error is defined as deviance from the generally accepted correct or appropriate behavior. | slips . | occurs when a person intends to do on action but then ends up doing something else | action-based slip - a wrong action is performed | memory-lapse slip - memory fails, so the intended action is not done or results not evaluated | . | mistakes . | occurs when the wrong goal is established or the wrong plan is formed | rule-based mistake - a person has appropriately diagnosed the situation, but has decided upon an erroneous course of action | knowledge-based mistake - the problem is misdiagnosed because of erroneous or incomplete knowledge | memory-lapse mistake - takes place when there is forgetting at the stages of goals, plans, or evaluation | . | . Types of Slips . Capture Slips . | defined as the situation where, instead of the desired activity, a more frequently or recently performed one gets done instead: it captures the activity | designers need to avoid procedures that have identical opening steps but then diverge | . Description-Similarity Slips . | result from performing the correct action on the wrong object | designers need to ensure that controls and displays for different purposes are significantly different from one another | . Memory-Lapse Slips . | common cause of error that can lead to several errors: failure to do all steps, forgetting the outcome of an action | can be combatted by minimizing amount of steps, or providing vivid reminder of steps that need to be completed | . Mode-Error Slips . | occurs when a device has different states in which the same controls have different meanings | designers must try to avoid modes, but if they are necessary, the equipment must make it obvious which mode is invoked – designers need to compensate for interfering activities | . Types of Mistakes . Rule-Based Mistakes . | occurs when . | the situation is mistakenly interpreted, meaning the wrong rule is invoked | the correct rule is invoked, but the rule itself is faulty | the correct rule is invoked, but the outcome is incorrectly evaluated | . | the design challenge is to present the information about the state of the system in a way that is easy to assimilate and interpret, as well as to provide alternative explanations and interpretations | . Knowledge-Based Mistakes . | occurs when people are in novel situations and are consciously problem solving | best solution is in a good understanding of the system, provided by manuals or intelligent computer systems | . Memory-Lapse Mistakes . | occurs when someone forgets the steps or the goal or the plan | fixed the same way as memory-lapse slips: make sure all relevant information is continuously available . | you can use checklists (ideally one person to follow, one to check things off) to counteract errors | . In the absence of data, it is impossible to make improvements. (192) . | Jidoka - automation with a human touch – systems are mostly automated with a worker who might notice errors and report them | poka-yoke - “error proofing” or “avoiding errors” – add simple fixtures, jigs, or devices to constrain the operations | . Designing for Errors . steps that should be taken: . | understand the causes of error and design to minimize those causes | do sensibility checks: does the action pass the “common sense” test? | make it possible to reverse actions – to “undo” them – or make it harder to do what cannot be reversed | make it easier for people to discover the errors that do occur, and make them easier to correct | don’t treat the action as an error; rather, try to help the person complete the action properly. think of the action as an approximation to what is desired. | . Interruptions and distractions lead to errors, both mistakes and slips. (201) . The best way of mitigating slips is to provide perceptible feedback about the nature of the action being performed, then very perceptible feedback describing the new resulting state, coupled with a mechanism that allows the error to be undone. (207) . The Swiss Cheese Model of Errors . | if each slice represents a condition in the task being done, an accident can happen only if holes in all slices are lined up just right | well-designed systems are resilient against failure Design redundancy and layers of defense […] we need to think about systems, about all the interacting factors that lead to human error and then to accidents, and devise ways to make the systems, as a whole, more reliable. (210) . | . Resilience Engineering . | design systems, procedures, management, and the training of people so they are able to respond to problems as they arise | components are being continually assessed, tested, and improved . | put the knowledge required to operate the technology in the world. don’t require that all the knowledge must be in the head. allow for efficient operations hen people have learned all the requirements, when they are experts who can perform without the knowledge in the world, but make it possible for non-experts to use the knowledge in the world. this will also help experts who need to perform a rare, infrequently performed operation or return to the technology after a prolonged absence | use the power of natural and artificial constrains: physical, logical, semantic, cultural. exploir the power of forcing functions and natural mappings. | bridge the two gulfs, the gulf of execution and the gulf of evaluation. make things visible, both for execution and evaluation. on the execution side, provide feedforward information: make the options readily available. on the evaluation side, provide feedback: make the results of each action apparent. make it possible to determine the system’s status readily, easily, accurately, and in a form consistent with the person’s goals, plans, and expectations. | . ",
    "url": "/notes/educational_books/the-design-of-everyday-things#5-human-error-no-bad-design",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things#5-human-error-no-bad-design"
  },"769": {
    "doc": "The Design of Everyday Things",
    "title": "6: Design Thinking",
    "content": "Chapter Summary . Defining the modes of interaction for someone using a product are all well and good, but what does the actual act of designing in the real world look like? It is first key to define your problem, first by interrogating it and getting to the real root problem. Then, you apply the same iterative diverge then converge thinking to finding a solution. These processes are best applied iteratively with occasional management gates, and through cross-functional teams. It is expensive and takes a lot of effort to deliver products that meet a real need. Design Thinking . [I]n design, the secret to success is to understand what the real problem is. (217) . | process is iterative and expansive | don’t find solution until you understand what real problem is | apply human-centered design and the double-diamond diverge-converge model of design | solving the right problem that meets human needs and capabilities | . Double-Diamond Model of Design . | two phases, 1) finding the right problem, 2) finding the right solution | start by questioning the problem given to expand scope, then narrowing down to right problem | then, expand space of possible solutions before converging on a solution | . Human-Centered Design Process . | Observation . | observe would be customers in natural environment, in their normal lives, wherever the product being deigned would be used (applied ethnography) | no substitute for interacting directly with customer | marketing and design should work as complementary to each other – they have different concerns | . | Idea Generation . | generate possible solutions | create numerous ideas, be creative without regards for constraints, and question everything | . | Prototyping . | build quick mock-up of each potential solution | . | Testing . | gather small group that correspond closely to target audience | ideally 5 – you can test with 5, change the product, test with 5, etc etc. iterate! | . | . | activity-centered design - if the product is being used for many people, you can concentrate on the activities that will be performed, as opposed to a more human-centered design – let the activity define the product and its structure | . Tasks and Goals . | task is a small sub-component of a goal | Carver and Schier suggest three types of goals: . | be-goals – these are foundational, long-lasting, and determine one’s self image | do-goals – determine the plans and actions to be performed for an activity | motor-goals – specifies just how the actions are performed | . | design for goals, not tasks . | waterfall method of design – linear, progress in single direction, and once decisions have been made it is difficult to go back | contrast this with more iterative method, where decisions are deferred, time to experiment | . The goal is to have best of both worlds: iterative experimentation to refine the problem and the solution, coupled with management reviews at the gates […] The trick is to delay precise specifications of the product requirements until some iterative testing with rapidly deployed prototypes has been done. (235) . | implicit knowledge - knowledge that only exists in the heads of workers | Norman’s Law of Product Development - The day a product development process starts, it is behind schedule and above budget. | inclusive/universal design - designing for people with special needs | . [C]omplexity is essential: it is confusion that is undesirable. I distinguished between “complexity”, which we need to match the activities we take part in, and “complicated”, which I defined to mean confusion. (247) . Standardization provides a major breakthrough in usability. (248) . ",
    "url": "/notes/educational_books/the-design-of-everyday-things#6-design-thinking",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things#6-design-thinking"
  },"770": {
    "doc": "The Design of Everyday Things",
    "title": "7: Design in the World of Business",
    "content": "Chapter Summary . The previous six chapters are theory, this chapter discusses what the actual market forces that dictate the development of product look like. Leans strongly on two examples: videophones, which were conceived in 1897 but still haven’t been realized, and the typewriter and how it settled on the QWERTY keyboard. The realities of market forces mean that most of your product development takes years, will already be behind schedule, and might build off radical innovation but really represents incremental innovation. Stigler’s Law - the names of famous people often get attached to ideas even though they had nothing to do with them . Innovation . two types of innovation: . | radical – changes lives and industries, takes years, decades, or even centuries, hard to predict (black swan) | incremental – makes things better on a small scale, iterative . | we need both types | . | . Design is successful only if the final product is successful – if people buy it, use it, and enjoy it, thus spreading the word. A design that people do not purchase is a failed design, no matter how great the design team might consider it. (293) . ",
    "url": "/notes/educational_books/the-design-of-everyday-things#7-design-in-the-world-of-business",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things#7-design-in-the-world-of-business"
  },"771": {
    "doc": "The Design of Everyday Things",
    "title": "Two Key Takeaways",
    "content": ". | In order to design good products, we need to think about the ways people interact with those products, through affordances, signifiers, constraints, mappings, feedback, and conceptual models. Signifiers are the most important component of good design because they signal what you can or can’t do with a product, what capabilities a product affords based on who is using that product. | We need our design to be human-centered, to not assume a happy path, to meet the needs and capabilities of those who use it rather than the other way around. Great design produces pleasurable experiences, experiences that delight, and the key to this is putting the human in the center of your design rather than building in the abstract. | . ",
    "url": "/notes/educational_books/the-design-of-everyday-things#two-key-takeaways",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things#two-key-takeaways"
  },"772": {
    "doc": "The Design of Everyday Things",
    "title": "Thoughts",
    "content": "Rating: 9/10 I think over time, this rating might drift up to a 10. This book has lent me a vocabulary to wield in the battle to build usable systems. It is no exaggeration to say that thinking about usability in the way Norman posits has been the difference between success and failure for systems and processes I’ve built. This book is canon for user-centered design and for anyone who designs anything to be used by humans. ",
    "url": "/notes/educational_books/the-design-of-everyday-things#thoughts",
    
    "relUrl": "/notes/educational_books/the-design-of-everyday-things#thoughts"
  },"773": {
    "doc": "The Fifth Beatle",
    "title": "The Fifth Beatle",
    "content": "Vivek Tiwary, Andrew Robinson (Illustratoins) 2012 . ",
    "url": "/notes/other_books/the-fifth-beatle",
    
    "relUrl": "/notes/other_books/the-fifth-beatle"
  },"774": {
    "doc": "The Fifth Beatle",
    "title": "Summary",
    "content": "A graphic novel depicting the story of Brian Epstein’s role in managing The Beatles. Begins with Epstein (pronounced ep-stine, as the novel attests) discovering The Beatles and quickly becoming their manager. The band will be bigger than Elvis, Epstein says to anyone who will listen. Epstein encourages the group to abandon their scruffy duds and adopt a clean-cut look, perhaps creating the model for the many boy bands to come in the next 50 years. Epstein then convinces George Martin of EMI to sign the band to a label. The story follows the band all the way up to 1967 and Epstein’s death of accidental overdose. ",
    "url": "/notes/other_books/the-fifth-beatle#summary",
    
    "relUrl": "/notes/other_books/the-fifth-beatle#summary"
  },"775": {
    "doc": "The Fifth Beatle",
    "title": "Thoughts",
    "content": "After the release of the new Beatles archive footage from their Get Back sessions, I had found myself with a case of Beatlesmania. I had started this graphic novel a few years back but for whatever reason, never finished it, so now was as good a time as any. The story begins with The Beatles already dominating the Liverpool club scene and Brian Epstein (pronounced ep-stine!), born into a family of successful retailers managing a string of music shops. Epstein first hears The Beatles at the Cavern Club in Liverpool and becomes immediately insistent, despite no prior management experience, that he will manage the band to a stardom bigger than Elvis. The boys, showcasing their characteristic happy-go-lucky amenability, go right along, even going so far as to ditch the scruffy duds in favor of suits and neat hairdos. After getting laughed out of nearly every record company in England, Epstein finally convinces George Martin at EMI to sign the new act. The rest, as they say, is history. Fortunately, the novel doesn’t leave it to history to tell the story, continuing right along to the Beatles first record, subsequent tours, assertions of greater importance than religious figures, subsequent cessation of tours, and eventually, Epstein’s death due to accidental overdose in 1967, followed shortly thereafter by the band’s breakup. The story is well told by Tiwary, and Robinson’s pencil work is stellar, adopting exceptionally realistic facial depictions. A large part of the story is Epstein’s homosexuality, and how his life and love made him a criminal under the same law that put Oscar Wilde into prison. Tiwary’s script implies that the various depressants and stimulants Epstein took were in part to counteract this “carnal” impulses and were directly responsible for his death, which makes for taut narrative but perhaps less faithful reporting. Speaking of invention, while most of the story is based on or directly informed by facts (there is an absolutely bizarre scene where Ed Sullivan negotiates an appearance of the band on his show using a puppet, which the author’s postscript assures us happened), there is some artistic license, primarily in the character of Moxie, Epstein’s assistant. Epstein’s real life assistant was James Alistair Taylor, so we are left to wonder authorial intent for authorial license. Is Moxie some sort of angel for Epstein, to guide him in love and success? Or something else? . All said, the book is a well realized depiction of The Beatles and their rise, and Epstein’s role in that. Supremely impressive the impact Epstein had on the world despite only spending 32 years here. ",
    "url": "/notes/other_books/the-fifth-beatle#thoughts",
    
    "relUrl": "/notes/other_books/the-fifth-beatle#thoughts"
  },"776": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "content": ". | The Fifth Discipline: The Art &amp; Practice of The Learning Organization | Chapter 1 | Chapter 2 - Learning Disabilities . | Learning Disabilities of Organizations | . | Chapter 3 - The Beer Game | Chapter 4 - Laws of the Fifth Discipline . | Laws of the Fifth Discipline | . | Chapter 5 - Shift of Mind | Chapter 6 - System Patterns . | Limits to Growth | Shifting the Burden | . | Chapter 7 - Self-Limiting or Self-Sustaining Growth . | Limit Growth through Underinvestment | . | Chapter 8 - Personal Mastery . | Personal Mastery . | Discipline of Personal Mastery | . | . | Chapter 9 - Mental Models . | Tools of the Discipline of Mental Models | . | Chapter 10 - Shared Vision . | possible attitudes toward a vision | . | Chapter 11 - Team Learning . | Defensive Routines | . | Chapter 12: Foundations . | Participative Openness and Reflective Openness | . | Chapter 13: Impetus | Chapter 14: Strategies | Chapter 15: The Leader’s New Work | Chapter 16: Systems Citizens | Chapter 17: Frontiers | Learning Discplines . | Systems Thinking . | Essences | Principles | Practices | . | Personal Mastery . | Essences | Principles | Practices | . | Mental Models . | Essences | Principles | Practices | . | Shared Vision . | Essences | Principles | Practices | . | . | . ",
    "url": "/notes/business_books/the-fifth-discipline",
    
    "relUrl": "/notes/business_books/the-fifth-discipline"
  },"777": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 1",
    "content": "The tools and ideas presented in this book are for destroying the illusion that the world is created of separate, unrelated forces. (3) . The organizations that will truly excel in the future will be the organizations that discover how to tap people’s commitment and capacity to learn at all levels in an organization. (4) . | work has shifted from material to intrinsic value and thus we view work as a social institution | Five Disciplines: . | systems thinking - everything that happens is likely part of a system – “we tend to focus on snapshots of isolated parts of the system, and wonder why our deepest problems never seem to get solved.” (8) | personal mastery - “the discipline of continually clarifying and deepening our personal vision, of focusing our energies, of developing patience, and of seeing reality objectively.” | mental models - the pictures or heuristics we use to understand the world – “deeply ingrained assumptions, generalizations, or even pictures or images that influence how we understand the world and how we take action” | shared vision - building a vision of the shared future we create | team learning - teams can be more than the sum of their parts by learning – “When teams are truly learning, not only are they producing extraordinary results but the individual members are growing more rapidly than could have occurred otherwise.” | . | the fifth discipline is systems thinking – all other disciplines are fed by it | metanoia - shift of mind, which underpins how we view “real” learning, as opposed to the common view of learning, which is taking in info | business gives you freedom to experiment and since earnings present an objective and quantifiable result, you can ostensibly test your experiments | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-1",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-1"
  },"778": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 2 - Learning Disabilities",
    "content": " ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-2---learning-disabilities",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-2---learning-disabilities"
  },"779": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Learning Disabilities of Organizations",
    "content": ". | I am my position | . | when you see your identity as your role, your view of responsibilities ends at your position | . | The enemy is out there | . | an offshoot of I am my position – you always perceive fault as outside one’s own context/boundaries | . | The illusion of taking charge | . | often proactiveness is reactiveness in disguise, especially if it is other-directed (reacting to market, customer complaint, etc.) | true proactiveness is inward-directed (how do we create our own problems) | . | Fixation on events | . | we are conditioned to view everything as a series of events, each with a single cause, but change is a slow process and the causes are often cyclical | . | The parable of the boiled frog | . | we tend not to notice slow, gradual change | “Learning to see slow, gradual processes requires slowing down our frenetic pace and paying attention to the subtle as well as the dramatic.” (25) | . | The delusion of learning from experience | . | ” we learn best from experience but we never directly experience the consequences of many of our most important decisions.” (25) | . | The myth of the management team | . | Management team is adapt at avoiding real learning or accountability, “skilled incompetence” as Argyris calls it | . ",
    "url": "/notes/business_books/the-fifth-discipline#learning-disabilities-of-organizations",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#learning-disabilities-of-organizations"
  },"780": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 3 - The Beer Game",
    "content": ". | the beer game can be played to demonstrate how a lack of systems thinking can lead to disastrous results | . setup: . | you have a retailer, wholesaler, and brewery, and they don’t talk to each other. Customer demand increases on the retailer, and this causes ballooning and cascading demand to cripple the entire supply chain as retailer overreacts to shipment delays, and on down | . 3 important lessons to the beer game: . | Structure influence behavior | . | when different people are placed in the same system, they tend to produce the same results | the system causes its own behavior | . | Structure in human systems is subtle | . | we often have the power to alter the structure of the system we are operating in | need someone to blame when there are problems, first one another, then the customer, then the system itself | . | Leverage often comes from new ways of thinking | . | need to understand how your position fits within the system | in order to succeed, others must succeed | . Types of Explanations . | Systemic Structure (generative) | . | structure produces behavior, so changing structure changes behavior | “redesigning our own decision making redesigns the system structure.” (53) | . | Patterns of Behavior (responsive) | . | seeing long-term trends and focusing on their implications | . | Events (reactive) | . | simple cause and effect | easiest to do but least beneficial | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-3---the-beer-game",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-3---the-beer-game"
  },"781": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 4 - Laws of the Fifth Discipline",
    "content": " ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-4---laws-of-the-fifth-discipline",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-4---laws-of-the-fifth-discipline"
  },"782": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Laws of the Fifth Discipline",
    "content": ". | Today’s problems come from yesterday’s solutions | . | solutions that merely shift problem to another part of the system go undetected | . | The harder you push, the harder the system pushes back | . | lay of compensating feedback | . | behavior grows better before it grows worse | . | the dominoes will eventually fall | . | The easy way usually leads back in | . | “Pushing harder and harder on familiar solutions, while fundamental problems persist or worsen, is a reliable indicator of nonsystemic thinking—what we often call the “what we need here is a bigger hammer” syndrome.” (61) | . | The cure can be worse than the disease | . | shifting the burden to the intervenor | . | Faster is slower | Cause and effect are not closely related in time and space | small changes can lead to big results, but areas of highest leverage are often the least obvious | . | “small, well-focused actions can sometimes produce significant, enduring improvements, if they’re in the right place. Systems thinkers refer to this principle as “leverage.” (64) | . | You can have your cake and eat it too, but not at once | . | problems might be improperly stated as “either-or” but both can be improved over the long-term | . | Dividing an elephant in half does not produce two elephants | . | often the whole needs to be examined instead of component parts | . | There is no blame | . | everything is part of the same system, there is no “other” | . ",
    "url": "/notes/business_books/the-fifth-discipline#laws-of-the-fifth-discipline",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#laws-of-the-fifth-discipline"
  },"783": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 5 - Shift of Mind",
    "content": ". | systems thinking is the discipline for seeing the structures that underlie complex situations and for discerning high from low leverage | . 2 types of complexity . | detail complexity: lots of variables | dynamic complexity: effects over time of intervention are not obvious | . | essence of systems thinking is a shift of mind (metanoia) . | seeing interrelationships, not linear cause and effect | seeing processes of change instead of snapshots | . | English language, in subject-verb-object construction, is biased towards cause and effect thinking, but in a system every influence is both a cause and effect | need to think in circles, understanding feedback and how it “builds to learning to recognize types of “structures” that recur again and again” (73) | human actor is not separate from the feedback process but part of it | delays are interruptions in time between two influences corresponding | . 2 types of feedback processes . | reinforcing (amplifying) | . | engines of growth or decline | vicious or virtuous cycles | . | balancing (stabilizing) | . | operates where there is goal-oriented behavior seeking stability | to understand you must know both the explicit as well as the implicit goals | more difficult to see because nothing might appear to be happening, maintains the status quo | resistance to change almost always arises from threats to traditional norms and ways of doing things | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-5---shift-of-mind",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-5---shift-of-mind"
  },"784": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 6 - System Patterns",
    "content": ". | patterns of structures recur again and again | not enough to just recognize these structures, we must change the underlying thinking that produces the problem | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-6---system-patterns",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-6---system-patterns"
  },"785": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Limits to Growth",
    "content": ". | an amplifying process that leads to an inadvertent second loop that limits growth | need to address balancing loop, not reinforcing loop | very often a cultural change | KEY: don’t push growth, remove factors limiting growth | . | EXAMPLES: new sales increase revenue, but increase the need for more senior engineers to manage and thus reducing the senior engineer pool to deliver on products, leading to delays in product delivery and reduced sales | . ",
    "url": "/notes/business_books/the-fifth-discipline#limits-to-growth",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#limits-to-growth"
  },"786": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Shifting the Burden",
    "content": ". | an underlying problem creates symptoms that demand attention, but the underlying problem is hard to address, so a solution that handles the symptoms is implemented, leaving the underlying problem to fester and grow | a special case of shifting the burden is Eroding Goals . | whenever there is a gap between performance and goals, two pressures exists -&gt; 1) improve the situation 2) lower goals | need to strengthen fundamental (ideal) response (first, identify it!), and also weaken symptomatic response | . | strengthening fundamental response requires long-term orientation and shared vision | weakening the symptomatic response requires willingness to tell the truth about palliatives and “looking good” solutions | KEY: Beware the symptomatic solution. In the short term it feels good to address symptoms. In the long-term, these symptoms will recur, making a symptomatic solution easier. | . | EXAMPLE - alcohol to treat stress | . ",
    "url": "/notes/business_books/the-fifth-discipline#shifting-the-burden",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#shifting-the-burden"
  },"787": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 7 - Self-Limiting or Self-Sustaining Growth",
    "content": ". | intuition of many experienced managers that it is vital to hold critical performance goals through thick and thin, and those standards are most important that matter to the customer | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-7---self-limiting-or-self-sustaining-growth",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-7---self-limiting-or-self-sustaining-growth"
  },"788": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Limit Growth through Underinvestment",
    "content": ". | build less capacity than is needed to serve customer demand | hard to see because it is gradual and managers prioritize other problems | systems thinking is important to organize detail complexity into a coherent story, what is important vs. what is not | . ",
    "url": "/notes/business_books/the-fifth-discipline#limit-growth-through-underinvestment",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#limit-growth-through-underinvestment"
  },"789": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 8 - Personal Mastery",
    "content": ". | organizations learn only through individuals that learn | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-8---personal-mastery",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-8---personal-mastery"
  },"790": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Personal Mastery",
    "content": ". | discipline of growth and learning two underlying movements | . | clarifying what is important to us | continually learning how to see the current reality more clearly | . | creative tension between what we want and where we are relative to what we want, and this drives learning | learning doesn’t mean acquiring info, but ability to produce results we truly want in life | continual learning mode – never arrive | “People with a high level of personal mastery are acutely aware of their ignorance, their incompetence, their growth areas. And they are deeply self-confident.” (133) | resistance to learning might come from . | those who think the idea is “soft” or unquantifiable | cynics – those who mistook ideals for expectations, i.e., frustrated idealists | . | . Discipline of Personal Mastery . personal vision . | “The ability to focus on ultimate intrinsic desires, not only on secondary goals, is a cornerstone of personal mastery.” (137) | sometimes expressed as “genuine caring” | “But vision is different from purpose. Purpose is similar to a direction, a general heading. Vision is a specific destination, a picture of a desired future. Purpose is abstract. Vision is concrete. Purpose is “advancing man’s capability to explore the heavens.” Vision is ‘a man on the moon by the end of the 1960s.’ Purpose is ‘being the best I can be,’ ‘excellence.’ Vision is breaking four minutes in the mile.” (138) | . creative tension . | gap between vision and current reality | not to be confused with being in a state of anxiety, which is emotional tension | it is not what vision is, it’s what it does, how it leads to growth | “Failure is, simply, a shortfall, evidence of the gap between vision and current reality. Failure is an opportunity for learning” (143) | . structural conflict . | most of us hold one of two contradictory beliefs | . | our powerlessness to bring our world into being | our unworthiness of the endeavor | . | this leads to 3 coping strategies | . | letting vision erode | conflict manipulation - creating a conflict to incite additional effort | will power - bulldoze through by sheer will | . | one way to overcome structural conflict is to tell the truth, “to root out the ways we limit or deceive ourselves from seeing what is, and to continually challenge our theories of why things are the way they are” (148) | . using the subconscious . | use the automatic mind to achieve vision | focus on the desired result itself by asking “what would it get me?” | “what matters most is the visible behavior of people in leadership positions in sharing their own personal visions and demonstrating their commitment to the truth.” (155) | . systems perspective illuminates personal mastery by . | integrating reason and intuition – giving managers who rely on intuition a language to express that intuition reasonably | connectedness to the world - “to continually expand our awareness and understanding, to see more and more of the interdependencies between actions and our reality, to see more and more of our connectedness to the world around us.” (160) | compassion and empathy | commitment to the whole - “work relentlessly to foster a climate in which the principles of personal mastery are practiced in daily life” (162) | . ",
    "url": "/notes/business_books/the-fifth-discipline#personal-mastery",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#personal-mastery"
  },"791": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 9 - Mental Models",
    "content": ". | mental modesl are active – they shape how we act | they are the images, assumptions, and stories we carry in our heads, and they affect what we see | all models are simplifications, the problems arise when they become implicit – when we are unaware of them, they impede learning | . 3 facts to developing an organizations ability to surface and test mental models . | tools - that promote personal awareness and reflective skills | infrastructure - that try to institutionalize regular practice with mental models | culture that promotes inquiry and challenging our thinking | . 2 important values for overcoming the toxic hierarchical thinking . | openness (honesty) | merit (making the decision that is best for the organization) | . | also important are skills of reflection and skills of inquiry: “Skills of reflection concern slowing down our own thinking processes so that we can become more/aware of how we form our mental models and the ways they influence our actions. Inquiry skills concern how we operate in face-to-face (interactions with others, especially in dealing with complex and conflictual issues.” (175) | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-9---mental-models",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-9---mental-models"
  },"792": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Tools of the Discipline of Mental Models",
    "content": "reflective practice . | bringing key assumptions about important business issues to the surface espoused theory vs theory-in-use | using gaps between what we say and what we do to become more aware leads of abstraction | leap to generalizations/assumptions too quickly to allow learning | bad because those leaps become axiomatic | until we are aware of leaps in abstraction we aren’t aware of need for inquiry left-hand column | right-hand side, write an exchange, and on the left, write what you were thinking but not saying | brings hidden assumptions forward balancing inquiry and advocacy | aka reciprocal inquiry | everyone makes thinking explicit and subject to public examination | . When advocating your view: . | Make your own reasoning explicit (i.e., say how you arrived at your view and the “data” upon which it is based) | Encourage others to explore your view (e.g., “Do you see gaps in my reasoning?”) | Encourage others to provide different views (i.e., “Do you have either different data or different conclusions, or both?”) | Actively inquire into others’ views that differ from your own (i.e., “What are your views?” “How did you arrive at your view?” “Are you taking into account data that are different from what I have considered?”) | . When inquiring into others’ views: . | If you are making assumptions about others’ views, state your assumptions clearly and acknowledge that they are assumptions | State the “data” upon which your assumptions are based | Don’t bother asking questions if you’re not genuinely interested in the others’ response (i.e., if you’re only trying to be polite or to show the others up) | . When you arrive at an impasse (others no longer appear to be open to inquiring into their own views): . | Ask what data or logic might change their views. | Ask if there is any way you might together design an experiment (or some other inquiry) that might provide new information | . When you or others are hesitant to express your views or to experiment with alternative ideas: . | Encourage them (or you) to think out loud about what might be making it difficult (i.e., “What is it about this situation, and about me or others, that is making open exchange difficult?”) | If there is mutual desire to do so, design with others ways of overcoming these barriers | . ",
    "url": "/notes/business_books/the-fifth-discipline#tools-of-the-discipline-of-mental-models",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#tools-of-the-discipline-of-mental-models"
  },"793": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 10 - Shared Vision",
    "content": ". | shared vision is not an idea (although might be inspired by one) but a force of impressive power in people’s hearts | answers the question “what do we want to create” | shared vision provides the focus and energy for learning | can be extrinsic (outward focused) or intrinsic, with intrinsic shared vision often more effective | their company becomes our company, people work together and share a common identity | “Without a pull toward some goal which people truly want to achieve, the forces in support of the status quo can be overwhelming.” (195) | without a shared vision, it might be impossible to convince humans to take the long view | shared visions emerge from personal visions | you can’t compel people to your vision – if you try and force it you will only get compliance and not commitment | . need to give up the notion that shared vision needs to be created from on high, which is bad for 3 reasons: . | that vision is sinlge effort at providing overarching direction and meaning to the firm’s strategy | that vision does not build on personal vision | that vision is not a solution to a problem | . possible attitudes toward a vision . | Apathy - Neither for nor against vision. No interest. No energy. “Is it five o’clock yet?” | Non-Compliance - Does not see benefits of vision and will not do what’s expected. “I won’t do it; you can’t make me.” | Grudging Compliance - Does not see the benefits of the vision. But, also, does not want to lose job. Does enough of what’s expected because he has to, but also lets it be known that he is not really on board. | Formal Compliance - *On the whole, sees the benefits of the vi sion. Does what’s expected and no more. “Pretty good soldier.” * | Genuine Compliance - Sees the benefits of the vision. Does everything expected and more. Follows the “letter of the law.” “Good soldiers.” | Enrollment - Wants it. Will do whatever can be done within the “spirit of the law.” | Commitment - Wants it. Will make it happen. Creates whatever “laws” (structures) are needed. | . | vision is the what, purpose is the why | core values answer how we want to act | “There are two fundamental sources of energy that can motivate organizations: fear and aspiration. The power of fear underlies negative visions. The power of aspiration drives positive visions.” (209) | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-10---shared-vision",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-10---shared-vision"
  },"794": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 11 - Team Learning",
    "content": ". | goal of a team is “alignment”, or when a group of people function as a whole | “The fundamental characteristic of the relatively unaligned team is wasted energy […] There is a commonality of purpose, a shared vision, and understanding of how to complement one another’s efforts.” (217) | “Team learning is the process of aligning and developing the capacity of a team to create the results its members truly desire” (218) | . Team learning has three critical dimensions . | a need to think insightfully about complex issues | a need for innovative, coordinated action | the role of team members on other teams, i.e., a learning team continually fosters other learning teams through inculcating practices and skills of team learning more broadly | . | need to master the practices of dialog and discussion two primary types of discourse dialogue | a free and creative exploration of complex issues | deep listening | suspending one’s own views | “the purpose of dialog is to reveal the incoherence in our thought” discussion | different views are presented and defended | search for the best view to support decisions that must be made | . three basic conditions necessary for dialogue . | suspend assumptions . | must be aware of our assumptions and hold them up for examination | this is similar to “leaps of abstraction” and “inquiring into reason for abstraction” with mental models | . | regard one another as colleagues . | necessary for a willingness to treat others as colleagues | hierarchy is antithetical to dialog, so individuals must want the benefits of dialogue more than the privileges of rank | . | a facilitator must hold the context of the conversation . | moves the conversation along and resists the urge for dialogue to become discussion (pushing for decisions) | also capable of framing counter views and participating in the dialogue | . | . | discipline of team learning requires practice, and a continual movement between practice and performance | thought is participative, and collectively we can be more insightful and intelligent than we can be individually | a reliable indicator a team is learning is visible conflict of ideas | difference between great and mediocre teams is how they face conflict and deal with defensiveness that arises | . Defensive Routines . | entrenched habits we use to protect ourselves from embarrassment and threat that occurs when we expose our thinking | response to a problem, and obscure their own existence | the most effective defensive routines are those we cannot see | managers internalize an idea that they must know what’s going on, which leads to two problems: . | close themselves to alternative realities and make themselves uninfluenceable | maintain air of confidence by obscuring ignorance | . | leverage in reducing them, like all shifting the burden structures, lies in: . | weakening symptomatic solution | strengthening fundamental solution | . | need to confront defensiveness without producing more defensiveness, and we need a ruthless commitment to telling the truth about our current reality | the stronger the defensiveness the more important the issue . | an essential principle of practice is experimentation in a “virtual world” | dialogue sessions allow a team to come together and practice, basic conditions are: . | having all members of team together | explaining the ground rules of dialogue | enforcing those ground rules, and if anyone is unable to suspend assumptions, you acknowledge you are discussing and not dialoguing | encouraging team members to raise the most difficult issues | . | “Perhaps the single greatest liability of management teams is that they confront these complex, dynamic realities with a language designed for simple, static problems” (249) | find and fix mentality leads to a stream of short term fixes | need a better language for describing complexity beyond linear cause and effect – systems thinking is that language | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-11---team-learning",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-11---team-learning"
  },"795": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 12: Foundations",
    "content": " ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-12-foundations",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-12-foundations"
  },"796": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Participative Openness and Reflective Openness",
    "content": ". | participative (expressive) openness is about sharing your own views, and while it is important, it is incomplete | can be a type of communication that blocks learning | on the other hand is reflective openness, or thinking about you how think and work and taking accountability for your learning | reflective openness is the cornerstone of mental models and requires vulnerability and a willingness to be open . | in order to grow a company, you need a purpose beyond just growing revenue – growing revenue is like oxygen for a company, or table stakes | need to have projects worthy of your commitment | commitment to personal growth starts with you | we need to see the business as a living system, as a community of humans, and not as a machine | this involves a shift from focusing on: . | parts to the whole | categorization to integration | individuals to interactions | systems outside the observer to systems including the observer | . | . ",
    "url": "/notes/business_books/the-fifth-discipline#participative-openness-and-reflective-openness",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#participative-openness-and-reflective-openness"
  },"797": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 13: Impetus",
    "content": "three motivations for people to take on work of building a learning organization . | seek a better model for how to manage and lead change | build an organizations overall capacity for continual adaptation to change | there is a way of managing and organizing work | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-13-impetus",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-13-impetus"
  },"798": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 14: Strategies",
    "content": "learning has two levels: . | learning is judged by what the learner can do, the results they produce | learning is about developing a capacity to reliably produce certain quality of results . | not just about riding a bike one time, but being a bike rider | . | . Deep Learning Cycle . | beliefs and assumptions | established practices | skills and capabilities | networks of relationships | awareness and sensibilities . | these five cultural elements influence one another | . | . Strategic Architecture . | guiding ideas, or, the governing concepts and principles that define why an organization exists, what we seek to accomplish, how we intend to operate | theory, tools, and methods, or, explicit ideas about how things work and the practical means by which people apply those theories, solve problems, negotiate differences, and monitor progress | organizational infrastructure, or, formal roles and management structures that shape how energy and resources flow | . Theory of Structuration . | theory of “enacted systems” two predominant ideas: . | structure influences behavior, and leverage for change increases as we learn to focus on underlying structures rather than events or behavior | structures that govern social systems arise from cumulative effects of the actions taken by the participants in those systems | . | . | Integrating Learning and Working . | fragmentation, or making learning an ‘add-on’ to people’s regular work, limits how we can integrate learning and working | need to tie reflection to action so learning isn’t fragmented | reflection doesn’t mean agreement on everything but rather that we hear everything – we can disagree and commit | a culture that integrates action and reflection arrives at better decisions to which people can generally commit to | . After Action Review . | used by US Army to reflect | simplest form involves answering three questions: . | what happened? | what did we expect? | what can we learn from the gap | . | another question we can ask is: “If you could improve performance in one area that would make a significant different for the enterprise, what would that be?” | in order to be successful, you need 1) leadership by request and example, 2) events as learning opportunities 3) grassroots exposure to AARs 4) a cadre of trained facilitators | . | Starting Wherever You are with Whoever is There . | the idea that only top managers can drive change is false | you can concentrate on the “impossibles”, or the problems people believe can’t be solved | this can only happen when you can tape people’s talents and deepest aspirations | . | Becoming Bicultural . | becoming bicultural, or never losing touch with the larger organizational environment | need to consider the greater environment | fundamental innovations that produce significant leaps in performance are threatening to teams producing closer to the norm | need to become adroit at working with political forces within an organization so as not to run afoul of corporate immune system | one strategy is to keep innovations below the radar of senior leadership by underpromising and overdelivering | . | Creating Practice Fields . | it is very difficult to learn anything without opportunity for practice | setting up practice fields for learning | . | Connecting with the Core of the Business . | successful learning practitioners intent upon having a large-scale impact learn how to connect with the core of an organization – at the deepest levels of individual and collective identity – and how the organization most naturally creates value | change leaders limit themselves with two subtle barriers . | they do not go deeply enough into themselves to discover what motivates themselves | they do not go deeply enough in the org to discover what it stands for | . | . | Building Learning Communities . | when our own aspirations connect with an organization’s essence, community develops | . | Working with the Other . | embracing diversity in order to resist surrounding oneself with those who think like you | partnering with those who are different | the importance of building diverse and inclusive communities will grow in an increasingly networked world | . | Developing Learning Infrastructures . | when we redefine management roles to support reflection or systems thinking, we create learning infrastructures | learning infrastructures do not leave learning to chance | . | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-14-strategies",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-14-strategies"
  },"799": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 15: The Leader’s New Work",
    "content": "what do we mean by leader? . | typically, leader refers to positional authority via title, a synonym for top management | this creates two problems: . | it declares all others are not leaders and have little power to effect change | it fails to understand the diverse roles of leaders at many levels | . | . local line leaders . | vital for integrating innovative practices into daily work, and testing the efficacy of systems thinking tools | . network leaders . | helpers, seed carriers, and connectors | carry ideas from one working group to another | . executive leaders . | shape the overall environment for innovation and chance | must take responsibility for existence of credible and uplifting guiding ideas in the org | . Leader as Designer . | leaders who appreciate orgs as living systems realize it isn’t enough to create organizational artifacts like new metrics or formal roles and processes – it’s how they are used that matters | what it means to be a designer of learning infrastructures: . | recognize an important need for communication and learning isn’t being met | have the courage and imagination to break the mold | . | need to design guiding ideas that aren’t BS – a useful question to separate guiding and governing ideas from regular ideas is “How did our vision and value influence decisions I made today?” | . Leader as Teacher . | a great teacher is someone around whom others learn, someone who creates a great environment for learning | desire to serve (“servant leadership”) as core motivation for great leaders | leaders work as teachers starts by recognizing a core capacity isn’t being met | how can leaders help people to see reality as a medium for creating their vision rather than as a limitation . | one way is to help people see reality in terms of underlying structures and mental models rather than short-term events | . | to be a true teacher you must be a learner first | . Leader as Steward . | leaders who serve | stewardship is also about serving a larger purpose there are two paradoxes of stewardship: . | certainty and commitment - too much certainty leads to being closed off – genuine commitment always coexists with some element of uncertainty and questioning | conservation and change – just as important to what leaders would change is what they would conserve (often identity and relationships) – obssessively focusing on what we would change reinforces fears of change | . | leaders don’t always need to be singularly focused on ambition – sometimes having a larger life might help managers gain perspective and be more effective | managers also need to create sustainable results – if they are only focused on short term results, it justifies intervention – the whole point is to try and improve so no more intervention is needed . | what distinguishes good leaders is the “clarity and persuasiveness of their ideas, the depth of their commitment, and the extent of their openness to continually learning more” (339) | “truly effective leaders come to a shared appreciation of the power of holding a vision and concurrently looking deeply and honestly at current reality” (340) | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-15-the-leaders-new-work",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-15-the-leaders-new-work"
  },"800": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 16: Systems Citizens",
    "content": "there are fundamental aspects to seeing systems: . | seeing patterns of interdependency | seeing into the future | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-16-systems-citizens",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-16-systems-citizens"
  },"801": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Chapter 17: Frontiers",
    "content": ". | learning is a process of enhancing learner’s capacity, individually and collectively, to produce results they truly want to produce | this emphasizes two features of learning: . | building capacity for effective action as opposed to intellectual understanding only | this capacity builds over time, often over considerable time | . | . three openings when leading change . | opening the head - opening ourselves to see what is in front of us but we have not been able to see yet | opening the heart - opening ourselves to see our connection to what is around us, the pain, the suffering, the problems, as well as the joy | opening the will - letting go of the last remnants of our small ‘s’ self | . ",
    "url": "/notes/business_books/the-fifth-discipline#chapter-17-frontiers",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#chapter-17-frontiers"
  },"802": {
    "doc": "The Fifth Discipline: The Art &amp; Practice of The Learning Organization",
    "title": "Learning Discplines",
    "content": ". | practices: what you do | principles: guiding ideas and insights | essences: the state of being of those with high levels of mastery in the discipline | . Systems Thinking . Essences . | holism | interconnectedness | . Principles . | structure influences behavior | policy resistance | leverage | . Practices . | system archetypes | simulation | . Personal Mastery . Essences . | being | generativeness | connectedness | . Principles . | vision | creative tension vs. emotional tension | subconscious | . Practices . | clarifying personal vision | “holding” creative tension . | focusing on the result | seeing current reality | . | . Mental Models . Essences . | love of truth | openness | . Principles . | espoused theory vs. theory-in-use | ladder of inference | balance inquiry and advocacy | . Practices . | distinguishing “data” from abstractions based on data | testing assumptions | “Left-hand” column | . Shared Vision . Essences . | commonality of purpose | partnership | . Principles . | shared vision as “hologram” | commitment vs. compliance | . Practices . | visioning process . | sharing personal visions | listening to others | allowing freedom of choice | . | acknowledging current reality | . ",
    "url": "/notes/business_books/the-fifth-discipline#learning-discplines",
    
    "relUrl": "/notes/business_books/the-fifth-discipline#learning-discplines"
  },"803": {
    "doc": "The Goldfinch",
    "title": "The Goldfinch",
    "content": " ",
    "url": "/notes/other_books/the-goldfinch",
    
    "relUrl": "/notes/other_books/the-goldfinch"
  },"804": {
    "doc": "The Goldfinch",
    "title": "Summary",
    "content": "The novel tells the story of Theodore Drecker, from around the time when his mother dies in a terrorist attack in a museum in New York. Theo survives, and in the rubble stays with an old guy until the old guy dies. The old guy gives Theo a ring and a set of instructions to bring the ring to Hobart and Blackwells, a furniture shop. Theo also steals a famous painting by Carel Fabritius, The Goldfinch, which Theo has equated with his mother. Theo lives with a well-to-do family called the Barbours and spends time with James “Hobie” Hobart after returning the ring. There he also meets a girl named Pippa who he was infatuated with at the museum and who he remains infatuated with for the entirety of the novel. Eventually, Theo’s derelict father comes to adopt him, taking him to Las Vegas with his (the father’s) new girlfriend. In Las Vegas, Theo becomes friends with a kid named Boris. They drink and do drugs and generally lack adult supervision. They come and go to school as they see fit, and Theo’s father is a drug-addicted gambler who is never around. Theo’s father, who was in massive debt to a local bookie and who is also an alcoholic, relapses and crashes his car, and dies. Theo escapes Las Vegas with his dog and heads back to New York. Theo goes to live with Hobie. All the while, Theo is carrying around his pilfered painting, and the thought of getting caught with it is consuming. He lives with Hobie for a while before going to school. Fast forward 8 years, and Theo is living with Hobie, running the shop. He is also conning lots of people, selling Hobie’s restorations as the real thing to unwitting customers. He is also doing lots of drugs. Eventually, he happens to run into Boris in New York while he is looking for drugs, and Boris tells him that he exchanged the painting when they were in Las Vegas, to Theo’s surprise. Boris promises he’ll get the painting back. Boris is some sort of international thief, a character of ill-repute but with a zest for life. Theo is engaged to marry Kitsey Barbour, sister to his friend Andy (who, along with his father died tragically in a boat accident). Kitsey is cheating on Theo, and they don’t really love each other, but have found each other in their grief. Kitsey’s marriage to Theo is her way of helping her mother, who is clearly depressed with the loss of her son and husband and views Theo as a surrogate son. Eventually, Boris locates the painting and drags Theo to Amsterdam (Theo’s Damascus, as he says – remember Saul on the road to Damascus getting struck by lightning and seeing the light of God). They locate the painting, but things go terribly wrong and then Theo shoots a guy in the head. He then holes up in his Amsterdam hostel with a flu, alternating between doing heroin and sleeping a fevered sleep. Eventually, he decides he is going to turn himself in. As he goes to open the door, he runs into Boris. Boris has called the “art cops” on the painting thieves, and then he gives Theo the reward money. Boris has a speech about life, then Theo returns home and Hobie has a speech about life, then Theo has a closing monologue, and the novel ends with Theo addressing his “non-existent” reader, to tell them that “life—whatever else it is—is short. That fate is cruel but maybe not random. That Nature (meaning Death) always wins but that doesn’t mean we have to bow and grovel to it. That maybe even if we’re not always so glad to be here, it’s our task to immerse ourselves anyway: wade straight through it, right through the cesspool, while keeping eyes and hearts open.” . ",
    "url": "/notes/other_books/the-goldfinch#summary",
    
    "relUrl": "/notes/other_books/the-goldfinch#summary"
  },"805": {
    "doc": "The Goldfinch",
    "title": "Some Themes",
    "content": "authenticity &amp; the self . Recreations of paintings compared to real paintings, but also paintings compared to the reality they depict. There is a long-ish monologue about how the goldfinch that Fabritius depicts actually must have existed, and must have been chained to a post as someone’s pet. But that existence gave way to a masterpiece, the implication being that from suffering can be born immense and immutable and timeless beauty. Hobart also restores old furniture pieces for a living, often making them better than they once were, but, now irrevocably not “authentic”. The paradox of theseus’s ship applies here. As we accrue experience and suffering and joy, replacing the parts of ourselves that those emotions irretrievably alter until nothing of our old selves remain, are we still our authentic self? Does our essence precede our existence, or are we only the sum of our experiences? . Art in general and painting in particular extends this dilemma; is a painting just a reflection of some truth or is it the truth itself? Is the goldfinch chained to a perch in some Dutch socialites sitting room the masterpiece, or does it need to be filtered through the transpositions of mediums, from the atoms arranged into biology to the pigments on a canvas? . grief and suffering . The painting of the goldfinch functions on a few levels: as a physical symbol of Theo’s grief, as a remembrance of his mother, as survivor’s guilt, as self- and outer-imposed captivity. The gravitational pull of the painting’s perceived worth is what drives the novel. And yet, so many bad decisions and bad outcomes in Theo’s life could have been avoided if he had just turned the painting in. Confusedly, the paintings ultimate return leads to the best outcome in Theo’s life, a final reckoning with the guilt of his mother’s death and his subsequent actions . drug use . Theo, and Boris, use a lot of drugs in this novel. Not really sure what Tartt was going for, but it was refreshing to for the literary eye here to not moralize the usage of drugs. So often in novels drugs convey that the user is “on a bad path” and that path nearly always ends in some sort of rock bottom, like a Chekhov’s syringe. thoughts on this book . The book is certainly immersive. The plot is relatively compelling, and there were points where I wanted to read ahead to see what might happen. And it certainly earns the Dickensian moniker. It is a mashup of Dicken’s plots and tropes. Plenty of others much smarter and well-read than I have drawn the comparisons. But it feels like fatty food. Delicious while you are eating it but unfulfilling. Because I’m not sure the book has a ton to say about it’s relatively grandiose themes. Theo’s grand summation is that life is short. This is no parable, nothing has signification. The book appears to rely on the heft of artistic tradition in its often ineffable importantness to seem to say that this book is also important, as if to say that a book about an artistic masterpiece must also be a masterpiece. ",
    "url": "/notes/other_books/the-goldfinch#some-themes",
    
    "relUrl": "/notes/other_books/the-goldfinch#some-themes"
  },"806": {
    "doc": "The Idea Factory",
    "title": "The Idea Factory",
    "content": " ",
    "url": "/notes/educational_books/the-idea-factory",
    
    "relUrl": "/notes/educational_books/the-idea-factory"
  },"807": {
    "doc": "The Idea Factory",
    "title": "Favorite Quotes",
    "content": "To innovate, Kelly would agree, an institute of creative technology required the best people, Shockleys and Shannons, for instance—and it needed a lot of them, so many, as the people at the Labs used to say (borrowing a catchphrase from nuclear physics), that departments could have a “critical mass” to foster explosive ideas. What’s more, the institute of creative technology should take it upon itself to further the education and abilities of its promising but less accomplished employees, not for reasons of altruism but because industrial science and engineering had become so complex that it now required men and women who were trained beyond the level that America’s graduate schools could attain. In 1948, Bell Labs began conducting a series of unaccredited but highly challenging graduate-level courses for employees known as the Communications Development Training Program, or CDT. But nobody at Bell Labs really called it CDT. The program was informally known—much to Kelly’s discomfort—as “Kelly College,” because that’s what it was. An institute of creative technology needed to house its critical mass close to one another so they could exchange ideas; it also needed to give them all the tools they needed. (153) . In a wide array of areas, from the transistor to fiber optics, and from switching theory to computer logic, the Bell System has been no more adequate as a conduit for Bell Labs’ scientific contributions than an eye dropper would be to channel a mountain freshet. The main users have been others—that is, non-telephone industries—with Bell Labs getting little out of its contributions other than an occasional footnote in a scientific paper. Regrettably, the language that describes innovations often fails to distinguish between an innovative consumer product and an innovation that represents a leap in human knowledge and a new foundation (or “platform,” as it is often described) for industry […] . Kelly’s philosophy is sometimes summed up as a belief that innovation occurs by the movement of ideas in one direction: first a fundamental scientific discovery, which is then developed into a product, which is then pushed into the market. The textbook example was the transistor. In truth, he believed big scientific advances could come from any engineers or scientists encountering interesting problems. Thoughts . It’s difficult to overstate the importance Bell Labs has had on instigating the digital age. Gertner’s novel veers back and forth between the “Great Man” theory of history, where things like Shannon’s seminal A Mathematical Theory of Communication could only be achieved by a singular genius, and a more yeoman, democratic view, where it just so happened to be Brattain, Shockley, and Bardeen who were first past the pole to invent the transistor. And this book is just as much about the history of Bell Labs as it is about innovation, and how that innovation catapulted America into pre-eminent superpower of the 20th century. Nearly everything important in computing was happening in America, sometimes by foreigners, but often by mechanically minded young men from rural America’s farmland. The book advances a few ideas about the best way to go about generating innovation, but most of them boil down to a few key ideas: have a ton of money, don’t bound research by immediate profitability horizons, and get the smartest and best cross-discipline people and put them in a room and give them problems to solve. But how actionable is this advice, if we are individually trying to innovate in our own professional lives? Bell Labs won’t be replicated in the future, certainly not by a private or publicly traded company. AT&amp;T had basically a government-sanctioned monopoly allowed in part because of the company’s importance to military applications. Bell Labs was a way to continue to drive that sort of military research, but also as a hand-wave to public good, a counterweight to the ruthless business tactics of it’s financing body. But we also have to ask, how necessary is this sort of innovation? Information technology was a completely fertile field in the mid-20th century, and nearly every seed planted yielded bountiful crops. There was just so much to discover, to define, to understand. While it does seem amazing that one research laboratory generated transistors, UNIX, the C programming language, lasers and masers, key advances in radar, fiber optic cables, and dozens of other fundamental advances, it is less surprising if we think about scale of Bell Labs and that the New Jersey lab was where everyone who was anyone in communications and information technology was working. So ultimately, what do you takeaway from this book, beyond Bell Labs was pretty darn impressive, won’t happen again, and innovation has become so hyper-specialized in this space? It’s hard to say, but we are sitting here in 2023 when Large Language Models (LLM) like ChatGPT and Bing AI have broken into the zeitgeist and seem poised to change everything. So perhaps innovation will be machine-assisted in the future, and you can get the benefit of a Bell Labs in a machine learning model right on your laptop. ",
    "url": "/notes/educational_books/the-idea-factory#favorite-quotes",
    
    "relUrl": "/notes/educational_books/the-idea-factory#favorite-quotes"
  },"808": {
    "doc": "The Lean Startup",
    "title": "The Lean Startup",
    "content": ". | five principles of the lean startup | vision . | learn | experiment | . | steer . | test | measure | pivot or persevere | . | accelerate . | growth | . | . ",
    "url": "/notes/business_books/the-lean-startup",
    
    "relUrl": "/notes/business_books/the-lean-startup"
  },"809": {
    "doc": "The Lean Startup",
    "title": "five principles of the lean startup",
    "content": ". | entrepreneurs are everywhere – you don’t need to work at a startup to have a startup mentality | entrepreneurship is management – the new startup mentality requires a different type of management | validated learning – startups exist to learn things and validate this learning through the scientific method | build-measure-learn – the fundamental role of a startup is to turn ideas into products, and success is about speeding up that feedback loop | innovation accounting – to improve entrepeneurial outcomes, need to find a way to measure progress, set up milestones, and prioritize work | . ",
    "url": "/notes/business_books/the-lean-startup#five-principles-of-the-lean-startup",
    
    "relUrl": "/notes/business_books/the-lean-startup#five-principles-of-the-lean-startup"
  },"810": {
    "doc": "The Lean Startup",
    "title": "vision",
    "content": "building a startup is an exercise in institution building; thus it necessarily involves management. Lean thinking is radically altering the way supply chains and production systems are run. Among the tenets are drawing on the knowledge and creativity of individual works, the shrinking of batch sizes, just-in-time product and inventory control, and an acceleration of cycle times. The goal of a startup is to figure out the right thing to build […] as quickly as possible. | Build-Measure-Learn - a feedback loop to steer product judgments – drives whether to persevere or pivot | . learn . “learning” is the oldest excuse in the book for a failure of execution. | validated learning – the process of demonstrating empirically that a team has discovered valuable truths about a startup’s present and future business prospects | Metcalfe’s Law - the value of a network as a whole is proportional to the square of the number of participants, i.e., the more people in a network, the more valuable it is | . learning is the essential unit of progress for a startup . | vanity metrics and “success theater” – the work we do to make ourselves look successful | . experiment . | the value hypothesis is whether a product or service really delivers value to customers once they are using it | the growth hypothesis tests how new customers will discover a product or service | . an experiment is more than just a theoretical inquiry; it is also the first product (63) . | try to answer four questions before jumping into product build . | Do consumers recognize that they have the problem you are trying to solve | If there was a solution, would they buy it | Would they buy it from us | Can we build a solution for that problem | . | . ",
    "url": "/notes/business_books/the-lean-startup#vision",
    
    "relUrl": "/notes/business_books/the-lean-startup#vision"
  },"811": {
    "doc": "The Lean Startup",
    "title": "steer",
    "content": ". | focus our energies on minimizing the total time through this feedback loop | genchi gembutsu - “go and see for yourself” – one of most important phrases in lean manufacturing | customer archetype - a brief document that seeks to humanize the proposed target customer and is an essential guide to for daily prioritization decisions | . test . | minimum viable product (MVP) - helps entrepreneurs start the process of learning ASAP – start of the process of learning, not end of it | wizard of oz test – customers believe they are interacting with the actual product but behind the scenes humans are doing the work | . Customers don’t care how much time something takes to build. They care only if it serves their needs. (109) . As you consider building your own minimum viable product, let this simple rule suffice: remove any feature, process, or effort that does not contribute directly to the learning you seek. (110) . measure . A startup’s job is to (1) rigorously measure where it is right now, confronting the hard truths that assessment reveals, and then (2) devise experiments to learn how to move the real numbers closer to the ideal reflected in the business plan. (114) . | innovation accounting - a way to measure progress in three steps: . | use an MVP to establish real data on where the company is right now | tune the engine from baseline toward ideal | pivot or persevere | . | cohort analysis - instead of looking at cumulative totals or gross numbers, look at the performance of customers that come into contact with the product independently | 3 As of metrics . | actionable - must demonstrate clear cause and effect, otherwise it is a vanity metric | accessible - make the reports as simple as possible so everyone understands them, widespread access | auditable - data is credible to employees | . | . pivot or persevere . [T]here is no bigger destroyer of creative potential than the misguided decision to persevere. (149) . | runway - amount of time a startup must achieve lift-off or fail - remaining cash in the bank divided by monthly expenses | can reframe runway as many pivots a startup has left | pivots take courage but are essential | a pivot is best understood as a new strategic hypothesis that will require a new MVP to test | . types of pivots . | zoom-in - single feature in a product becomes the whole product | zoom-out - whole product becomes a single feature of a much larger product | customer segment - product solve a real problem for customers, but not the originally thought of customers | customer need - you discover other related problems a customer has | platform pivot - change from an application to a platform or vice versa | business architecture - going from high margin low volume to low volume, high margin, or vice versa | value capture - changes in the way a company monetizes a product | engine of growth - three engines of growth: viral, sticky, and paid | channel - change the way you sell to customers | technology - change the way you deliver value by using a completely new tech | . ",
    "url": "/notes/business_books/the-lean-startup#steer",
    
    "relUrl": "/notes/business_books/the-lean-startup#steer"
  },"812": {
    "doc": "The Lean Startup",
    "title": "accelerate",
    "content": ". | work in small batches so quality problems can be identified much sooner | andon cord - at toyota plants, its the cord that is pulled when quality problems are discovered | . Almost every Lean Startup technique […] works its magic in two ways: by converting push methods to pull and reducing batch size. Both have the net effect of reducing WIP. (201) . growth . Where does growth come from? . | word of mouth | as a side effect of product usage | through funded advertising | through repeat purchases or use | . growth engines . | sticky engine – attract and retain customers for a long time – churn rate or attrition rate very important | viral engine – depend upon person-to-person transmission and the viral loop or viral coefficient - how many customers will use the product as a result of each new customer | paid engine - each customer pays a certain amount for product (lifetime value) over their time as customer | . | product/market fit - moment when a startup finds widespread set of customers that resonate with its product | . ",
    "url": "/notes/business_books/the-lean-startup#accelerate",
    
    "relUrl": "/notes/business_books/the-lean-startup#accelerate"
  },"813": {
    "doc": "The Lincoln Highway",
    "title": "The Lincoln Highway",
    "content": "Emmett’s father wasn’t one to lash out at his children in anger even when they deserved it. In fact, the only time Emmett could remember his father expressing unmitigated ire toward him was when he was sent home from school for defacing a textbook. As his father made painfully clear that night, to deface the pages of a book was to adopt the manner of a Visigoth. It was to strike a blow against that most sacred and noble of man’s achievements—the ability to set down his finest ideas and sentiments so that they might be shared through the ages. And that mark was likely to stay with him for the rest of his life as a helpful reminder that while the heroes in storybooks are usually figments of the imagination, most of the men who write about them are figments of the imagination too. | Billy, when looking for Professor Abernathe’s office in the Empire State Building. They eventually found him, rebuking the idea that all heroes are fictional. | . How easily we forget—we in the business of storytelling—that life was the point all along. A mother who has vanished, a father who has failed, a brother who is determined. A journey from the prairies into the city by means of a boxcar with a vagabond named Ulysses. Thence to a railroad track suspended over the city as surely as Valhalla is suspended in the clouds. And there, the boy, Ulysses, and he, having sat down by a campfire as ancient as the ways of man, began: . | In the only Abacus (Professor Abernathe) chapter, Abernathe muses on the point of storytelling. | . Every bit of evidence would suggest that the will to be moving is as old as mankind […] Any child of ten can tell you that getting-up-and-going is topic number one in the record of man’s endeavors. So, if the will to move is as old as mankind and every child can tell you so, what happens to a man like my father? What switch is flicked in the hallway of his mind that takes the God-given will for motion and transforms it into the will for staying put? . It isn’t due to a loss of vigor. For the transformation doesn’t come when men like my father are growing old and infirm. It comes when they are hale, hearty, and at the peak of their vitality. If you asked them what brought about the change, they will cloak it in the language of virtue. They will tell you that the American Dream is to settle down, raise a family, and make an honest living. They’ll speak with pride of their ties to the community through the church and the Rotary and the chamber of commerce, and all other manner of stay-puttery. But maybe, I was thinking as I was driving over the Hudson River, just maybe the will to stay put stems not from a man’s virtues but from his vices. After all, aren’t gluttony, sloth, and greed all about staying put? Don’t they amount to sitting deep in a chair where you can eat more, idle more, and want more? In a way, pride and envy are about staying put too. For just as pride is founded on what you’ve built up around you, envy is founded on what your neighbor has built across the street. A man’s home may be his castle, but the moat, it seems to me, is just as good at keeping people in as it is at keeping people out. All road novels are really about the American Dream – pursuit of it, playing out a human version of the country sprawling it’s probing fingers from sea to shiny sea. The Lincoln Highway reverses that by having the heroes go east in an effort of reclamation (Emmet his car, America it’s past, Wooly his home, Duchess his windfall, Billy an adventure, Sally a love). All the characters are united in their abandonment, how poorly they fit into their current lives like hand-me-down clothes. I think Sally summarizes it well in saying that the American Dream really isn’t about staying put, about building a castle. It’s about venturing forth once more into the breach. Not sure how we are supposed to read Duchess – he’s a dangerous character, who, when “intent on something, everyone on the periphery was at risk. Whether his intentions now were focused on avoiding Salina, or obtaining the money from the safe, or seeing to the unfinished business with his father, in the heat of the moment Duchess was perfectly capable of doing something as stupid as pulling a trigger.” Even to his dying breath, “the rest is silence”, he doesn’t know himself if he is the villain in Iago or the hero in Hamlet, or whether they both in fact are villainous. His dogged pursuit of the safe’s contents throughout the entire novel allow Emmet and Billy to have the sort of money they need to start a new life. And Emmet effectively dooms him on the boat by making him choose the 50k or his safety, which is another sort of accidental murder on Emmet’s behalf. Towles has said before that he is not actively building characters as metaphors for larger philosophical ideas. There are no John Everymans, no Willy Lomans, no Pilgrim’s Progress here. But it’s hard not to generalize each character as an aspect of America writ human, of the moralistic conscience, the hedonistic disregard of periphery, the tireless frontier sprawl, the devastating second order effects of immediate violence, the abandonment, the carnage. All characters have lost someone, and their tragedy revolves around America’s birthday of July 4th. All characters are born of that fatalistic day, their journeys starting en media res on some multiple of that day. And they all have been betrayed, either nefariously or accidentally but betrayed all the same, left to carve out their own identities in the bedrock of an uncaring and often hostile wilderness of America. ",
    "url": "/notes/other_books/the-lincoln-highway",
    
    "relUrl": "/notes/other_books/the-lincoln-highway"
  },"814": {
    "doc": "The Locked Tomb Series",
    "title": "The Locked Tomb Series",
    "content": " ",
    "url": "/notes/other_books/the-locked-tomb-series",
    
    "relUrl": "/notes/other_books/the-locked-tomb-series"
  },"815": {
    "doc": "The Locked Tomb Series",
    "title": "Gideon the Ninth",
    "content": " ",
    "url": "/notes/other_books/the-locked-tomb-series#gideon-the-ninth",
    
    "relUrl": "/notes/other_books/the-locked-tomb-series#gideon-the-ninth"
  },"816": {
    "doc": "The Locked Tomb Series",
    "title": "Why I read this book",
    "content": "The book got a ton of praise by a ton of publications, and was shortlisted for the Nebula, and won the Locus for “Best First Novel”. The second book, Harrow the Ninth is receiving similar praise, and I love a good sci-fi/fantasy trilogy/tetralogy. ",
    "url": "/notes/other_books/the-locked-tomb-series#why-i-read-this-book",
    
    "relUrl": "/notes/other_books/the-locked-tomb-series#why-i-read-this-book"
  },"817": {
    "doc": "The Locked Tomb Series",
    "title": "How was the book",
    "content": ". | You may love or hate the dialogue – Gideon talks like a millennial and the novel is set in some far off impossible place so you’d be expecting folks to be speaking that bygone-ese you hear in fantasy novels, a stilted too-formal approximation of Shakespeare rendered in prose. It’s exceptionally playful, and there was a minute in the beginning where I thought I might not want to continue on with the book as I was worried the dialogue would eventually grate or veer into an almost unintentional satire. Fortunately it was a passing feeling, and Muir has an excellent sense for story pacing and dialogue in service of the plot. There are plenty of puns and modern-day colloquialisms, if that is your sort of thing. I would call it less funny than that it doesn’t take it’s dialogue as deathly serious as other fantasy/sci-fi novels. | There is a will-they won’t they dynamic between leads Harrow, the Ninth House necromancer, and Gideon, her cavalier or sworn sword, but there is nothing overly sexual about this novel despite the lesbian lead. It’s a hallmark of how far the genre has come in a short 50 years to normalize this type of main character, to have her sexuality only be a minor facet of her character. It’s refreshing to have come so far. | There are times where I struggled with the action being depicted, lost in who was doing what. The first time I really noticed it was when Gideon was fighting a large skeletal construct at the behest of her necromancer, Harrow. I got the gist of the action and sort of made up my own pacing, as you could tell the scene would end with the construct deconstructed. The action scenes are balletic, Gideon wielding a rapier in defense while Harrow conjures, and this is difficult to depict narratively. | It really is a great example of world-building. There is so much detail under the surface of this world, and the way your understanding of it unfolded with the narrative was a real joy. Great science fiction and fantasy series are as much about their worlds as they are their characters or their plots – if the world is interesting enough, you could pace some automatons getting coffee and you’d have a compelling read. | This novel is chock-full of references to the Bible, classic literature, history, or countless other topics. Everything was chosen with purpose and double meaning. I’d recommend reading the “A Little Explanation of the Naming System” at the end before Act 2 for pronunciation help. I didn’t, and I wasn’t even close. Hermy-one, anyone? | I will certainly be reading the rest of this series, as Muir lays out enough thread to tease a very compelling tetralogy (it’s up to 4 books now with Alecto being announced as the penultimate book after Harrow the Ninth and before Nina the Ninth, which tickles me with a through-line of the Grecian furies being subtext). | Most of the novel takes place in the falling-apart Canaan House (not sure what the importance of Canaan is in the name other than as an ethnic group that crops up from time to time in the Bible), but this very much feels like a Gothic Novel trope, harkening back to Northanger Abbey or Fall of the House of Usher. It’s a cross between Clue and an escape house. | . ",
    "url": "/notes/other_books/the-locked-tomb-series#how-was-the-book",
    
    "relUrl": "/notes/other_books/the-locked-tomb-series#how-was-the-book"
  },"818": {
    "doc": "The Locked Tomb Series",
    "title": "Plot",
    "content": "Act I . Gideon Nav plans her escape from the dour Ninth House, an attempt that is quickly foiled by the Heir to the House and rival Harrowhark Nonagesimus. When Harrow’s cavalier, Ortus Nigenad, escapes on Gideon’s shuttle, Gideon is pressed into service in his place. On The Emperor’s summons, Gideon and Harrow travel to the First House and compete with the other scions of The Nine Houses System to ascend to the glorious and immortal position of Lyctor—a position Harrow desperately needs in order to revive her dying House. On the first night of the Trials, the shuttles that carried the competitors disappear, trapping them on the planet. Act II . The Lyctor Trials begin, and all of the Houses spread out to work independently. Abandoned by Harrowhark, Gideon spends much of her time training and meeting the other competitors. She begins to build friendships with the Fourth House teens, who admire her, the Fifth House cavalier, who seeks to encourage cooperation, and the Seventh House necromancer, who takes a keen and often flirtatious interest in Gideon. The Second House keeps to themselves, but is generally cordial, and, after a round of duels, she develops an animosity with the Third House cavalier. Sixth and Eighth House are rarely seen at all. It quickly becomes clear that the inter-House bonds are extraordinarily weak, and the guests treat each other with open distrust and even outright hostility. As Gideon navigates the social culture of Canaan House, Harrowhark descends into the basement to the mysterious laboratory containing tests that stretch the bounds of necromancy and attempts to reverse-engineer the secret to Lyctorhood. She marks Sixth House necromancer Palamedes Sextus as her main competition, and the two race to solve the trials before the other. When Harrowhark fails to return home one evening, Gideon teams up with Palamedes and his cavalier, Camilla Hect, to locate her and is introduced to the basement facility. Gideon and Harrowhark learn that both necromancer and cavalier are required to solve the puzzle and develop a tentative camaraderie. After a dinner party is thrown by the Fifth House, followed by a night working in the facility, the pair beat their first test and earn a key. As they are leaving, they discover the murdered bodies of Abigail Pent and Magnus Quinn. Act III . The investigation into the murders of the Fifth House reveals little about their deaths but cracks the mysteries of the First House wide open. The law-abiding Second House attempts to bring in the authorities, but are stopped by the guardians of Canaan House who insist there is no law here, only the vague instruction from the Lord. With all of the necromancer/cavalier teams aware of the facility and the elusive keys, the race to complete challenges grows ever tighter. Despite their host’s warnings of a malevolent spirit haunting the laboratory, Harrow and Gideon descend again into the facility to complete their cruelest test yet (with a little help from Dulcinea Septimus). With the completion of the last laboratory comes the realization that keys are not only limited but nearly all claimed. The atmosphere abruptly loses all semblance of cordiality with the appearance of another body and the disappearance of Seventh cavalier, Protesilaus Ebdoma. Keys come to the front yet again, and this time a round of duels and thieving accompany it. Judith Deuteros of Second House makes a power play, followed by Ianthe Tridentarius of Third. Both fail to secure new keys, and the larger group fractures into three: Fifth and Seventh, who are dead, missing, or incapacitated; Second, Third, and Eighth, who have each gone off separately to pursue keys; and Fourth, Sixth, and Ninth, who have teamed up to follow the investigations to their conclusions. As Harrow and Palamedes guard the critically ill scion of the Seventh House, Gideon and Fourth House descend into the facility to search for Protesilaus. Gideon’s group discovers a terrifying and impossible bone construct monster, and the Fourth necromancer and cavalier are slain. Act IV . Following the death of Fourth House, Gideon and Harrow have a falling out over Dulcinea. Suspecting that Gideon may have become compromised by her feelings, Harrow forbids her from seeing the Seventh and refuses to release Gideon from her service. Angry and upset, Gideon accepts an offer to take tea with Eighth House, where she learns that the childhood flu that killed a generation of Ninth children, was in reality an act of genocide. Lost, and finding more evidence against Harrow, Gideon turns to Palamedes. After an all-House meeting, Harrow explains every secret that has been kept from Gideon since birth, and the girl’s bond becomes stronger than ever. Sixth and Ninth return to the keys and laboratories, but things in Canaan House quickly collapse. Second House duels and kills the priests of Canaan House in an attempt to send an SOS, Ianthe locates the last key and pieces together the horrible mystery of Lyctorhood, Silas and Colum are killed in a battle with Ianthe, and Palamedes realizes that Dulcinea Septimus is not who she claims to be. Cytherea the First, Seventh Saint to Serve the Lord Undying reveals her true identity and her plan to lure The Emperor home and kill him. In the following battle, Gideon gives her life for Harrow to ascend to Lyctorhood and defeat Cytherea. Act V . Harrow, broken and grief-stricken, defeats Cytherea the First. Epilogue . The new Lyctors, Ianthe and Harrow, are brought on to The Emperor’s shuttle, where he asks them to join him in the war to protect a dying Empire. They agree. ",
    "url": "/notes/other_books/the-locked-tomb-series#plot",
    
    "relUrl": "/notes/other_books/the-locked-tomb-series#plot"
  },"819": {
    "doc": "The Locked Tomb Series",
    "title": "Harrow the Ninth",
    "content": " ",
    "url": "/notes/other_books/the-locked-tomb-series#harrow-the-ninth",
    
    "relUrl": "/notes/other_books/the-locked-tomb-series#harrow-the-ninth"
  },"820": {
    "doc": "The Locked Tomb Series",
    "title": "Some Book Notes",
    "content": "This book had a lot of promise – Muir spun a lot of plates. I think focus could have been a bit more honed, and some of the payoffs a bit more realized. The last 100 pages of the book are somehow more confusing than the previous 400. Stylistically, it is a departure from Gideon the Ninth – more florid prose and a virtual anatomy class lesson of bone-dense vocabulary. I liked the voice better than the previous novel since it felt like it fit the narrative. One other note, the back of the book jacket has the byline “The Necromancers are back , and they’re gayer than ever” which I think is pandering and disingenuous. The book is much more than “lesbian necromancer fiction” and sexuality plays such a minor role in the novel itself, relegated just to the marketing of the work. ",
    "url": "/notes/other_books/the-locked-tomb-series#some-book-notes",
    
    "relUrl": "/notes/other_books/the-locked-tomb-series#some-book-notes"
  },"821": {
    "doc": "The Locked Tomb Series",
    "title": "Plot",
    "content": "Prologue . The night before the Emperor’s murder, the Mithraeum, the sacred shuttle-home of God and his Lyctors, is facing the final assault of the Seventh Resurrection Beast, called Number Seven. The Emperor and Ianthe Tridentarius attempt to offer Harrowhark Nonagesimus extra protection to make up for her weakness, but she refuses them. Ianthe comes to her and speaks of letters, work, and their former cavaliers and begs her to ascend to her full strength, but Harrow dismisses her and sends her away. The battle begins in earnest, and the Emperor and his Lyctors sink into The River. Harrow is thrown back out, impaled, and dying on her own rapier. Parodos . Fourteen months earlier, Harrow appears back on Ninth House with her cavalier, Ortus Nigenad reading a summons from the Emperor calling all the heirs of the Nine Houses to come and study and ascend to the position of Lyctor. She instructs him that, though she knows he is no great swordsman, she needs him to take his rightful place as cavalier primary and accompany her to Canaan House. As Harrow and Ortus argue over the propriety of Ortus attending her, Harrow sees a hallucination of the Body in the Locked Tomb in the place of a servant. Harrow reveals to her cavalier that she needs his help to cover up the fact that she is insane. Act I . Harrow, healing from her traumatic ascent to Lyctorhood on the flagship Erebos, begins to learn the truth of responsibilities of a Lyctor: the Emperor explains that with the resurrection of the planets came the creation of the Resurrection Beasts, who now hunt him and his Lyctors and that no Lyctors may ever return home for fear of luring the Beasts. In conversation, she claims that her cavalier was Ortus, not Gideon Nav. Ianthe visits her rooms and gives Harrow letters that she does not remember writing with instructions on how to live her life after “the work.” Following an insurgent attack on Imperial warships, Harrow’s new eldest sister, Mercymorn the First, comes to collect the Emperor, Harrow, and Ianthe and return them to Mithraeum. They travel through the River, a metaphysical plane of spirit magic. At Mithraeum, they hold a funeral for Cytherea the First and Harrow meets the other original Lyctors, Augustine the First and Ortus the First. The next morning, Harrow wakes with her sword thrust into Cytherea’s corpse and no memory of getting there. Simultaneously, Harrow relives the events at Canaan House with Ortus Nigenad. She recalls their first night on First House and Teacher’s lengthy explanation of the original Lyctors, as well as his introduction of the Facility and the monster who haunts it. Called the Sleeper, the Teacher only explains that a great tragedy would befall the postulants should she awake from her coffin. Sometime after, she has a conversation with the Fifth House necromancer, Abigail Pent, in the library about the Lyctoral artifacts and their research. During this conversation, Abigail begins to notice strange abnormalities in Harrow’s spirit energy as a result of the Ninth House Genocide. Throughout these re-lived experiences, Harrow is continually accosted by characters who ask her if “this is how it happened,” as well as hallucinated notes with messages about eggs. Act II . On the Mithraeum, Harrow and Ianthe adjust to life with their new siblings. Harrow trains with Mercymorn, her reluctant and critical tutor, on killing planets in the path of the Resurrection Beast and chasing their ghosts in the River so that Number Seven cannot feed on their energies. Likewise, Ianthe trains with Augustine. Both girls suffer abnormalities that frustrate their mentors. Unlike the other Lyctors, who are protected by the automatic skill of their dead cavaliers, Harrow’s incomplete Lyctorhood leaves her defenseless while her consciousness is in the River. For Ianthe, her newly attached arm becomes useless in a fight. Along with their lessons, Harrow gathers bits of information about the original Lyctors—both in first-hand accounts from The Emperor and Augustine, as well as her own sleuthing and deduction. Her adjustment to her new life is complicated by Ortus, who has judged her a danger to the Emperor and attempts to assassinate her fourteen separate times. Additionally, she begins to see the corpse of Cytherea wandering the ship. In Canaan House, under an unending and unseasonable cold rain, the Sleeper proves to be less asleep than the necromancer and cavalier teams hoped. Judith Deuteros is the first to fall, shot with an ancient weapon while trying to solve a puzzle in the Facility. Her cavalier, Marta Dyas, follows the Sleeper back to its coffin and reports what she can about its state and weapons. She attempts to break into the coffin but finds the plex glass impenetrable. The next to be killed are Camilla Hect and Palamedes Sextus of Sixth House. At their autopsy, Fifth, Seventh, and Ninth House come together and agree to gather as many of the remaining postulants as possible to plan a coordinated attack against the Sleeper. Harrow continues to see hallucinated notes throughout and strange objects begin washing into the building with the storm. Act III . As the Mithraeum battens down for battle with Number Seven, Harrow and Ianthe’s respective issues come to a head. Harrow, no longer able to sleep as her war with Ortus reaches new heights, plans to murder her brother with a bone marrow soup. Simultaneously, Ianthe receives an ultimatum on her sword lessons and has only days to figure out how to make her replacement arm function. Harrow’s soup plot goes off disastrously, drawing God’s ire and failing to permanently kill Ortus; but she does manage to successfully amputate Ianthe’s arm and grow her a new one. After repairing her relationship with Augustine, Ianthe returns the favor by bringing their elder siblings in on the plot to end Ortus. Augustine plans a formal dinner party (and ménage à trois) to distract the Emperor and give Harrow her shot at Ortus—A shot that is stolen out from under her by the corpse of Cytherea, who stabs him and drags him into the incinerator. Seeing him helpless, Harrow makes the call to save Ortus. The Emperor is disappointed, Augustine and Mercymorn are furious with each other, and Cytherea is missing—but in thanks, Harrow receives knowledge on how to protect herself from Ortus. In Canaan House, the plans are going equally poorly. Harrow stumbles upon Silas Octakiseron murdering Coronabeth Tridentarius, quickly followed by his suicide. Confused by their brief conversation and concerned about her sanity, Harrow keeps this to herself as the postulants gather in Marta Dyas’s room to plan the battle against the Sleeper. A week later, Abigail and Magnus gently corner Harrow into admitting her concerns for her sanity. Instead of shock or pity, Abigail suggests that Harrow might instead be haunted. Act IV . As part of a mission to prepare for Number Seven, Harrow is sent to an uninhabited planet. There, she meets Camilla Hect who is traveling with Coronabeth Tridentarius and Judith Deuteros and working with the Blood of Eden. Despite believing her to be dead, Harrow presents her with the appropriate letter and learns her past-self has promised Camilla any assistance she can offer. Camilla presents Harrow with a section of Palamedes Sextus’s skull and asks her to confirm that he has successfully attached his revenant to this piece. She does and learns that he has preserved himself in a “bubble” on the banks of the River for the last eight months, anchored to bits of his skeleton. When she resurfaces with Camilla, at Palamedes’s request, Harrow remakes his jaw into a hand. Judith attempts to tell Harrow about a traitor in Mithraeum, but Coronabeth silences her before she can finish her thoughts. Camilla leaves, claiming that she and Harrow are no longer on the same side. Back at the Mithraeum, Cytherea remains missing and preparations continue. Mercymorn explains that the best way to fight Number Seven is to battle it until it is tired, and then drag it down to the lowest level of the River and cast it into the stoma, or mouth of Hell. As time ticks down, Harrow comes to accept the inevitability of her death and starts praying. As they make their final battle plans, the Emperor repeatedly encourages Harrow to spend the battle safely locked in his rooms with him. She learns that if the Emperor was to die the entire Nine Houses System would die and become a supermassive black hole, as well as of the existence of A.L., the Emperor’s late companion. On the day the Beast is expected to make contact, Ortus makes one last attempt on Harrow’s life. When asked why he is bothering to murder her so close to her inevitable death, he admits that the murder plots were not his idea. In Canaan House, the postulants prepare to battle the Sleeper. The endless rain turns to sleet and snow, and horrible organs begin to grow through the cracks of the building and filling the halls. Teacher, appearing half-mad, has only doomsday prophecies to offer, conflating the Sleeper and the Body in the Locked Tomb, and seems relieved at the prospect of his death. Epiparados . Harrow and Ianthe are in an unknown location, likely aboard the Erebos. Harrow has written twenty-four encrypted (and cursed) letters for Ianthe and herself, each labeled with a specific circumstance for opening. They have reached the end of their planning phase, and it is time to embark on “the procedure.” Harrow plans to perform brain surgery on herself—removing her ability to conceive of Gideon Nav so that she cannot be fully integrated into Harrow’s soul. Ianthe begs Harrow to explain why she is doing this, but Harrow only explains that she has chosen Ianthe because she can understand her grief. As her eyes begin to shift, she impresses Ianthe to begin and they perform the procedure. Act V . After her stabbing on the Mithraeum, Harrow slides through a series of different scenarios in the River before waking and remembering Gideon Nav. She also realizes that Ortus the First’s true name is Gideon the First and it was her procedure that had muddled her ability to know his name. Fully awake to the reality of the River, Abigail explains that she and the other revenant postulants have planned an exorcism of the invasive soul haunting her. They attempt a summoning, but the Sleeper appears with superhuman strength and abilities. The River, susceptible to the unconscious, has begun to operate on the Sleepers terms—and created a world full of powerful guns and that greatly weakens necromancy so that Harrow cannot fight back. In response, Ortus begins to recite his Noniad and Abigail manages to summon the ghost of Matthias Nonius. Changing the rules to that of a Nigenadian epic poem, Nonius succeeds where the others have failed and manages to banish the soul of the Sleeper, whose dog tags read “Awake.” According to Abigail, the Sleeper has two ties and will also need to be defeated above on Mithraeum. Before returning to the River, Matthias Nonius asks to be sent to help the Lyctors fight Number Seven and settle a debt with Gideon the First. Ortus, Protesilaus, and Marta go with him. Abigail and Magnus convince Harrow to return to her body even though it would mean the destruction of Gideon Nav souls, but after they return to the River, Dulcinea informs Harrow that whatever she left in her body is not a revenant or fragment but rather, unlike anything she’s seen before. Harrow decides to anchor herself to the Locked Tomb and give Gideon the chance to live. Aboard the Mithraeum, Gideon Nav wakes up inside Harrow’s freshly-murdered body to the Mithraeum infested with the Heralds of the Resurrection Beast. Unlocking her full Lyctor powers, she heals the damage. Struggling to get used to her new body, she fights her way through until she comes upon Mercymorn who balks at the color of her eyes. Gideon learns that it was Mercymorn who tried to kill Harrow and, as she comes to some decision about the cause of Gideon’s unique eye color, Mercymorn immediately tries to kill her again. Gideon is only saved by the appearance of Cytherea, who shoots Mercymorn and disappears. Looking for her in the halls, Gideon connects with Ianthe, who is irritated to find Gideon replacing Harrow, and Augustine, who takes one look at her eyes and immediately runs after Mercymorn. Ianthe leads Gideon to her rooms and provides her with a letter from Harrow, containing her sunglasses, and takes her to see the Emperor. As they eavesdrop, they learn that Gideon is the child of the Emperor and Commander Wake, who has been possessing the body of Cytherea, conceived as part of a plot to open the Locked Tomb. Before the conversation can continue, Gideon the First barges in and murders Commander Wake. Mercymorn explains that Gideon’s golden eyes, the eyes of A.L., have confirmed to her and Augustine that A.L. was the Emperor’s cavalier, perfect Lyctorhood was always possible, and that none of their cavaliers had to die. Mercymorn kills the Emperor, but he does not stay dead and returns to kill Mercymorn. He demands that his Lyctors swear loyalty, which Gideon the First and Ianthe do. Augustine refuses and pushes the Mithraeum into the depths of the River where he attempts to push the Emperor into the stoma. Gideon is rescued by Gideon the First, who reveals herself to be his cavalier, Pyrrha Dve, and that her necromancer has died in battle with Number Seven. They watch helplessly as Ianthe frees the Emperor, dooming Augustine to the stoma, before being crushed by the weight of the River. As she dies, Gideon hears someone begin CPR. Epilogue . Six months after the Emperor’s murder, a woman sits in a room, looking out a window into a bustling but war-tainted city thirty stories below. She is looked after by three women who hand her bones to arrange when the windows are covered with blackout curtains and have her exercise and practice swordwork when they are not. Sometimes, she is allowed to go down to the street to get food from the vendors, but they never return after the vendor notices she should have been burned by the heat of the food. One night, as they hide from the gunfire in the bathroom, she asks if the woman who takes care of her has figured out who she is. Camilla Hect replies “Not yet.” . ",
    "url": "/notes/other_books/the-locked-tomb-series#plot-1",
    
    "relUrl": "/notes/other_books/the-locked-tomb-series#plot-1"
  },"822": {
    "doc": "The Ministry for the Future",
    "title": "The Ministry for the Future",
    "content": "A somewhat mishmashed narrative, splicing together riddles, reporter accounts, eyewitness accounts, a climate expert narrator, articles, and two or three recurring characters to tell the story of the next twenty seven or so years of earth in the midst of climate change. Novel exists at a macro level, depicting the very real effects of climate change, but also at a micro level, in the very human story of the head of the Ministry of the Future, Mary Murphy, and a survivor of the first Indian Heat Wave, Frank. Their paths intersect early as Frank kidnaps Mary in an ill-advised attempt to get her agency to conduct more extralegal activity to combat climate change. The novel is awash with ideas and reminds me of the science fiction of Cixin Liu – expansive, virtuosic, deeply knowledgeable, playful with ideas. Many are calling it the most important book they read the year it came out in part because of the very realistic depiction of the devastating effects of climate change on all human civilization, and also for the steps it posits we need to take to stave off elimination. This is definitely a political novel – it imagines a future where we need to severely reduce our meat consumption, and eliminate the last vestiges of our robber baron capitalism and eliminate billionaires, to reinvent capitalism, to blockchain our money. ",
    "url": "/notes/other_books/the-ministry-for-the-future",
    
    "relUrl": "/notes/other_books/the-ministry-for-the-future"
  },"823": {
    "doc": "The Ministry for the Future",
    "title": "Themes and Motifs",
    "content": "Ganymede and the Eagle . Much of the novel takes place in Switzerland and specifically Zurich, and many of the scenes refer to a watchful statue of Ganymede overlooking the action, a sort of bio-TJ Eckleburg. Ganymede was abducted by Zeus to be his cup-bearer at Mt. Olympus. The novel gives us this as a final potential explanation for the significance of this statue: . He was definitely saying something. That we could become something magnificent, or at least interesting. That we began as we still are now, child geniuses. That there is no other hom for us than here. That we will cope no matter how stupid things get. That all couples are odd couples. That the only catastrophe that can’t be undone is extinction. That we can make a good place. That people can take their fate into their hands. That there is no such thing as fate. utopian novel . The novel has been categorized as a utopian novel, largely due to it’s ending, where humanity has actually managed to not only stop the growth of carbon in the atmosphere but reduce it, as well as cutting back or eliminating the meat industry, repurposing military equipment to combat climate change, reverse inequality, establish minimum and maximum economic standing, and establish the rights of future generations. It is a hopeful novel, but hard to imagine given the current state of the world and how little we are doing to combat climate change. KSR’s narrative tells us that to get to that utopia, millions need to die, and we need to lose decades of progress to global depressions. The argument implied is that we can skip the tragedy and make changes now to prevent it. intergenerational equity . The Ministry for the Future isn’t a completely fictional entity – it has a basis in current litigation arguing for human rights for those not born yet, for fairness and justice for those not born. blockchain and the carbon coin . Some interesting ideas around a carbon coin, but I really don’t know enough about economics to know if it’s feasible or not. Like most things in this book, I’d imagine it’s either based on something that has already been proposed or grounded in research and science. The entirety of our money being blockchained seems less feasible, however. Cargo culting the magical blockchaining. ",
    "url": "/notes/other_books/the-ministry-for-the-future#themes-and-motifs",
    
    "relUrl": "/notes/other_books/the-ministry-for-the-future#themes-and-motifs"
  },"824": {
    "doc": "The Ministry for the Future",
    "title": "Thoughts",
    "content": "KSR has called this a slurry of forms – at it’s core, this is a human story. A woman, Mary Murphy, dealing with the trauma of losing her partner at 28, and Frank, dealing with the trauma of being the sole survivor of a mass death event, and how they found each other. Cast more largely, it is about earth and dealing with the trauma humanity has inflicted upon it. It is a really ambitious novel, one that has certainly made me a fan of KSR, and one that has painted the potential realities of climate change in a all-too-realistic hue in my mind. ",
    "url": "/notes/other_books/the-ministry-for-the-future#thoughts",
    
    "relUrl": "/notes/other_books/the-ministry-for-the-future#thoughts"
  },"825": {
    "doc": "The Netanyahus",
    "title": "The Netanyahus",
    "content": " ",
    "url": "/notes/other_books/the-netanyahus",
    
    "relUrl": "/notes/other_books/the-netanyahus"
  },"826": {
    "doc": "The Netanyahus",
    "title": "Summary",
    "content": "Some parts a campus novel, another a new journalism text, Cohen’s novel follows a professor, Ruben Blum (modelled at least superficially on Harold Bloom) at a small college in upstate New York, as he is forced to serve as emissary for a prospective employee to the school. He is currently the only Jew in the faculty, and he was chosen for the position (of emissary) because the visiting professor is also Jewish, the father of eventual prime minister of Israel, Ben-Zion Netanyahu. What follows is an absurdist day of of imposition by the entire Netanyahu clan on the Blums, culminating in the mother and father Blum and mother and father Netanyahu walking in on one of the older Netanyahus (not Benjamin) sleeping with Judy Blum. ",
    "url": "/notes/other_books/the-netanyahus#summary",
    
    "relUrl": "/notes/other_books/the-netanyahus#summary"
  },"827": {
    "doc": "The Netanyahus",
    "title": "Quotes",
    "content": "The complete calmness, the complete comfortability, the totally untroubled capacity to relax inside of one’s own blanched-dry dermal girdle that comes from being swaddled in money, bonds, and stock certificates from birth, a patrimony honed at Groton, Yale, and Harvard. (14) . I just love this sentence, its assonance, its flow, its condemnation of entitled elites. Blanched-dry dermal girdle is very DFW-esque, and the flow and lilt feels Joycean. A sentence like this is why I want to read more of Joshua Cohen. It was the differences in history that got to me the most. The history in my regular schooling was all about progress, a world that brightened with the Enlightenment and steadily improved; a world that would continue to improve illimitably, so long as every country kept trying to be more like America and America kept trying to be more like itself. The past was merely the process by which the present was attained, and the present merely the most current stage of the American superlative, to be overtaken by tomorrow’s liberation and capital’s spread, until the ultimate transfiguration of world history into world democracy. This meliorist account knew no bounds. Like the country itself, it could only grow; it could never end; it was open, expansive, exhilarating. (30-31) . And so my childhood was tugged between conflicting exceptionalisms, between the American condition of being able to choose and the Jewish condition of being chosen … (32) . This wasn’t the usual preparation of an academic evaluator, but closer to a self-evaluation, and the first time in my life I’d ever looked back and compared who I’d been with who I’d become. I was a tenure-track historian and an active participant in secular American life sneaking around in the attic-mind of an obscure Israeli academic like I was one of the antique Jews he wrote about, a convert forcibly returned to the faith I’d left and too consumed by internal turmoil to notice the hour, until—jolted by the chatter of amatory birds —I’d turn and tug aside the curtain and outside the window was morning. (42) . Regardless of where they were and the specific nature and direction of the process, however, it remains an incontrovertible fact that nearly all of the world’s Jews were involved at midcentury in becoming something else; and that at this point of transformation, the old internal differences between them—of former citizenship and class, to say nothing of language and degree of religious observance—became for a brief moment more palpable than ever, giving one last death-rattle gasp. (51) . [W]as this theater, or was this Judaism? (71) . When a family conflict is related to a stranger, I often wonder whom it hurts more, the family or the stranger. (84) . He was an historian who was left out of history, the spawn of a frustrated rabbi-diplomat who himself had been written out of the annals of the State. (92) . If the American empire couldn’t persuade allegiance to democracy over origin, it would fail. He said that while staring at me, unblinking: It would fail. He might even have been pointing at me: You will. What was true for Europe at the emergence of Zionism will one day be true for America too, once assimilation is revealed as a fraud, or once it’s revealed that the country contains nothing to assimilate to—no core, no connate heart—not just for the Jews, but for everyone. This, at least, was his implication, the text behind the text of his lecture, which he continued to speak to me with his hooded steppe eyes even after his prepared remarks were finished and he was making his acknowledgments and bowing to the light, deferential, and relieved applause: This is what I think of America—nothing. This is what I think of American Jews—nothing. Your democracy, your inclusivity, your exceptionalism—nothing. Your chances for survival—none at all. You, Ruben Blum, are out of history; you’re over and finished; in only a generation or two the memory of who your people were will be dead, and America won’t give your unrecognizable descendants anything real with which to replace the sense of peoplehood it took from them; the boredom of your wife—who’s tearing her program up into little white paper pills she’d like to swallow like Percodan— isn’t merely boredom with you or her work or with the insufficiency of options for educated women in this country; it’s more like a sense of having not lived fully in a consequential time; and the craziness of your daughter isn’t just the craziness of an adolescent abducted from the city to the country and put under too much pressure to achieve and succeed; it’s more like a raging resentment that nothing she can find to do in her life holds any meaning for her and every challenge that’s been thrust at her—from what college to choose to what career to have—is small, compared to the challenges that my boys, for example—whom she’s been condemned to babysit—will one day have to deal with, such as how to make a new people in a new land forge a living history. ",
    "url": "/notes/other_books/the-netanyahus#quotes",
    
    "relUrl": "/notes/other_books/the-netanyahus#quotes"
  },"828": {
    "doc": "The Netanyahus",
    "title": "Thoughts",
    "content": "This is a really compelling book. Sentences are fantastic, flow like white water rapids with their own momentum and heft. Thematically, it is in the same tradition of “jewish man forced to confront his own story by way of another man” of Roth and Bellow and Malamud. But, if those guys did post-postmodernism. There’s a lot about history, both personal and historical, and what fashions a man – his culture’s history, or his own. Netanyahu is for Blum that reminder of his historical provenance. There’s a great bit on page 140 where Ben-Zion, when confronted with Ruben’s daughters name, Judy, gives the whole Jewish history of that name claiming it stems from the name of God, only for Ruben to correct his account by saying she was named for her grandmother, the wife of a grain merchant. What does it mean to have a history but to be ahistorical? . ",
    "url": "/notes/other_books/the-netanyahus#thoughts",
    
    "relUrl": "/notes/other_books/the-netanyahus#thoughts"
  },"829": {
    "doc": "The Netanyahus",
    "title": "Vocab",
    "content": ". | horripilated | crapulous | labent | midden | eschatology | peripatetic | lucubration | arcana | . ",
    "url": "/notes/other_books/the-netanyahus#vocab",
    
    "relUrl": "/notes/other_books/the-netanyahus#vocab"
  },"830": {
    "doc": "The Promise",
    "title": "The Promise",
    "content": " ",
    "url": "/notes/other_books/the-promise",
    
    "relUrl": "/notes/other_books/the-promise"
  },"831": {
    "doc": "The Promise",
    "title": "Summary",
    "content": "The Promise is a family saga spanning four decades, each of which features a death in the family. It concerns the Afrikaner Swart family and their farm located outside Pretoria. The family consists of Manie, his wife Rachel, and their children Anton, Astrid, and Amor. In 1986, Rachel dies after a long illness. Before passing, she expresses her dying wish to Manie that their black domestic servant, Salome, be given ownership of the house in which she resides on the family’s property. This promise, overheard by a young Amor, is made by Manie, but he claims no memory of having made it at the wake, and shows no intention of fulfilling it, especially as Salome cannot legally own property under the country’s Apartheid laws. In 1995, post-Apartheid, the siblings reunite at the family farm after Manie suffers a fatal snakebite, with Anton having spent 10 years living a transient lifestyle after deserting the army in 1986, Astrid now married with twins, and Amor having lived in England for several years. Although she is now legally able to own her house, the will does not make provision for Salome, and instead makes the three co-owners of the land. Anton moves back in to the farmhouse, and assures Amor he will follow through on the promise. In 2004, Anton is in a loveless marriage with his childhood sweetheart, Desirée, and heavily in debt, while Astrid is married to her second husband and Amor is working as a nurse in an HIV ward in Durban, where she lives with her long-term girlfriend. Despite Amor’s appeals, the promise has not been honoured, and Astrid and Anton continue to resist her. Secretly, Astrid has been having an affair with her husband’s business partner, and after being denied penance by her priest during confession, is murdered in a hijacking. Before her funeral, Amor makes a final appeal to Anton to fulfil their father’s promise, but when she refuses to support his plan to sell some of the land on their farm, the matter is unresolved, and Amor returns to Durban, never to see Anton again. In 2018, Anton has sunk into alcoholism and deep depression due to his failed marriage, impotence, trauma over the killing of a civilian in the army, and the feeling that he has wasted his life. One night, after getting into a fight with Desirée in a drunken stupor, Anton commits suicide. Amor, now living in Cape Town after leaving her girlfriend and her job in Durban, is finally informed of his death by Salome. Now the only surviving member of her family, she gifts the now-derelict family farm to Desirée, minus Salome’s house, which she legally transfers to her, finally fulfilling her mother’s promise. She also gives Salome her share of her father’s inheritance, which she has refused to touch up to this point. ",
    "url": "/notes/other_books/the-promise#summary",
    
    "relUrl": "/notes/other_books/the-promise#summary"
  },"832": {
    "doc": "The Promise",
    "title": "Quotes",
    "content": "The driver of the long car, Mervyn Glass, has been sitting for the past two hours in the kitchen, wearing his yarmulke, waiting on the instruction of the bossy woman, the sister of the bereaved, who is now telling him to get moving. This is a very difficult family, he can’t work out what’s going on, but doesn’t appear to mind. Waiting in respectful silence is an essential part of the job and he has developed the capacity to simulate deep calm while experiencing none of it. In his core, Mervyn Glass is a frantic man. But in the meantime there is the body, the horrible meaty fact of it, the thing that reminds everyone, even people who didn’t care for the dead woman, and there are always a few of those, that one day they shall lie there too, just like her, emptied out of everything, merely a form, unable even to look at itself. And the mind recoils from its absence, cannot think of itself not thinking, the coldest of voids. For there is nothing unusual or remarkable about the Swart family, oh no, they resemble the family from the next farm and the one beyond that, just an ordinary bunch of white South Africans, and if you don’t believe it then listen to us speak. We sound no different from the other voices, we sound the same and we tell the same stories, in an accent squashed underfoot, all the consonants decapitated and the vowels stove in. Something rusted and rain-stained and dented in the soul, and it comes through in the voice. ",
    "url": "/notes/other_books/the-promise#quotes",
    
    "relUrl": "/notes/other_books/the-promise#quotes"
  },"833": {
    "doc": "The Promise",
    "title": "Thoughts",
    "content": "Another book dealing with the vestiges of empire, and what promises we keep to those who are ground up in its gears. We can look forward, and say we can’t keep any promises because the system prohibits us, like the remaining Swarts before the end of Apartheid, or continue looking forward when Apartheid ends and they still haven’t fulfilled their promise to Salome, relegating those injustices in the past and claiming they no longer need redress. I think about a Supreme Court decision that just came down essentially eliminating the inclusion of race for college admissions. And I think about what promise America owes it’s black citizens, what redress for years of enslavement, then years more in subjugation as second-class citizens. Does this promise patronize those it benefits, like Salome seems to think? Is it too little, too late? Is there no mending this wound? . Galgut’s prose is something quite nice. He is a steady hand at the till. He reminds me of Ian McKewan – taking a family drama and transposing it to a national stage. The novel’s plot reminds me of the Banshees of Inisherin as well, which takes a friendship turned contentious feud of two friends to tell the story of the Irish civil war, in all it’s senselessness. The Swart family drama is a familial retelling of the history of South Africa immediately preceding and following Apartheid. I’m not sure I buy the quote on the book slip that claims it the most important book of the last ten years (surely there are books on science that precipitate more change?) but it is a good book, nonetheless. ",
    "url": "/notes/other_books/the-promise#thoughts",
    
    "relUrl": "/notes/other_books/the-promise#thoughts"
  },"834": {
    "doc": "The Selfish Gene",
    "title": "The Selfish Gene",
    "content": ". | Summary | Quotes | Thoughts | . ",
    "url": "/notes/educational_books/the-selfish-gene",
    
    "relUrl": "/notes/educational_books/the-selfish-gene"
  },"835": {
    "doc": "The Selfish Gene",
    "title": "Summary",
    "content": " ",
    "url": "/notes/educational_books/the-selfish-gene#summary",
    
    "relUrl": "/notes/educational_books/the-selfish-gene#summary"
  },"836": {
    "doc": "The Selfish Gene",
    "title": "Quotes",
    "content": "The argument of this book is that we, and all other animals, are machines created by our genes. (3) . Among animals, man is uniquely dominated by culture, by influences learned and handed down. (4) . I shall argue that the fundamental unit of selection, and therefore of self-interest, is not the species, nor the group, nor even, strictly, the individual. It is the gene, the unit of heredity. (14) . Darwin’s theory of evolution by natural selection is satisfying because it shows us a way in which simplicity could change into complexity, how unordered atoms could group themselves into ever more complex patterns until they ended up manufacturing people. (15) . A gene is defined as any portion of chromosomal material that potentially lasts for enough generations to serve as a unit of natural selection. (36) . Any gene that behaves in such a way as to increase its own survival chances in the gene pool at the expense of its alleles will, by definition, tautologously, tend to survive. The gene is the basic unit of selfishness. (46) . The true ‘purpose’ of DNA is to survive, no more and no less. the control of genes in only an indirect, but still very powerful, sense. By dictating the way survival machines and their nervous systems are built, genes exert ultimate power over behaviour. But the moment-to-moment decisions about what to do next are taken by the nervous system. Genes are the primary policy-makers; brains are the executives. (77) . An evolutionarily stable strategy or ESS is defined as a strategy which, if most members of a population adopt it, cannot be bettered by an alternative strategy. It is a subtle and important idea. Another way of putting it is to say that the best strategy for an individual depends on what the majority of the population are doing. Since the rest of the population consists of individuals, each one trying to maximize his own success, the only strategy that persists will be one which, once evolved, cannot be bettered by any deviant individual. If there is a human moral to be drawn, it is that we must teach our children altruism, for we cannot expect it to be part of their biological nature. To sum up this chapter so far, the various different kinds of breeding system that we find among animals-monogamy, promiscuity, harems, and so on-can be understood in terms of conflicting interests between males and females. Individuals of either sex ‘want’ to maximize their total reproductive output during their lives. Because of a fundamental difference between the size and numbers of sperms and eggs, males are in general likely to be biased towards promiscuity and lack of paternal care. Females have two main available counter-ploys, which I have called the he-man and the domestic-bliss strategies. The ecological circumstances of a species will determine whether the females are biased towards one or the other of these counter-ploys, and will also determine how the males respond. In practice all intermediates between he-man and domestic-bliss are found and, as we have seen, there are cases in which the father does even more child-care than the mother. This book is not concerned with the details of particular animals species, so I will not discuss what might predispose a species towards one form of breeding system rather than another. Instead I will consider the differences that are commonly observed between males and females in general, and show how these may be interpreted. I shall therefore not be emphasizing those species in which the differences between the sexes are slight, these being in general the ones whose females have favoured the domestic-bliss strategy. What this astonishing variety suggests is that man’s way of life is largely determined by culture rather than by genes. Most of what is unusual about man can be summed up in one word: ‘culture’. I use the word not in its snobbish sense, but as a scientist uses it. Cultural transmission is analogous to genetic transmission in that, although basically conservative, it can give rise to a form of evolution. The new soup is the soup of human culture. We need a name for the new replicator, a noun that conveys the idea of a unit of cultural transmission, or a unit of imitation. ‘Mimeme’ comes from a suitable Greek root, but I want a monosyllable that sounds a bit like ‘gene’. I hope my classicist friends will forgive me if I abbreviate mimeme to meme. If it is any consolation, it could alternatively be thought of as being related to ‘memory’, or to the French word meme. It should be pronounced to rhyme with ‘cream’. ",
    "url": "/notes/educational_books/the-selfish-gene#quotes",
    
    "relUrl": "/notes/educational_books/the-selfish-gene#quotes"
  },"837": {
    "doc": "The Selfish Gene",
    "title": "Thoughts",
    "content": ". | Stotting – a gazelle jumps really high to broadcast its fitness, as if to say to the lion I won’t be any easy meal | virgin birth might be a result of a mistranslation from the Hebrew to Greek for the word for young woman | Beau Geste effect - The Beau Geste hypothesis in animal behaviour is the hypothesis that tries to explain why some avian species have such elaborate song repertoires for the purpose of territorial defence. The hypothesis takes its name from the 1924 book Beau Geste and was coined by John Krebs in 1977. The Beau Geste hypothesis which was coined by Krebs in 1977 to explain why various avian species have such large song repertories. The hypothesis discusses that avian species utilize such large song repertories for potentially a number of reasons such as for territorial defence and to test the competition within a new habitat. The name of the hypothesis comes from the book which was originally published in 1924 “Beau Geste”. The book tells the story of three English brothers which all enlisted in the French Foreign Legion and ended up in a desert battle against a Tuareg army. They were greatly outnumbered, and in order to create the illusion that they had more men than they actually had, they took whatever dead soldiers they could find and propped them up along the walls of the fortress. | . ",
    "url": "/notes/educational_books/the-selfish-gene#thoughts",
    
    "relUrl": "/notes/educational_books/the-selfish-gene#thoughts"
  },"838": {
    "doc": "The Starfish and the Spider",
    "title": "The Starfish and the Spider",
    "content": "The Unstoppable Power of Leaderless Organizations . centralized organization . | spider - has a head that you can destroy to kill the spider | like the Incas or Aztecs or a government | has a leader | specific place where decisions are made | is coercive as there is a leader who calls the shots | . decentralized organization . | starfish - can remove legs and starfish still functions | like Apaches, or AA, or open-source software, or terrorist cells | no leader, no hierarchy, no headquarters | is ‘open’ and flat, and power is distributed among all people | . | CEO | Catalyst | . | the boss | a peer | . | command and control | trust | . | rational | emotionally intelligent | . | powerful | inspirational | . | directive | collaborative | . | in the spotlight | behind the scenes | . | order | ambiguity | . | organizing | connecting | . the accordion principle - moving back and forth between two states – in this case between centralized and decentralized . principles of decentralization . | when attacked, a decentralized organization tends to become even more open and decentralized. | it’s easy to mistake starfish for spiders | an open system doesn’t have central intelligence; the intelligence is spread throughout the system | open systems can easily mutate | the decentralized organization sneaks up on you | as industries become decentralized, overall profits decrease. | put people into an open system and they’ll automatically want to contribute | when attacked, centralized organizations tend to become even more centralized | . Rules for the New World . | Diseconomies of scale from centralization . | huge, centralized companies quickly start being less efficient and less effective than smaller, more nimble and distributed ones | . | Network effects | The power of chaos for creativity . | order and structure can often hamper creativity | . | Knowledge is at the edge, not centered . | look to the fringes for who has the most cutting edge information | . | Everyone wants to contribute | Beware of the Hydra response . | based on the Greek myth, where attacking a decentralized organization like a multi-headed snake creates more proliferation of snake heads | . | Catalysts rule | The values are the organization | Measure, monitor, and manage . | just because something is decentralized doesn’t mean you can’t measure it; just choose what to measure carefully based on the decentralized structure | . | Flatten or be flattened . | decentralize through some hybrid approach or be taken over by someone else who is decentralized | . | . ",
    "url": "/notes/business_books/the-starfish-and-the-spider",
    
    "relUrl": "/notes/business_books/the-starfish-and-the-spider"
  },"839": {
    "doc": "The Starfish and the Spider",
    "title": "Why I read this book",
    "content": ". This was mentioned on the Software Engineering Daily podcast by Ruben Harris, and he spoke highly of the novel. Also, it was a top 10 business book in 2006. Can’t go wrong, right? . ",
    "url": "/notes/business_books/the-starfish-and-the-spider#why-i-read-this-book",
    
    "relUrl": "/notes/business_books/the-starfish-and-the-spider#why-i-read-this-book"
  },"840": {
    "doc": "The Starfish and the Spider",
    "title": "One key takeaway",
    "content": ". Some organizations are flat or decentralized, and some are hierarchical or centralized, and by understanding the difference, we can drive positive outcomes by the way we structure our organizations. ",
    "url": "/notes/business_books/the-starfish-and-the-spider#one-key-takeaway",
    
    "relUrl": "/notes/business_books/the-starfish-and-the-spider#one-key-takeaway"
  },"841": {
    "doc": "The Starfish and the Spider",
    "title": "Summary",
    "content": ". The book jumps through a few historical examples of some centralized and decentralized organizations (the Apaches are decentralized and the Aztecs are centralized), as well as weighing in on the record label and music access scene of the early aughts (which feels a bit quaint, 15 years on). ",
    "url": "/notes/business_books/the-starfish-and-the-spider#summary",
    
    "relUrl": "/notes/business_books/the-starfish-and-the-spider#summary"
  },"842": {
    "doc": "The Starfish and the Spider",
    "title": "How was the book",
    "content": ". 2006 was a long time ago. I think it might be closer to the moon landing than it is to today. Don’t look that up. Facebook had just rolled over for the first time, sickly gurgling on the floor. Napster was gone, and Justin Timberlake was a few years off from regurgitating Sean Parker’s name back into the cultural vulgate. Computers existed, and AOL may or may not have still been minting new CDs to give the world free internet. I’m not sure. This review is only haphazardly researched (it turns out finding an actual timeline of the past in tech is hard, amnesiatically compelled as we are for the instant gratification of the next IPO). But, we didn’t have Uber, or AirBnb, or WeWork, or any of the now ubiquitous “share everything” companies that have democratized (and then capitalized, because isn’t that always the way we inflate and then deflate the accordion) private property. Things are now “flatter” than they’ve ever been – global access to labor markets never higher, fractional prices to rent experiences enabling personal consumption never before seen. They even have a toilet in South Korea that shoots water then hot air up your ass to clean then pamper. I’ve sat on it. Thing is, this book, despite being one of the top 10 business books of 2006, and having a review on the back by someone who was spoken of fondly in the book (Dave Martin, where are you now?!), I don’t know if it said anything new even in 2006. Malcolm Gladwell talked about “catalysts” in 2000 in The Tipping Point, giving a more robust hierarchy of mavens, connectors, and some third category that escapes me (So many of these business books are populated with this rare ubermensch of a character type; the selfless and hard-working apostle who endeavors to make the Jesus’s dreams a reality). Friedman covered the economic aspect in The World Is Flat. Much better books have been written on open source development, on Cortes and the Aztecs (the story in this novel is plain rice cakes compared to the actual events – I think Cortes conquered the 20 million strong Aztec empire with like 30 guys with ridiculous hats and some blunderbusses), hell, even on starfish and spiders. This book is the worst sort of business book, part simplistic animal metaphor, part survey of pop sociology and pop psychology and scant history to weave some sort of narrative that justifies its premise. Straw men were invented by business books. And I’m party to it. I bought the damn thing, thinking, if nothing else, I would come away with some actionable insight into either capital B Business or at least an increased familiarity with marine biology, but not the case. If nothing else, the book was short. And if you are looking for the Malcolm Gladwell version of the impossibly low priced supermarket brand’s version of Coke, this is your echinodermatic book! . ",
    "url": "/notes/business_books/the-starfish-and-the-spider#how-was-the-book",
    
    "relUrl": "/notes/business_books/the-starfish-and-the-spider#how-was-the-book"
  },"843": {
    "doc": "The Starfish and the Spider",
    "title": "Any other reading",
    "content": ". | The Tipping Point Malcolm Gladwell, 2000. | Give and Take, Adam Grant, 2013. | . ",
    "url": "/notes/business_books/the-starfish-and-the-spider#any-other-reading",
    
    "relUrl": "/notes/business_books/the-starfish-and-the-spider#any-other-reading"
  },"844": {
    "doc": "The Startup of You",
    "title": "The Startup of You",
    "content": "Reid Hoffman, Ben Casnocha, 2012 . | 1: All Humans Are Entrepreneurs . | Your Career, Your Startup | Don’t be Detroit | . | 2: Develop a Competitive Advantage . | Assets | Aspirations | Market Realities | Local Advantages | . | 3: Plan to Adapt . | ABZ Planning . | Guidance on Plans | . | Inflection Points | . | 4: It Takes a Network | 5: Pursue Breakout Opportunities . | All-Star Networks | . | 6: Take Intelligent Risks . | Volatility Paradox | . | 7: Who you Know is What you Know | Book Summary | Thoughts | . ",
    "url": "/notes/business_books/the-startup-of-you",
    
    "relUrl": "/notes/business_books/the-startup-of-you"
  },"845": {
    "doc": "The Startup of You",
    "title": "1: All Humans Are Entrepreneurs",
    "content": "Your Career, Your Startup . | all humans have the will to create encoded in their DNA | you can approach your career like you would a start-up | the forces of globalization (flattening of the playing field) and automation (replacing low skill jobs and some medium or high skill jobs) has made it so that pact between employee and employer, long-time employment for lifetime loyalty, no longer exists | you need to invest in yourself | . Don’t be Detroit . | Detroit offers an object lesson in how quickly success can fade | in 50s and 60s, Detroit was height of the world – American autos employed 100s of 1000s for lifetime, gainful employment | Detroit companies got complacent and slow and lost market share and then the market to competition | now Detroit is in dire straits | “The forces of competition and change that brought down Detroit are global and local. They threaten every business, every industry, every city. And more important, they also threaten every individual, every career.” (18) | . strategy for the start up of you is . | to “[t]ake intelligent and bold risks to accomplish something great | build a network of alliances to help you with intelligence, resources, and collective action | pivot to a breakout opportunity . | need to be in a “permanent beta” | “Some people say they have 20 years experience, when in reality, they have 1 year’s experience repeated 20 times.” - Richie Norton | . ",
    "url": "/notes/business_books/the-startup-of-you#1-all-humans-are-entrepreneurs",
    
    "relUrl": "/notes/business_books/the-startup-of-you#1-all-humans-are-entrepreneurs"
  },"846": {
    "doc": "The Startup of You",
    "title": "2: Develop a Competitive Advantage",
    "content": ". | you can ask yourself what are you offering that is both rare and valuable – why would a company hire me over someone else? | your competitive advantage is formed by three components: assets, aspirations/values, and market realities, or supply and demand | . Assets . | assets are what you have right now, soft and hard skills | soft skills are things like knowledge, info in your brain, training | hard skills are things like assets and money | a competitive edge emerges when you combine multiple different assets, like communication and engineering skills | . Aspirations . | includes your deepest wishes, ideas, goals, and visions of future | when you are doing work you care about, you tend to work harder and better | it isn’t right to think of a “true self” that needs to be uncovered via introspection – rather, you remake yourself as you grow and the world changes, your identity doesn’t get found, it emerges. | . Market Realities . | supply and demand of market | if someone won’t pay you for what you love to do, it isn’t a viable career | . Local Advantages . | while it might be helpful to learn a skill to increase your marketability, it is also viable to go to a less competitive pool – think NBA players in Europe or G League | . ",
    "url": "/notes/business_books/the-startup-of-you#2-develop-a-competitive-advantage",
    
    "relUrl": "/notes/business_books/the-startup-of-you#2-develop-a-competitive-advantage"
  },"847": {
    "doc": "The Startup of You",
    "title": "3: Plan to Adapt",
    "content": ". | the notion that you can choose your vision/calling, then meticulously plan to achieve it, is naive in this age | this is the idea central to What Color is Your Parachute, one of the top-selling business books of all-time | this idea is wrong because . | it presumes the world is static and you don’t need to change to accommodate anything new | it presumes that fixed, accurate self-knowledge can be easily attained | just because it is a calling doesn’t mean someone will pay you for it | . | . ABZ Planning . | you can create an adaptive, iterative plan | Plan A, what you are doing right now, something you iterate on constantly | Plan B, what you pivot to (you can start this on the side) | Plan Z, the fallback or lifeboat | . Guidance on Plans . | plans should make use of your competitive advantage (your assets, aspirations, and market realities) | prioritize learning about yourself and the world | learn by doing | make reversible, small bets | think two steps ahead | establish an identity separate from your employer tube Inflection Points . | when a 10x force disrupts a business | these are points of high leverage and can be taken advantage of | plan for unknowns so you are adaptable | . ",
    "url": "/notes/business_books/the-startup-of-you#3-plan-to-adapt",
    
    "relUrl": "/notes/business_books/the-startup-of-you#3-plan-to-adapt"
  },"848": {
    "doc": "The Startup of You",
    "title": "4: It Takes a Network",
    "content": ". | if you want to accelerate your career, you need the help and support of others | when it comes to getting promoted, strong relationships and good terms with boss can matter more than competence | “the fastest way to change yourself is to hang out with people who are already the way you want to be” (85) | research shows that a team in business world tends to perform at level of worst individual member (pulled from this blog) | different contexts matter - professional colleagues compared to personal friends (e.g., from school) | past idea of networking was “transactional”, new ideas are that relationship builders prioritize high-quality relationship over quantity | . building a genuine relationship depends on (at least) two things: . | seeing the world through someone else’s perspective | thinking about how you can help and collab with other person rather than what you can get from them | . | best way to engage with new people is through people you already know | . two types of relationship that matter: . | allies - you can typically have at most 8 to 10, these are people you implicitly trust for honesty, feedback, etc | weaker ties and acquaintances - which can be broken down to 2nd and 3rd degree (friends, and friends of friends) | . Dunbar’s Number - animals are limited in how large their social group is by the size of their neocortex – for humans the number is 150 Degrees of Separation theory - the amount of degrees of separation that might tie you to someone, almost always at most 5 to 7 degrees . | hanging out with people you have a lot in common with can be limiting to exposure to new experiences, thoughts, connections – what is valuable is the breadth and reach of your network | you should be making or receiving one introduction a month | “The value and strength of your network are not represented in the number of contacts in your address book. What matters are your alliances, the strength and diversity of your trust connections, the freshness of the information flowing through your network, the breadth of your weak ties, and the ease with which you can reach your second- or third-degree connections.” (120) | all it takes to stay in touch is the desire to do it, a modest amount of organization, and proactiveness | the business world is rife with power jostling, gamesmanship, status signalling, so any relationships need to take that into account | . ",
    "url": "/notes/business_books/the-startup-of-you#4-it-takes-a-network",
    
    "relUrl": "/notes/business_books/the-startup-of-you#4-it-takes-a-network"
  },"849": {
    "doc": "The Startup of You",
    "title": "5: Pursue Breakout Opportunities",
    "content": ". | “There are always breakout projects, connections, specific experiences, and yes, strokes of luck—that lead to unusually rapid career growth.” (145) | . you can deliberately increase these opportunities: . | curiosity – be curious about everything, ask questions, invest ongoing effort in learning | court serendpidity and good randomness . | serendipidity is word invented by Horace Walpole from old Arabian story The Three Sisters of Serendip – sisters were lucky, but also worked hard to be put in a spot to seize a chance given, i.e., being alert to potential opportunity then acting on it | . | opportunities are attached to individuals | hustle – work your butt off, and great opportunities almost never fit your schedule | . All-Star Networks . what makes an allstar network? . | each individual is high-quality | the group has something in common | the group is co-located or in close geographic density | strong ethos of sharing and cooperation | . ",
    "url": "/notes/business_books/the-startup-of-you#5-pursue-breakout-opportunities",
    
    "relUrl": "/notes/business_books/the-startup-of-you#5-pursue-breakout-opportunities"
  },"850": {
    "doc": "The Startup of You",
    "title": "6: Take Intelligent Risks",
    "content": ". | “Risk” in a career context is the downside consequences from a given action or decision | you should pursue only those opportunities with enough upside to justify possible downsides | assessing risk is not impossible – it is unrealistic to weigh all pros and cons of every decision | . a few heuristics to assess risk . | it’s not as risky as you think - negativity bias, or sticks get our attention more easily than carrots | is worst-case tolerable or intolerable? | can you change decision midway through? | don’t conflate uncertainty with risk | what will the risks be like in a few years, and are you in a position in your life to absorb more risk? | . | risk is personal, as Warren Buffett says: “be fearful when others are greedy, and greedy when others are fearful.” | . some examples of career risks: . | jobs that pay less in cash but offer tremendous learning | part-time or contract gigs that are less “stable” | hiring someone without much experience but they are a fast learner | an opportunity where the risks are highly publicized | . Volatility Paradox . | in taking on smaller risks more frequently, you harden yourself to bigger risks, (Taleb’s Black Swan events) later, much like a forest with small controlled burns to prevent large forest fires later | . ",
    "url": "/notes/business_books/the-startup-of-you#6-take-intelligent-risks",
    
    "relUrl": "/notes/business_books/the-startup-of-you#6-take-intelligent-risks"
  },"851": {
    "doc": "The Startup of You",
    "title": "7: Who you Know is What you Know",
    "content": ". | the knowledge you need isn’t static but always changing | “What will get you somewhere is being able to access the information you need, when you need it” (195) your network is indispensable because: . | it offers private observations and impressions | it offers personalized and contextualized information | it can filter information you get from other sources | . | asking a lot of good questions is key to network intelligence | good question: “What’s the most interesting thing you’ve learned over the past few months?” | . ",
    "url": "/notes/business_books/the-startup-of-you#7-who-you-know-is-what-you-know",
    
    "relUrl": "/notes/business_books/the-startup-of-you#7-who-you-know-is-what-you-know"
  },"852": {
    "doc": "The Startup of You",
    "title": "Book Summary",
    "content": "While not all of us have the stomach or desire to be business entrepreneurs, we can approach our careers with the same set of principles that entrepreneurs approach new opportunities. The world has changed from the pact-based employment of the 20th century, requiring active investment in yourself to meet the flattening forces of globalization and automation. In this book, Reid Hoffman, founder of LinkedIn, and Ben Casnocha, entrepreneur, lay out a framework for what a start up of you might look like. In this new world, you need to . | press your competitive advantage via your assets, aspirations, and the market realities, | develop a Plan A, Plan B, and Plan Z, | build a network of allies and second and third degree connections, | put yourself in position to take advantage of serendipity and breakout opportunities, and | take calculated risks to increase opportunities for learning and experience as well as the breadth and reach of your network | . ",
    "url": "/notes/business_books/the-startup-of-you#book-summary",
    
    "relUrl": "/notes/business_books/the-startup-of-you#book-summary"
  },"853": {
    "doc": "The Startup of You",
    "title": "Thoughts",
    "content": "The book isn’t the worst – it’s well-written enough, and the lessons distilled are likely useful. Any book that references David Foster Wallace and then Jonathan Franzen has my attention. Like any of these books written by Silicon Valley vets, though, it reads either as ad copy for their companies or as a mythology of the Silicon Valley ethos, or worse, both. Go figure the founder of LinkedIn is espousing the importance of networking and what’s more, all that networking can be achieved on LinkedIn! Hoffman calls this book his “gift back to society”, which feels pretentious, and perpetuates that mythologization of Silicon Valley practices ways of life. All of these Silicon Valley vets live in this incestuous petri dish of collaboration and poaching, and the best us poor schlubs languishing in the backwaters of the country can do is to prostrate at the foot of the Mount Olympus of business that is Silicon Valley. Just be more like us, they say, and here’s the manual, for a low fee of $15 bucks. It’s informational multilevel marketing. One of the tidbits of advice is that you should be “receiving or making one introduction a month”, which frankly who has the time for? Professional networks are exceptionally powerful, and I have received several opportunities because I kept in contact with folks and was a generally pleasant person to work with. And maybe that’s all networking advice needs to be: keep in touch and don’t be an asshole. This all might not be fair though. This book does have some decent advice. Like always be learning. And maximize your opportunities. And leverage the people you know to learn and find new opportunities. It just doesn’t say anything new, which is par for the business book genre. ",
    "url": "/notes/business_books/the-startup-of-you#thoughts",
    
    "relUrl": "/notes/business_books/the-startup-of-you#thoughts"
  },"854": {
    "doc": "The Thousand Autumns of Jacob de Zoet",
    "title": "The Thousand Autumns of Jacob de Zoet",
    "content": " ",
    "url": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet",
    
    "relUrl": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet"
  },"855": {
    "doc": "The Thousand Autumns of Jacob de Zoet",
    "title": "Why I read this book",
    "content": ". I’ve read two other David Mitchell novels, Ghostwritten and Cloud Atlas, and David Mitchell can craft a narrative and weave a sentence. He might be my current favorite author writing in English, and this book is regarded by some as his best. At a certain point I’ll likely have read all his novels; he is a virtuoso and is very serious contemporary fiction. ",
    "url": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet#why-i-read-this-book",
    
    "relUrl": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet#why-i-read-this-book"
  },"856": {
    "doc": "The Thousand Autumns of Jacob de Zoet",
    "title": "One key takeaway",
    "content": ". I mentioned it above, but David Mitchell is a master. This novel sits between historical fiction and colonial novel, and is a fantastically fine entry. In many ways it recalls Forster, Orwell, Rhys, or Conrad as much as Graves or Mailer, Doctorow or Eco. If I had to align Mitchell with anyone, it might be Eco, if nothing else other than their meticulously researched worlds and ruthless ear for narrative pace. The beginning of Chapter 39, in particular, is absolutely wonderful. ",
    "url": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet#one-key-takeaway",
    
    "relUrl": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet#one-key-takeaway"
  },"857": {
    "doc": "The Thousand Autumns of Jacob de Zoet",
    "title": "How was the book",
    "content": ". Of the three novels of Mitchell’s I’ve read so far, this is my second favorite, but I generally prefer the speculation of forward-glancing “some-_when_” as opposed to the historic, and Cloud Atlas is a perfect genre storm for me: science fiction as serious literature. I don’t know if I’ve read a better writer writing today; McCarthy might be the better storyteller, the mantle of Hemingway’s terseness passing to the frontier, and Zadie Smith might be the more interesting cultural observer, the quintessential American viewer, and there might be no better than Roth at coloring the purplish bruises of injured masculinity through the last half century (although I think Updike might give him a run for his money), but there might be no finer writer qua writer than Mitchell writing today. He scratches that DFW-ian itch of a sublime crafter of sentences and a fine subduer of the finer points of humanity. Many of the stories of this novel are told not as reported speech or as narrative exposition, but rather, from the characters themselves, filled with vainglopriously boasting (we get it Fischer, you’ve made your mettle in Suriname), quiet confessions, the tumultuous and unyielding hand of fate or fortune leading all characters into the tide pool of the single European trading post in Japan. Mitchell interlaces these narratives with games of Go, sneezes, footsteps through halls, reminding the reader there is always a foreground and a background, a confided revelation surrounded by unknowing agents going about their lives. One particularly effective detail (the whole scene is a masterful showcase of Mitchell’s eye for narrative pace) is when Orito is escaping the Shiranui monastery. Knives are being sharpened by an insomniac cook. To disguise her footfalls, Orito steps in time to the metallic scrape. (261). There are also some great insults interspersed throughout. I’d like to think Mitchell unearthed these timeless beauties through research: the green-pepper-head of Ogawa’s wife, Chamberline Tomine’s face belonging on cathedral gutters. The “hominid” walk of Snitker. I think someone at some point was called a hat-stand. There are a few other wonderful themes you could spend quite a while on: . | the bi-culturality of this novel and the idea of “two worlds” colliding, past and future, Japan and Europe, new Japan and old Japan, old Europe and new Europe, etc | birth and death – the novel begins with a birth, Enomoto kills babies to gain immortality, Orito is a midwife. beyond that, the birth and death of nations, of ideas, of souls and identities | language, both characters speaking it and the way Mitchell writes it, “Bygonese” as Mitchell refers to it. Mitchell does subtle things to the way characters speak, often preserving the essence of their expression and the effect it has as opposed to a faithful rendition. Grote sounds cockney even though he is speaking Dutch. The Japanese, when speaking in Dutch to the Dutch use halting, pared down speech. | the Psalter (the book of Psalms written by King David) – another, unrelated David Mitchell has done scholarly work on the eschatological underpinnings of the book of psalms, so there is likely a fertile strand throughout the novel, Mitchell perhaps playing with the association | fate, literary determinism, and luck | genre interrogations – how does this novel resemble a colonial novel and a work of historical fiction | . ",
    "url": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet#how-was-the-book",
    
    "relUrl": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet#how-was-the-book"
  },"858": {
    "doc": "The Thousand Autumns of Jacob de Zoet",
    "title": "Any other reading",
    "content": ". Anything else David Mitchell has written: . | The Bone Clocks | Slade House | Utopia Avenue | Black Swan Green | Number9Dream | . ",
    "url": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet#any-other-reading",
    
    "relUrl": "/notes/other_books/the-thousand-autumns-of-jacob-de-zoet#any-other-reading"
  },"859": {
    "doc": "The Three Kingdoms, Vol 1, 2, and 3",
    "title": "The Three Kingdoms, Vol 1, 2, and 3",
    "content": "I’m reading the Iverson translation, but the Moss Roberts is also highly recommended. I’m going to read the first two Iverson volumes and the Moss Roberts for the third (it’s divided into four volumes, so I’ll pick it up somewhere into the third). ",
    "url": "/notes/other_books/the-three-kingdoms",
    
    "relUrl": "/notes/other_books/the-three-kingdoms"
  },"860": {
    "doc": "The Three Kingdoms, Vol 1, 2, and 3",
    "title": "Volume 1: The Sacred Oath",
    "content": "Summary here: https://randallwriting.com/three-kingdoms-chapter-summary-1/ . Chapter 27, Guan Yu the Beautiful Beard Travels a Thousand Li And Slays Six Officers at Five Passes - This would be a great movie, along the lines of Kill Bill (in fact, the plots are so similar one might’ve inspired the other). Guan Yu, separated from his oath-bound brother and leader Liu Bei, has taken up with Cao Cao, fearing his brother dead. Guan Yu keeps telling Cao Cao that he would go to Liu Bei when he finds him, but it turns out Liu Bei is with Yang Shao, Cao Cao’s rival. Guan Yu leaves at once, with Cao Cao’s passive blessing, but six officers block his path. Guan Yu, riding the unrivaled Red Hare and donning his Green Dragon Crescent Blade, smites each warrior who stands in his way to be reunited with Liu Bei, who has since departed from Yang Shao. Fun Three Kingdom’s drinking game - any time: . | a messenger is killed | a messenger is almost killed but is saved by entreaties from advisers | bouts are exchanged (like one on one duels) | some leader says “who will capture him for me” | killing a leader wins a battle | someone dies less than two sentences after being introduced | a new character is introduced and gets promoted to general in under two sentences | a new character is introduced and becomes a high-ranking strategist for another character in under two sentences | . Liu Bei really isn’t very heroic in this first volume. He mostly gets it handed to him and runs from the shelter of one powerful benefactor to another, although all the characters seem to regard him as a sleeping dragon. ",
    "url": "/notes/other_books/the-three-kingdoms#volume-1-the-sacred-oath",
    
    "relUrl": "/notes/other_books/the-three-kingdoms#volume-1-the-sacred-oath"
  },"861": {
    "doc": "The Three Kingdoms, Vol 1, 2, and 3",
    "title": "Why I read this book",
    "content": "This book is acclaimed as perhaps the greatest of the Four Greatest Classical Novels of chinese literature, and as a student of history, myth, and fiction, any further education would be impoverished were it missing this novel. ",
    "url": "/notes/other_books/the-three-kingdoms#why-i-read-this-book",
    
    "relUrl": "/notes/other_books/the-three-kingdoms#why-i-read-this-book"
  },"862": {
    "doc": "The Three Kingdoms, Vol 1, 2, and 3",
    "title": "One key takeaway",
    "content": "“Unity succeeds division and division follows unity. One is bound to be replaced by the other after a long span of time.” This sets the tone for the tragedy of this work. ",
    "url": "/notes/other_books/the-three-kingdoms#one-key-takeaway",
    
    "relUrl": "/notes/other_books/the-three-kingdoms#one-key-takeaway"
  },"863": {
    "doc": "The Three Kingdoms, Vol 1, 2, and 3",
    "title": "How was the book",
    "content": "At first, this book was really hard to follow until the general narrative is set and the main characters resolve. It is very much a court intrigue and battle heavy story, similar to Game of Thrones. You have the reluctant hero, Liu Bei (who doesn’t seem to ever win a single battle, and mostly denies any chance to seize power), the treacherous villain Cao Cao, the impetuous warrior Lu Bu, Liu Bei’s sworn brothers the incorruptible Guan Yu and the hot-headed Zhang Fei, the tyrannical Dong Zhuo, a weak and ineffectual Emperor Xian, and then like a billion advisers and petty warriors. For a 700 year old story, it holds up really well, and is one part The Iliad, another Beowulf. There is tons of concentration paid to supply lines and strategic gambits, to posturing warriors and humongous forces, to ambushes and feints, intrigue and treachery. It’s a really great story once it gets going. I can’t speak to the quality of the translation other than to say it seems well-regarded online, and this is the first translation by a native Chinese speaker, Yu Sumei. What I can say is that while this version seems well put together, I would have really enjoyed a map at the beginning, or even a few maps sprinkled throughout. During the earlier battles, it is hard to figure out who is fighting whom, and where everything is happening, especially as the names share nothing with current geography. I’ve taken a look at the other “definitive” English translation, the Moss Roberts edition. In addition to being much cheaper, I like the tone and language used in the Yu Sumei version better. For example, Moss Robert’s version has chapter 15 as “Taishi Ci and Sun Ce Fight Their Hearts Out; Sun Ce Plants His Kingdom South of the River”, whereas Yu Sumei has it as Taishi Chi Fights a Fierce Battle with Sun Ce; Sun Ce competes with the White Tiger”. Subtle, by less sappy. ",
    "url": "/notes/other_books/the-three-kingdoms#how-was-the-book",
    
    "relUrl": "/notes/other_books/the-three-kingdoms#how-was-the-book"
  },"864": {
    "doc": "The Three Kingdoms, Vol 1, 2, and 3",
    "title": "Volume 2: The Sleeping Dragon",
    "content": " ",
    "url": "/notes/other_books/the-three-kingdoms#volume-2-the-sleeping-dragon",
    
    "relUrl": "/notes/other_books/the-three-kingdoms#volume-2-the-sleeping-dragon"
  },"865": {
    "doc": "The Three Kingdoms, Vol 1, 2, and 3",
    "title": "Pronunciation Guide",
    "content": "Consonants . x - The best way to think of x is as an “sh” sound. This is not quite accurate, as “sh” is also used in Chinese and has a subtly different pronunciation. For those interested in understanding the distinction, the “sh” in Pinyin is much closer to the typical English sh, while “x” is pronounced with the tongue near the front of the mouth. c - This is a “ts” sound, NOT a k sound. Chinese also has the k sound, but it is (unsurprisingly) represented in Pinyin with a k. zh - This is most similar to an English j or hard soft g. Like with “x”, this is not quite accurate, but it’s close enough. Chinese also has another j, but (like with “x” and “sh”) it is made with the tongue closer to the front of the mouth, while zh is made with the tongue further back. This means Dong Zhuo should not be pronounced the same as “Dong Zuo”, but rather more like “Dong Juo” . q - This is basically a ch sound, though Chinese also has another “ch”. Just like “x/sh” and “j/zh”, the difference between “q” and “ch” is that q is pronounced with the tongue at the front of the mouth (almost to the point that you’re touching your front teeth with it) while ch is pronounced with the tongue much further back. Vowel Sounds . ou and uo - This is one of the more frustrating ones to hear. In Chinese, ou is pronounced the same as you pronounce the word “Oh”. On the other hand, uo does not have an English equivalent. The best I can give is the beginning of the world “woah”: essentially just the “wo”, before you transition to the “oh” sound at the end. e - This is not a long e sound, but rather a schwa – the same sound as in “uh”. a - This is a short a, as in “mama”, except when it follows a “y”, in which case it becomes the same vowel as in “men” . i - Usually, this is a long e, as in “treat”. However, it can also be the vowel sound in “her”; this happens when it follows “sh”, “zh”, “ch”, or “r”. And it has a third sound when it follows “z”, “c” and “s”, which is most similar to “uh”. (There’s no real English equivalent to this third sound.) . u - The vowel sound in “too”. ü - This one is tricky, because it’s actually different than the u above and there’s no direct English equivalent. It is similar to “u” except heavily nasalized. (Inconveniently, Lü Bu has both “u” and “ü” in his name. These are different!) . iu - Unfortunately, this is a bit different than just “i” and “u” stuck together. It is a long “e” followed by the “yo” in “yo-yo” – “ee-yo” – but glided together so it is only one syllable. ei - The vowel sound in “may” . ao - The vowel sound in “now” . ua - Adding the “u” in front of the “a” changes the “a” sound to a schwa. Sample Names . | Cao Cao - Tsow Tsow (same sound as “now”) | Liu Bei - Lee-yo Bay | Sun Jian - Swuhn Jee-en | Yuan Shao - You-en Sh-ow | Yuan Shu - You-en Shoe | Zhang Yan - Jahng Yen (“yen” like the currency) | Zheng Jiang - J-ung Jee-ahng | Dong Zhuo- Dong Joo-oh | Gongsun Zan - Gong swuhn zahn | Liu Biao- Lee-yo Bee-y-ow (just like “meow” but with a b) | Ma Teng - Mah T-uh-ng (like “tongue”) | Kong Rong- Kong Rong | He Yi - Huh Yee | Gong Du - Gong Doo | Huang Shao - Who-ahng Sh-ow | Sun Ren - Swuhn Ruhn | Zhang Fei - Jang Fey | Guan Yu - Goo-ahn Yoo | Sima Yi- Suh ma yee | Zhuge Liang - Joo guh lee-ahng | Xiahou Dun - She-ah hoe dwuhn | . ",
    "url": "/notes/other_books/the-three-kingdoms#pronunciation-guide",
    
    "relUrl": "/notes/other_books/the-three-kingdoms#pronunciation-guide"
  },"866": {
    "doc": "The Three Kingdoms, Vol 1, 2, and 3",
    "title": "Volume 3: Welcome the Tiger",
    "content": " ",
    "url": "/notes/other_books/the-three-kingdoms#volume-3-welcome-the-tiger",
    
    "relUrl": "/notes/other_books/the-three-kingdoms#volume-3-welcome-the-tiger"
  },"867": {
    "doc": "The Vanishing Half",
    "title": "The Vanishing Half",
    "content": " ",
    "url": "/notes/other_books/the-vanishing-half",
    
    "relUrl": "/notes/other_books/the-vanishing-half"
  },"868": {
    "doc": "The Vanishing Half",
    "title": "Why I read this book",
    "content": ". This was a popular book club book for 2020 and had landed on my to-read list because it promised an interesting take on race. My mother read it for her book club and lent me the copy, so I read it. ",
    "url": "/notes/other_books/the-vanishing-half#why-i-read-this-book",
    
    "relUrl": "/notes/other_books/the-vanishing-half#why-i-read-this-book"
  },"869": {
    "doc": "The Vanishing Half",
    "title": "One key takeaway",
    "content": ". The Vanishing Half is a story of twins, two halves of the same, one passing for white and the other black, and the effect this has on their self-worth and family. It is a story about what an authentic identity is, and how the selves we craft affect the lives of those around us. ",
    "url": "/notes/other_books/the-vanishing-half#one-key-takeaway",
    
    "relUrl": "/notes/other_books/the-vanishing-half#one-key-takeaway"
  },"870": {
    "doc": "The Vanishing Half",
    "title": "How was the book",
    "content": ". I had gone into this book with moderately high expectations, thinking it a “post-racial” meditation on race, where the selves we wear can be constructed from within rather than imposed from without. There is a long history of “passing” literature, often with bi-racial black women passing for white, stealing the hearts of some aristocratic white man. This has always been framed as a class issue, however, with the black woman rising from poverty to the top of the mountain, only to be discovered on the precipice of marriage. This anxiety permeates Stella’s interactions with her husband, the Apollonically handsome Blake and her daughter, Kennedy, who seems to bear the cross of her mother’s denial of identity with her own listlessness. She aspires to be an actress, like mother like daughter. The novel meandered far too often, leaning too heavily on its premise than its actual character development. We are told the story in third-person, and from such we only are allowed fly-byes to the character’s emotional states. There is a trans character, but other than saying ‘baby’ too often and struggling with hiding his physical existence, the character is given no room to breath, to live and grow. It frankly feels token, as if its another box top check on the intersectionality list. None of the characters do much of anything at all; all dramatic development is driven by random encounters. Kennedy and Jude meeting at a play, Jude and Stella and Kennedy meeting at an event Jude was catering, Early being given an assignment to track down his adolescent crush. It all makes you question the agency any of these characters have, despite the apparent ability to craft their own identity, an ability that is expressly denied those who can’t pass. Beyond that, the dialogue can’t make up its mind between real speech and literary speech, the book jumps forward and backward in time for no particular reason, and nothing in particular happens but time moves on. I just did not enjoy this book at all. ",
    "url": "/notes/other_books/the-vanishing-half#how-was-the-book",
    
    "relUrl": "/notes/other_books/the-vanishing-half#how-was-the-book"
  },"871": {
    "doc": "The Vanishing Half",
    "title": "Any other reading",
    "content": ". | Passing For White, a Literary History | Passing, by Nella Larsen, 1929. | . ",
    "url": "/notes/other_books/the-vanishing-half#any-other-reading",
    
    "relUrl": "/notes/other_books/the-vanishing-half#any-other-reading"
  },"872": {
    "doc": "The Witcher Series",
    "title": "The Witcher Series",
    "content": " ",
    "url": "/notes/other_books/the-witcher-series",
    
    "relUrl": "/notes/other_books/the-witcher-series"
  },"873": {
    "doc": "The Witcher Series",
    "title": "The Last Wish (1)",
    "content": " ",
    "url": "/notes/other_books/the-witcher-series#the-last-wish-1",
    
    "relUrl": "/notes/other_books/the-witcher-series#the-last-wish-1"
  },"874": {
    "doc": "The Witcher Series",
    "title": "Summary",
    "content": "The Last Wish contains seven short stories interspersed within a frame story: Geralt of Rivia is resting within a temple after being severely injured undoing the curse of King Foltest’s daughter who has become a striga. The Witcher, the first story, concerns Geralt taking on a contract to reverse the curse that has been placed on Foltest’s daughter, who was born as result of an incestuous relationship with his sister, turning her into a striga who now terrorizes the town. The story ends with Geralt in Melitele’s temple. The second story, The Lesser Evil, Geralt arrives in Blaviken seeking a reward after killing a kikimora. The town’s alderman has no interest in giving Geralt a reward for killing the monster, but does point him in the direction of the local wizard who might have use of the monster’s innards. Geralt recognizes the wizard as Stegobor, after which the wizard tells him he is being pursued and he needs Geralt’s help. Geralt says he won’t kill this pursuer, as he doesn’t want to choose between two evils. Eventually, Geralt encounters this pursuer, called Renfri. Renfri lies about leaving town and Geralt realizes she is going to massacre the people of Blaviken to draw out Stegobor. Geralt goes to the marketplace to stop it and ends up killing all of Renfri’s men. This earns him the pejorative of the “Butcher of Blaviken” and an expulsion from the town. Next up is The Edge of the World, where we meet Dandelion, the bard. Geralt is looking for work, and a local town has a sylvan, a rare and intelligent creature, causing mischief. Geralt encounters the creature, who is working on behalf of the elves, and is tied up and almost killed by Filavandrel, a leader of the elves, before he is bailed out by the Queen of the Fields. In The Last Wish, Geralt and Dandelion fish up a djinn’s bottle. The djinn does some serious damage to Dandelions throat and vocal chords, a near death sentence for a bard, forcing Geralt to seek out immediate aid. This leads him to a local sorceress, Yennefer of Vengerberg, who offers help, but secretly wants to capture the djinn to harness its immense power. Things go poorly, and Geralt realizes that he, not Dandelion, is the master of the djinn, and in an effort to release the djinn before it kills Yennefer, who he is in love with, he wishes their fates bound to each other in order to save Yennefer. In the final story, The Voice of Reason, which is the framing story and is interspersed throughout, Geralt and Dandelion are getting expelled from the temple. He embarrasses a knight’s guard who challenges him to a duel in which Geralt is instructed not to hit the knight with his sword. Geralt parries so forcefully the knight hits himself with his own sword, and Geralt leaves unscathed. ",
    "url": "/notes/other_books/the-witcher-series#summary",
    
    "relUrl": "/notes/other_books/the-witcher-series#summary"
  },"875": {
    "doc": "The Witcher Series",
    "title": "Thoughts",
    "content": "I’ve always heard mixed reviews for the Witcher source material. Some claim the writing is mostly dialogue, and ham-handed at that. Some claim it is the weakest within the big trifecta of Witcher material between the television show and the video games. My first exposure to this universe was via the video games, then the television show, and finally, the books, starting with The Last Wish. I haven’t read any of the other books, so my thoughts are reserved to this first book in the series. It’s hard to judge the book on its sole merits. I have two fully realized visions of Geralt across the video game and television show. I can hear his metallic gravel voice in my head when I read his lines. You can’t help but triangulate this source material with those other dominant forms of media. I’ve put in over 100 hours with the video games, and another 20 or so with the show, and what I can say about the book is that it is enriching that experience. I really enjoy this universe, the writing generally keeps out of the way, and it has the sort of appeal of a Knights of the Round Table type of mythopoetics that makes its generally transparent plots breeze by. Geralt is Lancelot via Grimm’s Fairy Tales, and if you are looking for a light read and enjoy this universe, these books are worth a perusal; fast, easy, and really shades the margins of the video game and television show. ",
    "url": "/notes/other_books/the-witcher-series#thoughts",
    
    "relUrl": "/notes/other_books/the-witcher-series#thoughts"
  },"876": {
    "doc": "Think Again",
    "title": "Think Again",
    "content": ". | Individual Rethinking | Interpersonal Rethinking . | Paul Graham’s Hierarchy of Disagreement | motivational interviewing | . | Collective Rethinking . | learning cultures | . | Two Key Takeaways | Brief Thoughts | . | first-instinct fallacy - most test takers change answers from wrong to right, but the ones that you change from right to wrong loom larger in the memory, leading to the perception that your first instinct is more often right | seizing and freezing - we prefer comfort of conviction to the discomfort of doubt – sticking to our guns | . ",
    "url": "/notes/business_books/think-again",
    
    "relUrl": "/notes/business_books/think-again"
  },"877": {
    "doc": "Think Again",
    "title": "Individual Rethinking",
    "content": "Four Modes of Thinking . | preacher - when our sacred beliefs are in jeopardy: we deliver sermons to protect and promote our ideals | prosecutor - when we recognize flaws in other people’s reasoning: we marshal arguments to prove them wrong and win our case | politician - politician mode when we’re seeking to win over an audience: we campaign and lobby for the approval of our constituents | scientist - when we’re searching for the truth: we run experiments to test hypotheses and discover knowledge | . | confirmation bias - we see what we expect to see | desirability bias - we see what we want to see | rethinking goes in a cycle, starting with intellectual humility, then doubt from our shortcomings, curiosity to fill in those gaps, then finally discovery of missing knowledge Anton’s syndrome - deficit of self-awareness where a person is oblivious to a physical disability but otherwise is cognitively fine | armchair quarterback vs impostor syndrome – an over-abundance of confidence vs. a lack of it . | impostor syndrome can force us to work harder, smarter, and make us better learners | . | Dunning-Kruger effect - when we lack competence we tend to brim with overconfidence | . The most effective leaders score high in both confidence and humility. Although they have faith in their strengths, they’re also keenly aware of their weaknesses. They know they need to recognize and transcend their limits if they want to push the limits of greatness. (48) . | Murray Davis paper That’s Interesting argues that ideas survive because they are interesting | totalitarian ego - keeps out threatening information to identity | How much rethinking is necessary? – superforecasters changed their assessments of probability ~4 times compared to 2 for average forecasters | . Two Types of Conflict . | relationship conflict - personal, emotional clashes that are often filled with animosity | task conflict - clashes about ideas and opinions | . | Many successful teams have task conflict, want to avoid relationship conflict | . HIPPO - Highest Paid Person’s Opinion . Experiments show that simply framing a dispute as a debate rather than as a disagreement signals that you’re receptive to considering dissenting opinions and changing your mind, which in turn motivates the other person to share more information with you. A disagreement feels personal and potentially hostile; we expect a debate to be about ideas, not emotions. Starting a disagreement by asking, “Can we debate?” sends a message that you want to think like a scientist, not a preacher or a prosecutor—and encourages the other person to think that way, too. (91) . ",
    "url": "/notes/business_books/think-again#individual-rethinking",
    
    "relUrl": "/notes/business_books/think-again#individual-rethinking"
  },"878": {
    "doc": "Think Again",
    "title": "Interpersonal Rethinking",
    "content": ". | How can we convince others? | many weak arguments dilute the strength of a single strong argument | . We can demonstrate openness by acknowledging where we agree with our critics and even what we’ve learned from them. Then, when we ask what views they might be willing to revise, we’re not hypocrites. There are times when preaching and prosecuting can make us more persuasive. Research suggests that the effectiveness of these approaches hinges on three key factors: how much people care about the issue, how open they are to our particular argument, and how strong-willed they are in general. If they’re not invested in the issue or they’re receptive to our perspective, more reasons can help: people tend to see quantity as a sign of quality. The more the topic matters to them, the more the quality of reasons matters. It’s when audiences are skeptical of our view, have a stake in the issue, and tend to be stubborn that piling on justifications is most likely to backfire. If they’re resistant to rethinking, more reasons simply give them more ammunition to shoot our views down. (110) . [t]he person most likely to persuade you to change your mind is you. (113) . What expert negotiators do - Rackham’s Study . | map out areas of agreement | present fewer, but stronger arguments | avoid defend-attack spirals | ask more questions rather than declarative statements | comment on feelings of the process and understand other side’s feelings | . Paul Graham’s Hierarchy of Disagreement . | important to get folks to think about arbitrariness of their animosity – not positive qualities of rivals, to change minds | . As a general rule, it’s those with greater power who need to do more of the rethinking, both because they’re more likely to privilege their own perspectives and because their perspectives are more likely to go unquestioned. In most cases, the oppressed and marginalized have already done a great deal of contortion to fit in. (140) . motivational interviewing . starts with an attitude of humility and curiosity, involves three key techniques: . | ask open-ended questions | engage in reflective listening | affirm the person’s desire and ability to change | sustain talk - commentary about maintaining the status quo | change talk - referencing a desire, ability, need, or commitment to make adjustments | . Many communicators try to make themselves look smart. Great listeners are more interested in making their audiences feel smart. (158) . | inverse charisma - a way of describing a great listener | . ",
    "url": "/notes/business_books/think-again#interpersonal-rethinking",
    
    "relUrl": "/notes/business_books/think-again#interpersonal-rethinking"
  },"879": {
    "doc": "Think Again",
    "title": "Collective Rethinking",
    "content": ". | binary bias - basic human tendency to seek clarity and closure by simplifying a complex continuum into two categories – an antidote is complexifying | when you force someone on the fence to make a decision, the emotional, political, and economic pressures tilt in favor of disengaging or dismissing a problem | . fact-checker guidance: . | interrogate information instead of simply consuming it | reject rank and popularity as a proxy for reliability | understand that the sender of information is not always its source | . learning cultures . | essential to establish accountability and psychological safety | key question: “How do you know?” | need to build accountability for teams to think past just results, as that incentivizes confidence in bad strategy and maintaining status quo | . [C]hanging the culture of a team is more feasible. It starts with modeling the values we want to promote, identifying and praising others who exemplify them, and building a coalition of colleagues who are committed to making the change. (212) . | escalation of commitment - when we double down on resource commitment to a project or plan that is not going well – “ah, I just need to work harder!” | identity foreclosure - settle prematurely on a sense of self without enough due diligence and close our mind to alternative selves | . FDR quote – “the country demands bold, persistent experimentation”. Love this, should use it. ",
    "url": "/notes/business_books/think-again#collective-rethinking",
    
    "relUrl": "/notes/business_books/think-again#collective-rethinking"
  },"880": {
    "doc": "Think Again",
    "title": "Two Key Takeaways",
    "content": ". | Four methods of thinking and communication: preacher, prosecutor, politician, and scientist. Useful heuristic for the way we approach our external communication and how we keep open minds. Confirmation bias is real and affects even those who spend their lives thinking about it, so maintaining scientific thinking, complete with the rigor of hypothesis-experiment-adjust-repeat loops, is essential to learning. | Ask much more frequently, how do you know that? Also, this concept of motivational interviewing, which is similar to deep canvassing and seems to have similar methodologies and results. Use the tenets when | . ",
    "url": "/notes/business_books/think-again#two-key-takeaways",
    
    "relUrl": "/notes/business_books/think-again#two-key-takeaways"
  },"881": {
    "doc": "Think Again",
    "title": "Brief Thoughts",
    "content": "Rating: 7/10 Self-help books fall along a gradient of scientific rigor. Fortunately, Think Again makes its case for rethinking by bolstering its argument with studies, presented as evidence rather than justification, and strips out the simplistic geometric images of most self-help books that, although make good slideshow presentations for selling a consultancy framework, often deceive or over-simplify. Grant takes your time more seriously (although he doesn’t take himself too seriously, peppering the book with humorous comics and images). The book is a compelling toolset for personal rethinking, although there might’ve been some room to more thoroughly declare an epistemology and especially how that is tied up with our identities. ",
    "url": "/notes/business_books/think-again#brief-thoughts",
    
    "relUrl": "/notes/business_books/think-again#brief-thoughts"
  },"882": {
    "doc": "Tomorrow, and Tomorrow, and Tomorrow",
    "title": "Tomorrow, and Tomorrow, and Tomorrow",
    "content": " ",
    "url": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow",
    
    "relUrl": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow"
  },"883": {
    "doc": "Tomorrow, and Tomorrow, and Tomorrow",
    "title": "the good",
    "content": "A book about video games, and not told in a patronizing way. There are explanations of video game terminology, and this isn’t Hackers, but you can see the influence. Despite Jojo Moyes endorsement on the jacket, this isn’t a romance novel per se, although it does end happily. Sam and Sadie are suitably frustrating and this isn’t a Hallmark book. The english nerd in me enjoyed the morsels of literary allusions (any book that sprinkles in some J Alfred Prufrock and his peach proclivity is ok in my estimation). ",
    "url": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow#the-good",
    
    "relUrl": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow#the-good"
  },"884": {
    "doc": "Tomorrow, and Tomorrow, and Tomorrow",
    "title": "the bad",
    "content": "I feel like some of the more potent themes, multi-culturalism, identity, narrative technique, etc. could’ve been a bit more developed. It’s a book about games, but things like cultural appropriation are brushed off as anachronisms, and what you ultimately have is a novel about three immensely successful game designers forming some not-so-intricate love triangle. ",
    "url": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow#the-bad",
    
    "relUrl": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow#the-bad"
  },"885": {
    "doc": "Tomorrow, and Tomorrow, and Tomorrow",
    "title": "the ugly",
    "content": "Not much ugly in this one. ",
    "url": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow#the-ugly",
    
    "relUrl": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow#the-ugly"
  },"886": {
    "doc": "Tomorrow, and Tomorrow, and Tomorrow",
    "title": "the verdict",
    "content": "Enjoyable read that moved right along in its pacing and narrative. I can see why it’s had the runaway success it has – not challenging in a deep way, but challenging enough to feel like you aren’t reading cotton candy. ",
    "url": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow#the-verdict",
    
    "relUrl": "/notes/other_books/tomorrow-and-tomorrow-and-tomorrow#the-verdict"
  },"887": {
    "doc": "Ultralearning",
    "title": "Ultralearning",
    "content": " ",
    "url": "/notes/educational_books/ultralearning",
    
    "relUrl": "/notes/educational_books/ultralearning"
  },"888": {
    "doc": "Ultralearning",
    "title": "ultralearning",
    "content": ". | strategy for acquisition of skills and knowledge that is both intense and self-directed | . ",
    "url": "/notes/educational_books/ultralearning#ultralearning-1",
    
    "relUrl": "/notes/educational_books/ultralearning#ultralearning-1"
  },"889": {
    "doc": "Ultralearning",
    "title": "skill polarization",
    "content": ". | high skill and low skill jobs replace medium skill jobs, driving income inequality that increases at the extremes | . ",
    "url": "/notes/educational_books/ultralearning#skill-polarization",
    
    "relUrl": "/notes/educational_books/ultralearning#skill-polarization"
  },"890": {
    "doc": "Ultralearning",
    "title": "Metalearning",
    "content": ". | how we think about learning itself | the map we draw for our learning | answer the why, what, and how of learning: . | why: understanding motivation, can be driven through expert interviews to vet your project merits | what: knowledge and abilities required to be successful, can write concepts, facts, and procedures to be learned | how: resources, environment, method for learning, can benchmark against path that already exists (e.g., curricula) or emphasize/exclude by amplifying that which enables goals, omitting what doesn’t | . | . ",
    "url": "/notes/educational_books/ultralearning#metalearning",
    
    "relUrl": "/notes/educational_books/ultralearning#metalearning"
  },"891": {
    "doc": "Ultralearning",
    "title": "Focus",
    "content": ". | ability to concentrate, can be broken up into starting, sustaining, and optimizing | procrastination: . | recognize when you are doing it | get over initial unpleasantness of starting | pomodoro technique: 25 minutes on with 5 minute break | . | distraction: . | 2 states of focus: delivery practice and flow | large periods of focus might not be optimal, ~1 hour might be best | multitasking is not good for learning | environment, task, and mind are all sources of distraction | . | sustaining: . | need right levels of arousal based on task at hand | . | . ",
    "url": "/notes/educational_books/ultralearning#focus",
    
    "relUrl": "/notes/educational_books/ultralearning#focus"
  },"892": {
    "doc": "Ultralearning",
    "title": "Directness",
    "content": ". | learning being tied to situation or context you want to use your learning in | transference - learn something in one context and use in another | formal discipline theory - now defunct idea that brain is a muscle and general training has mental benefits | ways to induce directness: . | projects | immersion | simulation | overtraining | . | . ",
    "url": "/notes/educational_books/ultralearning#directness",
    
    "relUrl": "/notes/educational_books/ultralearning#directness"
  },"893": {
    "doc": "Ultralearning",
    "title": "Drill",
    "content": ". | isolate parts of a skill to focus on, then integrate those parts to the whole | practice skill directly, analyze skill and break into components to practice individually, then back to direct practice and integrate | . ",
    "url": "/notes/educational_books/ultralearning#drill",
    
    "relUrl": "/notes/educational_books/ultralearning#drill"
  },"894": {
    "doc": "Ultralearning",
    "title": "Retrieval",
    "content": ". | trying to recall concepts from memory | it is better to try and recall something from memory (self-testing) than passively reading notes or creating a mental concept map | judgments of learning - how well we think we know something | desirable difficulty - retrieval is better learning if act of retrieval is successful | forward testing effect - retrieval helps general learning in the future as well | methods for retrieval: . | flash cards: ideal for cue/response | free recall: remember as much as you can | question book: take notes as questions to be answered in review | self-generated challenge: create a challenge for later | closed book learning: draw concept map without the book | . | . ",
    "url": "/notes/educational_books/ultralearning#retrieval",
    
    "relUrl": "/notes/educational_books/ultralearning#retrieval"
  },"895": {
    "doc": "Ultralearning",
    "title": "Feedback",
    "content": ". | more feedback isn’t always better – effect on motivation is key | feedback aimed at ego is less effective | best feedback is “informative and useful” | outcome feedback: binary feedback, are you doing it right or wrong, least granular | informational feedback - tells you what you are doing wrong but not how to fix it | corrective feedback - tells you what you were doing wrong and how to fix it . | usually only available through coach or mentor | . | concentrate on the signal over the noise | assess how feedback is affecting learning rate (meta-feedback) | high-intensity, rapid feedback might be occasionally useful | . ",
    "url": "/notes/educational_books/ultralearning#feedback",
    
    "relUrl": "/notes/educational_books/ultralearning#feedback"
  },"896": {
    "doc": "Ultralearning",
    "title": "Retention",
    "content": ". | forgetting curve - discovered by Ebbinghaus, initial forgetting spikes immediately after learning and lessens over time | theories on why we forget: . | decay: memories disappear over time | interference: some memories overwrite others | forgotten cues: we forget the cue to bring the memory up | . | ways to retain memories: . | spaced repetition: lots of science behind this, helpful for cue/response -&gt; spreading retrieval over time leads to more effective learning | proceduralization: automatic memories are far more durable, so learn important, widely needed skills to automatic memories | overlearning: practice beyond what is necessary to succeed | mnemonics: access memories via keyword or spatial map (like memory palace) - a bit more brittle and limited in use cases than it appears | . | . ",
    "url": "/notes/educational_books/ultralearning#retention",
    
    "relUrl": "/notes/educational_books/ultralearning#retention"
  },"897": {
    "doc": "Ultralearning",
    "title": "Intuition",
    "content": ". | having enough experience to be able to run new evidence against mental models to make predictions about how things work | methods for building intuition: . | don’t give up on problems too easily | use concrete examples to check learning | ask a lot of questions | take time to actually prove things | think about how you would convey a concept to someone who doesn’t know, or, if it’s a problem, explain how you would solve it and why that solution makes sense | . | . ",
    "url": "/notes/educational_books/ultralearning#intuition",
    
    "relUrl": "/notes/educational_books/ultralearning#intuition"
  },"898": {
    "doc": "Ultralearning",
    "title": "Experimentation",
    "content": ". | need to experiment to find your own path, differentiate yourself in master, and lessen the stagnation of skills after learning the basics | you can experiment with: . | methods, resources, &amp; materials for learning | what to learn after the basics | what style to use | . | growth vs. fixed mindset - growth mindset believes that humans can improve their inherent ability to learn, while fixed says that mental capacity is fixed | some ways to experiment: . | copy, then create | A/B testing of methods | introducing new constraints | hybrid of skills (e.g., communication and programming) | pursue the extremes | . | . ",
    "url": "/notes/educational_books/ultralearning#experimentation",
    
    "relUrl": "/notes/educational_books/ultralearning#experimentation"
  },"899": {
    "doc": "Unix: A History and a Memoir",
    "title": "Unix: A History and a Memoir",
    "content": "A fascinating view into the creation of the most important Operating System in history. Kernighan’s prose reads a bit like Feynman’s: terse, accurate, slightly puckish. Amazing how much the researching team at Bell Telephone Labs, the research arm of AT&amp;T, contributed to the history of computing. 9 Nobel Prizes, 5 Turing Awards. Also amazing to think a conglomerate as dispassionately and militantly monopolistic as AT&amp;T did not try and profiteer off the creation of Unix, at least not until too late. Bell Labs was one of those perfect petri dishes a la Bletchley Park or Menlo Park or Los Alamos Laboratories where, as Kernighan puts it, “a handful of talented people with good ideas and a supportive environment do change the world with their inventions” (179). It actually makes me melancholic that I haven’t had a chance to work in an environment like that. Kernighan populates the pages here with the intimidating genius that went into the creation of Unix and so many of the underlying tools (awk, make, C, sed, vi, TCP/IP, etc.) and philosophies (the Unix philosophy, modularization, componentization) that we still use today. Ken Thompson (inventor of Unix), Dennis Ritchie (inventor of C), Doug McIlroy, Brian Kernighan himself, Eric Schmidt (author of Lex and eventual CEO of Google) all loom larger than life. It would have been an amazing experience to have been a part of. One thing that is striking (and there are so many throughout the book) is the emphasis on documentation and writing – so many Bell Labs researchers were also excellent documenters, and the documentation that came out of Bell Labs is as foundational as the tech. Kernighan mentions that everyone working in unit 1127, where Unix was invented and innovated, took documentation seriously, and there are so many important books to have emanated from that research institution. If nothing else, I need to take my documentation and technical writing seriously, eschewing literary stunt pilotry and adornments. Stick to the facts and minimize interpretations. Also interesting questions: . | How did so much innovation happen in one place? Was it just smart people, a long leash, and oodles of money? Or is there something else? | This type of research mill doesn’t exist anymore, does it? And certainly not in a way that is intertwined with capitalistic gain. Most of the inventors here didn’t have the radical economic success of newer “visionaries” who were also product gurus. | . More to read: . | Gertner’s Idea Factory about Bell Labs more generally, which was doing a ton of additional innovation. | Steven Levy’s Hackers about the history of the “computer revolution” | . ",
    "url": "/notes/educational_books/unix-a-history-and-a-memoir",
    
    "relUrl": "/notes/educational_books/unix-a-history-and-a-memoir"
  },"900": {
    "doc": "Where Good Ideas Come From",
    "title": "Where Good Ideas Come From",
    "content": " ",
    "url": "/notes/educational_books/where-good-ideas-come-from",
    
    "relUrl": "/notes/educational_books/where-good-ideas-come-from"
  },"901": {
    "doc": "Where Good Ideas Come From",
    "title": "Notes",
    "content": "the adjacent possible . Adjacent, i.e., nearby, possibilities constantly emerge in a multitude of settings for a multitude of entities. When these possibilities are explored, yet new possibilities emerge. The concept of the “adjacent possible” was introduced by Stuart Kauffman (1996; 2000) in evolutionary biology and complex adaptive systems to explain how biological evolution can be seen as exploration and actualization of what is adjacent possible, i.e., available at hand. The concept has now disseminated into a wide range of research fields including economy, innovation studies, technological evolution, cultural evolution, learning processes, recommender systems, and design studies. The “adjacent possible” can be defined as “the set of possibilities available to individuals, communities, institutions, organisms, productive processes, etc., at a given point in time during their evolution” (Loreto 2015, p. 9). The concept of the “adjacent possible” is useful for understanding how new possibilities emerge, and how they are constrained, discovered, explored, actualized, developed, reconfigured, designed, and so on, in an interplay between what is actual and what is possible for specific entities in specific settings. common-place book . | book where you put everything you’ve read and thought, and you use this to synthesize new ideas, forcing serendipity | common in the 18th and 19th century – e.g. Darwin and others | . Diverse, horizontal networks were, in Reuf’s analysis, three times more innovative than uniform, vertical networks. (166) . third place . | sociologist Ray Oldenburg talks about the third place, not work, not home, that is a tide pool of learning and innovation | . exaptation . | a trait that evolves to serve another function over time | e.g. feathers, which began as temperature regulation but then led to the ability to fly | . innovation prospers when ideas can serendipitously connect and recombine with other ideas, when hunches can stumble across other hunches that successfully fill in their blanks (123) . the most productive tool for generating good ideas remains a circle of humans at a table, talking shop (61) . genius requires genres […] Genres supply a set of implicit rules that have enough coherence that traditionalists can safely play inside them, and more adventurous artists can confound our expectations by playing with them. (191) . ",
    "url": "/notes/educational_books/where-good-ideas-come-from#notes",
    
    "relUrl": "/notes/educational_books/where-good-ideas-come-from#notes"
  },"902": {
    "doc": "Where Good Ideas Come From",
    "title": "Summary",
    "content": "This book starts with Darwin’s great idea for evolution, and traces the environment in which great ideas arise. Firstly, great ideas are only those that are adjacent to what is currently possible. Babbage’s Analytical Engine was impossible in the early 19th century because it was such a quantum leap from anything else that existed at the time. To build that adjacent possible, you need to be within liquid networks that expose you to new, diverse thinking. From there, you can start with a slow hunch, the germ of a great new idea, and iterate on it over and over. Eureka moments are truly rare, as most great ideas percolate in the back of your subconscious for some time before popping miraculously to the surface. Within this liquid networks, serendipity conspires and new ideas recombine with slow hunches to build a great idea. Every good idea needs to be iterated on, and error is a honing device to make ideas stronger. Sometimes, you might have ideas that were once thought to be utilized for a certain application, but can be exapted to a new use, like vacuum tubes were for boolean algebra via logic gates. Finally, you need an environment, or a platform, where all these ideas can intermingle. Perhaps a city, or a social media site, or a salon in the 18th century, it doesn’t matter. Those, Johnson posits, are the ingredients to create good ideas. Johnson concludes the book by building a four quadrant graph and positioning all key inventions of the last 200 years within that plot. What he finds is that within the “fourth quadrant”, as he calls it, an environment that is not market-driven but are the result of networked environments (and not the product of a lone genius reclusively inventing), we find the most prominent and numerous inventions within the last 100 years. ",
    "url": "/notes/educational_books/where-good-ideas-come-from#summary",
    
    "relUrl": "/notes/educational_books/where-good-ideas-come-from#summary"
  },"903": {
    "doc": "Where Good Ideas Come From",
    "title": "Thoughts",
    "content": "fascinated by where ideas come from. you look at some of the greatest inventions or breakthroughs in the last 100 years, they seem to come out of these melting pots: bletchly park, or bell labs, or building 20 at MIT, or Los Alamos and the Manhattan Project, or the Tech Model Railroad Club at MIT. They all follow a similar pattern, stick a bunch of really smart interdisciplinary people in a place and let them think about stuff. maybe im a hegelian on this – any progress comes from conflict, either with other ideas or you from the past. I need to write and off-board my thoughts more often. the self isn’t a continuity despite feeling like it, and I can’t be forced to directly reckon with my past thinking unless I persist it in some external repository. Then, past me can be the thesis to present me’s antithesis, and build a new synthesis. I like the take on the city as a spark for innovation. I do wonder if cities are the sites of all innovation – when you look at most folks who came to Bell Labs for example, they were predominantly from farms and Bell Labs wasn’t located deep within a city. ",
    "url": "/notes/educational_books/where-good-ideas-come-from#thoughts",
    
    "relUrl": "/notes/educational_books/where-good-ideas-come-from#thoughts"
  },"904": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "content": ". | 1: To Sleep… | 2: Caffeine, Jet Lag, and Melatonin: Losing and Gaining Control of Your Sleep Rhythm . | Got Rhythm? | My Rhythm Is Not Your Rhythm | Melatonin | Have Rhythm, Won’t Travel | Sleep Pressure and Caffeine | In Step, Out of Step | Am I Getting Enough Sleep? | . | 3: Defining and Generating Sleep . | Self-Identifying Sleep | Two Types of Sleep | The Sleep Cycle | How Your Brain Generates Sleep | . | 4: Ape Beds, Dinosaurs, and Napping with Half a Brain: Who Sleeps, How Do We Sleep, and How Much? . | Who Sleeps | One of These is Not Like the Other | To Dream Or Not To Dream | If Only Humans Could | Under Pressure | How Should We Sleep? | We Are Special | . | 5: Changes in Sleep Across the Life Span . | Sleep Before Birth | Childhood Sleep | Sleep and Adolescence | Sleep in Midlife and Old Age | . | 6: Your Mother and Shakespeare Knew: The Benefits of Sleep for Your Brain . | Sleep-The-Night-Before Learning | Sleep-The-Night-After Learning | Sleep to Forget? | Sleep for Other Types of Memory | . | 7: Too Extreme for the Guinness Book of World Records: Sleep Deprivation and the Brain | 8: Cancer, Hear Attacks, and a Shorter Life: Sleep Deprivation and the Body | 9: Routinely Psychotic: REM-Sleep Dreaming | 10: Dreaming as Overnight Therapy | 11: Dream Creativity and Dream Control | 12: Things That Go Bump in the Night: Sleep Disorders and Death Caused by No Sleep . | Somnambulism | Insomnia | Narcolepsy | Fatal Familial Insomnia | Sleep Deprivation Experiments with Rats | . | 13: iPads, Factory Whistles, and Nightcaps: What’s Stopping You From Sleeping? . | Modern Light | Alcohol | Temperature | Industry | . | 14: Hurting and Helping Your Sleep: Pills vs. Therapy . | Cognitive Behavioral Therapy for Insomnia | . | 15: Sleep and Society: What Medicine and Education Are Doing Wrong; What Google and NASA Are Doing Right . | Business | Inhumane Use of Sleep Loss | Education | Healthcare | . | 16: A New Vision for Sleep in the Twenty-First Century | . ",
    "url": "/notes/educational_books/why-we-sleep",
    
    "relUrl": "/notes/educational_books/why-we-sleep"
  },"905": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "1: To Sleep…",
    "content": ". | Two-thirds of adults throughout all developed nations fail to obtain the recommended eight hours of nightly sleep. | The shorter your sleep, the shorter your life span. | Human beings are the only species that will deliberately deprive themselves of sleep without legitimate gain. | The physical and mental impairments caused by one night of bad sleep dwarf those caused by an equivalent absence of food or exercise. | Sleep is the single most effective thing we can do to reset our brain and body health each day. | . ",
    "url": "/notes/educational_books/why-we-sleep#1-to-sleep",
    
    "relUrl": "/notes/educational_books/why-we-sleep#1-to-sleep"
  },"906": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "2: Caffeine, Jet Lag, and Melatonin: Losing and Gaining Control of Your Sleep Rhythm",
    "content": "Two factors that determine when we want to sleep and when we want to be awake. | The suprachiasmatic nucleus: An internal 24-hour clock located deep within your brain. | Adenosine: A chemical substance that builds up in your brain and creates a “sleep pressure.” | . Got Rhythm? . | All living things have a natural circadian rhythm that helps us keep time. We are not dependent on external cues, such as sunlight. | Humans circadian rhythm is actually slightly longer than 24 hours. | Core body temperature is one of those 24-hour rhythms governed by the suprachiasmatic nucleus. | . My Rhythm Is Not Your Rhythm . | 40% of the population reaches peak wakefulness in the morning. | 30% are more energized in the evening. | 30% fall somewhere in between, with a slight leaning toward the evening. | An adult’s owlness or larkness, also known as their chronotype, is strongly determined by genetics. | Our society’s work schedule puts night owls at a disadvantage and favors those who are more energized in the morning. | . Melatonin . | The suprachiasmatic nucleus instructs the release of melatonin into the bloodstream after dusk. | Melatonin helps regulate the timing of when sleep occurs by systemically signaling darkness throughout the organism. | Melatonin has little influence on the generation of sleep itself. | Melatonin is not a powerful sleeping aid in and of itself. | . Have Rhythm, Won’t Travel . | Jet lag is caused by speeding through time zones without letting your biological clock catch up. | You feel tired and sleepy during the day, and unable to sleep solidly at night. | Melatonin can sometimes help trick your brain into believing it’s nighttime and help counteract the effects of jet lag. | . Sleep Pressure and Caffeine . | Adenosine is a chemical that builds up in your brain throughout the day. It increases your desired to sleep (sleep pressure). | Caffeine is the most widely used (and abused) psychoactive stimulant in the world. | Caffeine is the second most traded commodity on the planet, after oil. | Caffeine works by successfully battling with adenosine for the privilege of latching on to adenosine welcome sites—or receptors—in the brain. | By hijacking and occupying these receptors, caffeine blocks the sleepiness signal normally communicated to the brain by adenosine. | . In Step, Out of Step . | The two governing forces that regulate sleep—the 24-hour circadian rhythm of the suprachiasmatic nucleus and the sleep pressure signal of adenosine—are two distinct and separate systems. They are decoupled, but usually aligned. | . Am I Getting Enough Sleep? . Two rules of thumb: . | After waking up in the morning, could you fall back asleep at ten or eleven a.m.? If yes, then you’re probably not getting enough quality sleep. | Can you function optimally without caffeine before noon? If no, then you are most likely self-medicating your state of chronic sleep deprivation. | . ",
    "url": "/notes/educational_books/why-we-sleep#2-caffeine-jet-lag-and-melatonin-losing-and-gaining-control-of-your-sleep-rhythm",
    
    "relUrl": "/notes/educational_books/why-we-sleep#2-caffeine-jet-lag-and-melatonin-losing-and-gaining-control-of-your-sleep-rhythm"
  },"907": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "3: Defining and Generating Sleep",
    "content": "Self-Identifying Sleep . | Sleeping organisms adopt a stereotypical position. | Sleeping organisms have lowered muscle tone. | Sleeping individuals show no overt displays of communication or responsivity. | Sleep is easily reversible, differentiating it from coma, anesthesia, hibernation, and death. | Sleep adheres to a reliable timed pattern across 24-hours. | The thalamus is the sensory gate of the brain. It puts up a perceptual barricade to block incoming sensory signals while you sleep. | You consciously lose track of time while you sleep. | But your subconscious brain is still capable of logging time with quite remarkable precision while asleep. Thus, why you sometimes wake up right before your alarm goes off. | When you dream, you maintain a sense of time, however, it is not particularly accurate. Often dream-time is prolonged relative to real time. | . Two Types of Sleep . | NREM = Non-rapid eye movement . | Four stages of increasing depth | . | REM = Rapid eye movement . | Brain activity almost identical to when we’re awake | Associated with dreaming | . | . The Sleep Cycle . | NREM and REM stages play out in a recurring, push-pull battle for brain domination across the night in 90-minute intervals. | A key function of deep NREM sleep, which predominates early in the night, is to do the work of weeding out and removing unnecessary neural connections. | The dreaming stage of REM sleep, which prevails later in the night, plays a role in strengthening those connections. | . How Your Brain Generates Sleep . | Wakefulness is reception. | NREM sleep is reflection. | REM sleep is integration. | . ",
    "url": "/notes/educational_books/why-we-sleep#3-defining-and-generating-sleep",
    
    "relUrl": "/notes/educational_books/why-we-sleep#3-defining-and-generating-sleep"
  },"908": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "4: Ape Beds, Dinosaurs, and Napping with Half a Brain: Who Sleeps, How Do We Sleep, and How Much?",
    "content": "Who Sleeps . | Sleep is universal. Without exception, every animal species studied to date sleeps, or engages in something remarkably like it. | . One of These is Not Like the Other . | Total amount of time is one of the most conspicuous differences in how organisms sleep. | Elephants sleep just 4 hours. Brown bats sleep 19 hours. | We don’t really know why it varies so much from one species to another. | . To Dream Or Not To Dream . | Not all species experience all stages of sleep. | All have measurable NREM sleep stages. | Insects, amphibians, fish, and most reptiles show no clear signs of REM sleep—the type associated with dreaming in humans. | . If Only Humans Could . | The way species sleep varies widely. | Cetaceans (such as dolphins and whales) and birds sleep with half a brain at a time. | REM sleep is strangely immune to being split across sides of the brain. Split brain sleeping only applies to NREM. | . Under Pressure . | Starvation will cause the search for food to supersede the need for sleep. | In flight, migrating birds will grab remarkably brief periods of sleep lasting only seconds in duration. | . How Should We Sleep? . | Hunter-gatherer tribes, such as the Gabra in northern Kenya or the San people in the Kalahari Desert, sleep in a biphasic pattern. Both these groups take a similarly longer sleep period at night (7-8 hours), followed by a 30-60 minute nap in the afternoon. | They go to sleep two to three hours after sunset, around 9 PM. | Midnight is supposed to be “mid-night.” Instead, for many of us, it’s usually the time when we consider checking our email one last time. | All humans, irrespective of culture or geographical location, have a genetically hardwired dip in alertness that occurs in the mid-afternoon hours. | When we are cleaved from the innate practice of biphasic sleep, our lives are shortened. | . We Are Special . | The total amount of time we spend asleep is markedly shorter than all other primates, yet we have a disproportionate amount of REM sleep, the stage in which we dream. | REM sleep exquisitely recalibrates and fine-tunes the emotional circuits of the human brain. | REM-sleep dreaming state fuels creativity. | . ",
    "url": "/notes/educational_books/why-we-sleep#4-ape-beds-dinosaurs-and-napping-with-half-a-brain-who-sleeps-how-do-we-sleep-and-how-much",
    
    "relUrl": "/notes/educational_books/why-we-sleep#4-ape-beds-dinosaurs-and-napping-with-half-a-brain-who-sleeps-how-do-we-sleep-and-how-much"
  },"909": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "5: Changes in Sleep Across the Life Span",
    "content": "Sleep Before Birth . -Prior to birth, a human infant will spend almost all of its time in a sleep-like state, much of which resembles the REM-sleep state. -Infants and young children who show signs of autism, or who are diagnosed with autism, do not have normal sleep patterns or amounts. Most notably is the shortage of REM—30-50% less than children without autism. Childhood Sleep . | Infants and young kids display polyphasic sleep: many short snippets of sleep through the day and night. | The master 24-hour clock that controls the circadian rhythm—the suprachiasmatic nucleus—takes considerable time to develop. | . Sleep and Adolescence . | During puberty, NREM sleep ramps up to prune brain connections with the goal of efficiency and effectiveness. | Deep sleep may be a driving force of brain maturation. | The circadian rhythm of adolescent teenagers shifts forward, so far that it passes the timing of their adult parents. So they want to stay up later. | Asking your teenager to go to bed and fall asleep at 10 PM is the circadian equivalent of asking you, their parent, to go to sleep at 7 or 8 PM. | Neither society nor our parental attitudes are well designed to appreciate or accept that teenagers need more sleep than adults, and that they are biologically wired to obtain that sleep at a different time than their parents. | . Sleep in Midlife and Old Age . | Sleep is more problematic and disordered in older adults. | Older adults need just as much sleep as they do in midlife, but are simply less able to generate that (still necessary) sleep. | REM sleep remains largely stable in midlife. But the decline of NREM sleep is already under way by your late twenties and early thirties. | The older we get, the more frequently we wake up throughout the night. The chief culprit is a weakened bladder. | The lower an older individual’s sleep efficiency score, the higher their mortality risk, the worse their physical health, the more likely they are to suffer from depression, the less energy they report, and the lower their cognitive function, typified by forgetfulness. | . ",
    "url": "/notes/educational_books/why-we-sleep#5-changes-in-sleep-across-the-life-span",
    
    "relUrl": "/notes/educational_books/why-we-sleep#5-changes-in-sleep-across-the-life-span"
  },"910": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "6: Your Mother and Shakespeare Knew: The Benefits of Sleep for Your Brain",
    "content": "Sleep-The-Night-Before Learning . | Sleep restores the brain’s capacity for learning, making room for new memories. | The more sleep spindles an individual has at night, the greater the restoration of overnight learning ability come the next morning. | . Sleep-The-Night-After Learning . | Sleep is like clicking the “save” button. It protects newly acquired information against forgetting. | The slow brainwaves of deep NREM sleep serves as a courier service, transporting memory packets from a temporary storage hold (hippocampus) to a more secure, permanent home (the cortex). | Sleep clears out the cache of short-term memory for the new imprinting of facts, while accumulating an ever-updated catalog of past memories. | Sleep salvages memories that appeared to have been lost soon after learning. | . Sleep to Forget? . | Sleep discerns what memories to remember and which to forget. | . Sleep for Other Types of Memory . | Muscle memory is actually brain memory. Our brains remember how to do things. | Practice, followed by a night of sleep, makes perfect. | Daytime naps that contain sufficient numbers of sleep spindles also offer significant motor skill memory improvement, together with a restoring benefit on perceived energy and reduced muscle fatigue. | Sleep is an insurance policy against injury. | . ",
    "url": "/notes/educational_books/why-we-sleep#6-your-mother-and-shakespeare-knew-the-benefits-of-sleep-for-your-brain",
    
    "relUrl": "/notes/educational_books/why-we-sleep#6-your-mother-and-shakespeare-knew-the-benefits-of-sleep-for-your-brain"
  },"911": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "7: Too Extreme for the Guinness Book of World Records: Sleep Deprivation and the Brain",
    "content": ". | Vehicle accidents caused by drowsy driving exceed those caused by alcohol and drugs combined. | After being awake for nineteen hours, people who were sleep-deprived were as cognitively impaired as those who were legally drunk. | Students who stay up late cramming for tests experience a 40% deficit in their ability to make new memories relative to those that get a full nights sleep. | Wakefulness is low-level brain damage, while sleep is neurological sanitation. | Getting too little sleep across the adult life span will significantly raise your risk of developing Alzheimer’s disease. | . ",
    "url": "/notes/educational_books/why-we-sleep#7-too-extreme-for-the-guinness-book-of-world-records-sleep-deprivation-and-the-brain",
    
    "relUrl": "/notes/educational_books/why-we-sleep#7-too-extreme-for-the-guinness-book-of-world-records-sleep-deprivation-and-the-brain"
  },"912": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "8: Cancer, Hear Attacks, and a Shorter Life: Sleep Deprivation and the Body",
    "content": ". | Unhealthy sleep, unhealthy heart. | Adults 45+ who sleep &lt;6 hours are 200% more likely to have a heart attack or stroke compared to those sleeping 7-8 hours. | In the Northern Hemisphere, the switch to daylight savings time in March results in most people losing an hour of sleep opportunity. When viewed across the millions of daily hospital records, this seemingly trivial sleep reduction comes with a frightening spike in heart attacks the following day. | The less you sleep, the more you are likely to eat. | Chronic sleep deprivation is one of the major contributors to type 2 diabetes. | Insufficient sleep is linked to obesity. | Short sleep causes the body to deplete muscle mass and retain fat. | Men who suffer from sleep disorders (sleep apnea and snoring) have significantly lower levels of testosterone. | Your immune response suffers after a single night of reduced sleep. | . ",
    "url": "/notes/educational_books/why-we-sleep#8-cancer-hear-attacks-and-a-shorter-life-sleep-deprivation-and-the-body",
    
    "relUrl": "/notes/educational_books/why-we-sleep#8-cancer-hear-attacks-and-a-shorter-life-sleep-deprivation-and-the-body"
  },"913": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "9: Routinely Psychotic: REM-Sleep Dreaming",
    "content": ". | REM sleep accounts for the hallucinogenic, emotional , and bizarre experiences with a rich narrative. | REM sleep is a state characterized by strong activation in visual, motor, emotional, and autobiographical memory regions of the brain, yet a relative deactivation in regions that control rational thought. | MRI scans be used to predict with significant accuracy the content of your dreams by matching images of brain activity to baseline templates. | Dreams are not a wholesale replay of our waking lives. | Daytime emotions, however, do have some influence over the emotional themes of our dreams. | . ",
    "url": "/notes/educational_books/why-we-sleep#9-routinely-psychotic-rem-sleep-dreaming",
    
    "relUrl": "/notes/educational_books/why-we-sleep#9-routinely-psychotic-rem-sleep-dreaming"
  },"914": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "10: Dreaming as Overnight Therapy",
    "content": ". | REM sleep helps us divorce emotion from experience. We can therefore learn and usefully recall salient life events without being crippled by the emotional baggage that those painful experiences originally carried. | Dreaming about difficult life events helps people gain clinical resolution from their despair. | Like a master piano tuner, REM sleep readjusts the brain’s emotional instrument at night to pitch-perfect precision. | . ",
    "url": "/notes/educational_books/why-we-sleep#10-dreaming-as-overnight-therapy",
    
    "relUrl": "/notes/educational_books/why-we-sleep#10-dreaming-as-overnight-therapy"
  },"915": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "11: Dream Creativity and Dream Control",
    "content": ". | Sleep builds connections between distantly related informational elements that are not obvious in the light of waking day. | Relational memory processing receives an accelerated boost from REM sleep. | Like an insightful interviewer, dreaming takes the approach of interrogating our recent autobiographical experience and skillfully positioning it within the context of past experiences and accomplishments, building a rich tapestry of meaning. | Lucid dreaming is possible. Some people can control when and what they dream while they are dreaming. | . ",
    "url": "/notes/educational_books/why-we-sleep#11-dream-creativity-and-dream-control",
    
    "relUrl": "/notes/educational_books/why-we-sleep#11-dream-creativity-and-dream-control"
  },"916": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "12: Things That Go Bump in the Night: Sleep Disorders and Death Caused by No Sleep",
    "content": "Somnambulism . Sleep disorders that involve movement: . | Sleepwalking | Sleep talking | Sleep eating | Sleep sex | Sleep homicide (very rare, but it has happened) | . Insomnia . Clinical difficulty falling asleep or staying asleep. Widespread problem. Approx. 1/9 Americans, or 40 million suffer. Often triggered by worry or anxiety. Narcolepsy . A neurological disorder with three core symptoms. Excessive daytime sleepiness = Sudden, irresistible urges to sleep Sleep paralysis = Loss of ability to talk or move when waking up from sleep. Cataplexy = Sudden loss of muscle control. Caused by body paralysis of REM sleep without the sleep of the REM state itself. Fatal Familial Insomnia . Genetically inherited disorder causing a complete inability to sleep and resulting in death. Mutated prion proteins attack the thalamus and render it incapable of blocking senses from the outside world. Sleep Deprivation Experiments with Rats . Rats will die after 15 days without sleep, on average. Cause of death was a simple bacteria infection from their gut. Under normal circumstances, it would be easily quelled by a rested, healthy immune system. ",
    "url": "/notes/educational_books/why-we-sleep#12-things-that-go-bump-in-the-night-sleep-disorders-and-death-caused-by-no-sleep",
    
    "relUrl": "/notes/educational_books/why-we-sleep#12-things-that-go-bump-in-the-night-sleep-disorders-and-death-caused-by-no-sleep"
  },"917": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "13: iPads, Factory Whistles, and Nightcaps: What’s Stopping You From Sleeping?",
    "content": ". | Constant electric light | Alcohol | Regularized temperature | Caffeine (Chapter 2) | A legacy of punching time cards | . Modern Light . | Artificial evening light will fool your suprachiasmatic nucleus into believing the sun has not yet set. | Melatonin is not released on schedule. | Evening blue LED light has twice the harmful impact on nighttime melatonin suppression than warm, yellow light from old incandescent bulbs. | Maintaining complete darkness throughout the night is equally critical. | . Alcohol . | Alcohol fragments sleep, therefore sleep is not continuous and not restorative. | Alcohol is a powerful REM suppressor, depriving you of dream sleep. | . Temperature . | Core body temp must decrease 2-3 degrees Fahrenheit to initiate sleep. | 65 degrees is ideal. | Body temp is controlled by your hands, feet, and head. Warm these areas to draw out heat trapped in the body’s core. | . Industry . | The affects of being artificially wrenched from sleep (alarm clocks) include a spike in blood pressure and a shock acceleration in heart rate caused by an explosive burst of activity from the flight-or-flight branch of the nervous system. | Don’t press snooze and afflict yourself to this more than once. | . ",
    "url": "/notes/educational_books/why-we-sleep#13-ipads-factory-whistles-and-nightcaps-whats-stopping-you-from-sleeping",
    
    "relUrl": "/notes/educational_books/why-we-sleep#13-ipads-factory-whistles-and-nightcaps-whats-stopping-you-from-sleeping"
  },"918": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "14: Hurting and Helping Your Sleep: Pills vs. Therapy",
    "content": ". | Sleep pills almost always do more harm than good. | The quality of pill-induced sleep is deficient. | Sleep pills are addictive. | Individuals using prescription sleep medications are significantly more likely to die and to develop cancer than those who do not. | . Cognitive Behavioral Therapy for Insomnia . Techniques intended to break bad sleep habits and address anxieties that inhibit sleep: . | Establish a regular bedtime and wake-up time, even on weekends. | Go to bed only when sleepy and avoid sleeping on the couch early/mid-evenings. | Never lie awake in bed for a significant period of time. | Avoid daytime napping. | Reduce anxiety-provoking thoughts and worries. | Remove visible clock faces from view in the bedroom. | . ",
    "url": "/notes/educational_books/why-we-sleep#14-hurting-and-helping-your-sleep-pills-vs-therapy",
    
    "relUrl": "/notes/educational_books/why-we-sleep#14-hurting-and-helping-your-sleep-pills-vs-therapy"
  },"919": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "15: Sleep and Society: What Medicine and Education Are Doing Wrong; What Google and NASA Are Doing Right",
    "content": ". | The World Health Organization recognizes lack of sleep as a global health epidemic. | The brain can never recover all the sleep it has been deprived of. We cannot accumulate a sleep debt throughout the week and catch up on the weekends. | . Business . | Routinely, business leaders mistakenly believe that time on-task equates with task completion and productivity. | A study across four large US companies found that insufficient sleep cost almost $2,000 per employee per year in lost productivity. | Insufficient sleep robs most nations of more than 2 percent of their GDP. | Creativity, intelligence, motivation, effort, efficiency, effectiveness when working in groups, as well as emotional stability, sociability, and honesty. All of these things are systematically dismantled by insufficient sleep. | Sleep-deprived individuals also generate fewer and less accurate solutions to work-relevant problems they are challenged with. | People are much more likely to lie, cheat, steal, and blame others for their mistakes when then sleep six or less hours. | . Inhumane Use of Sleep Loss . | Sleep deprivation is a form of torture. | Very ineffective for gathering accurate information. | Causes permanent physical and mental harm. | . Education . | Teenagers in America routinely wake up at 5:30, or earlier, to get to class—this is crazy. | Adolescence is the most susceptible phase of life for developing chronic mental illnesses, such as depression, anxiety, schizophrenia, and suicidality. Sleep deprivation can be the tipping point between psychological wellness and lifelong psychiatric illness. | Increasing sleep by way of delayed school start times wonderfully increases class attendance, reduces behavioral and psychological problems, and decreases substance and alcohol use. | It’s estimated that more than 50% of all children with an ADHD diagnosis actually have a sleep disorder. | . Healthcare . | Throughout the course of their residency, one in five medical residents will make a sleepless-related medical error that causes significant, liable harm to a patient. | One in twenty will kill a patient due to a lack of sleep. | Medical errors are the third-leading cause of death among Americans after heart attacks and cancer. Sleeplessness undoubtedly plays a role in those lives lost. | If you are about to undergo an elective surgery, you should ask how much sleep your doctor as had. | One cannot “learn” how to overcome a lack of sleep and develop resilience. | . ",
    "url": "/notes/educational_books/why-we-sleep#15-sleep-and-society-what-medicine-and-education-are-doing-wrong-what-google-and-nasa-are-doing-right",
    
    "relUrl": "/notes/educational_books/why-we-sleep#15-sleep-and-society-what-medicine-and-education-are-doing-wrong-what-google-and-nasa-are-doing-right"
  },"920": {
    "doc": "Why We Sleep: Unlocking the Power of Sleep and Dreams",
    "title": "16: A New Vision for Sleep in the Twenty-First Century",
    "content": ". | Link individual sleep trackers with connected devices like thermostats and lighting. | We need to increase sleep awareness and teach it in our schools. | Companies could incentivize their employees to get better sleep. | Business should offer more flexibility with their work hours. Allowing larks to start early and owls to stay late. | Health insurance costs could go down if people were rewarded to prioritize sleep. | . ",
    "url": "/notes/educational_books/why-we-sleep#16-a-new-vision-for-sleep-in-the-twenty-first-century",
    
    "relUrl": "/notes/educational_books/why-we-sleep#16-a-new-vision-for-sleep-in-the-twenty-first-century"
  }
}
